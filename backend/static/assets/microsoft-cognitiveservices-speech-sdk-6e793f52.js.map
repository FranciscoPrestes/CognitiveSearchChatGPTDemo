{"version":3,"file":"microsoft-cognitiveservices-speech-sdk-6e793f52.js","sources":["../../../frontend/__vite-browser-external","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/PlatformEvent.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/AudioSourceEvents.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionEvents.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionMessage.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionOpenResponse.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/EventSource.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Events.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/IConnection.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/List.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Promise.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Queue.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/RawWebsocketMessage.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/RiffPcmEncoder.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Stream.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ChunkedArrayBufferStream.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Timeout.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/OCSPEvents.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/BackgroundError.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/HeaderNames.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/IAuthentication.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/CognitiveSubscriptionKeyAuthentication.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/CognitiveTokenAuthentication.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioFileWriter.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioStreamFormat.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioInputStream.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesisOutputFormat.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioOutputFormat.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioOutputStream.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioConfig.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationReason.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/PullAudioInputStreamCallback.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/PushAudioOutputStreamCallback.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SessionEventArgs.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/RecognitionEventArgs.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/OutputFormat.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/RecognitionResult.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechRecognitionResult.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechRecognitionEventArgs.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationEventArgsBase.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechRecognitionCanceledEventArgs.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ResultReason.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechConfig.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyCollection.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Recognizer.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechRecognizer.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationDetailsBase.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationDetails.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationErrorCodes.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/QueryParameterNames.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ConnectionFactoryBase.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ProfanityOption.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesizer.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SynthesisResult.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesisResult.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesisEventArgs.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesisWordBoundaryEventArgs.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesisBookmarkEventArgs.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesisVisemeEventArgs.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SynthesisVoicesResult.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/VoiceInfo.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/SpeakerAudioDestination.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RecognitionEvents.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechConnectionMessage.Internal.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceRecognizerBase.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RecognizerConfig.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/WebsocketMessageFormatter.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechConnectionFactory.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechSynthesisConnectionFactory.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/EnumTranslation.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/Enums.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SpeechDetected.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SpeechHypothesis.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechServiceRecognizer.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/DetailedSpeechPhrase.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SimpleSpeechPhrase.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceTelemetryListener.Internal.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RequestSession.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechContext.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/DynamicGrammarBuilder.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/AgentConfig.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/RestConfigBase.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SynthesisAudioMetadata.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SynthesisAdapterBase.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SynthesisEvents.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SynthesisTurn.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SynthesisRestAdapter.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SynthesizerConfig.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SynthesisContext.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/MicAudioSource.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/FileAudioSource.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/PCMRecorder.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/CertChecks.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/WebsocketMessageAdapter.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/WebsocketConnection.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/ReplayableAudioNode.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/ProxyInfo.js","../../../frontend/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/RestMessageAdapter.js"],"sourcesContent":["export default {}","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { v4 as uuid } from \"uuid\";\r\nconst createGuid = () => uuid();\r\nconst createNoDashGuid = () => createGuid().replace(new RegExp(\"-\", \"g\"), \"\").toUpperCase();\r\nexport { createGuid, createNoDashGuid };\r\n\r\n//# sourceMappingURL=Guid.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { createNoDashGuid } from \"./Guid\";\r\nexport var EventType;\r\n(function (EventType) {\r\n    EventType[EventType[\"Debug\"] = 0] = \"Debug\";\r\n    EventType[EventType[\"Info\"] = 1] = \"Info\";\r\n    EventType[EventType[\"Warning\"] = 2] = \"Warning\";\r\n    EventType[EventType[\"Error\"] = 3] = \"Error\";\r\n    EventType[EventType[\"None\"] = 4] = \"None\";\r\n})(EventType || (EventType = {}));\r\nexport class PlatformEvent {\r\n    constructor(eventName, eventType) {\r\n        this.privName = eventName;\r\n        this.privEventId = createNoDashGuid();\r\n        this.privEventTime = new Date().toISOString();\r\n        this.privEventType = eventType;\r\n        this.privMetadata = {};\r\n    }\r\n    get name() {\r\n        return this.privName;\r\n    }\r\n    get eventId() {\r\n        return this.privEventId;\r\n    }\r\n    get eventTime() {\r\n        return this.privEventTime;\r\n    }\r\n    get eventType() {\r\n        return this.privEventType;\r\n    }\r\n    get metadata() {\r\n        return this.privMetadata;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=PlatformEvent.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/* eslint-disable max-classes-per-file */\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent\";\r\nexport class AudioSourceEvent extends PlatformEvent {\r\n    constructor(eventName, audioSourceId, eventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n        this.privAudioSourceId = audioSourceId;\r\n    }\r\n    get audioSourceId() {\r\n        return this.privAudioSourceId;\r\n    }\r\n}\r\nexport class AudioSourceInitializingEvent extends AudioSourceEvent {\r\n    constructor(audioSourceId) {\r\n        super(\"AudioSourceInitializingEvent\", audioSourceId);\r\n    }\r\n}\r\nexport class AudioSourceReadyEvent extends AudioSourceEvent {\r\n    constructor(audioSourceId) {\r\n        super(\"AudioSourceReadyEvent\", audioSourceId);\r\n    }\r\n}\r\nexport class AudioSourceOffEvent extends AudioSourceEvent {\r\n    constructor(audioSourceId) {\r\n        super(\"AudioSourceOffEvent\", audioSourceId);\r\n    }\r\n}\r\nexport class AudioSourceErrorEvent extends AudioSourceEvent {\r\n    constructor(audioSourceId, error) {\r\n        super(\"AudioSourceErrorEvent\", audioSourceId, EventType.Error);\r\n        this.privError = error;\r\n    }\r\n    get error() {\r\n        return this.privError;\r\n    }\r\n}\r\nexport class AudioStreamNodeEvent extends AudioSourceEvent {\r\n    constructor(eventName, audioSourceId, audioNodeId) {\r\n        super(eventName, audioSourceId);\r\n        this.privAudioNodeId = audioNodeId;\r\n    }\r\n    get audioNodeId() {\r\n        return this.privAudioNodeId;\r\n    }\r\n}\r\nexport class AudioStreamNodeAttachingEvent extends AudioStreamNodeEvent {\r\n    constructor(audioSourceId, audioNodeId) {\r\n        super(\"AudioStreamNodeAttachingEvent\", audioSourceId, audioNodeId);\r\n    }\r\n}\r\nexport class AudioStreamNodeAttachedEvent extends AudioStreamNodeEvent {\r\n    constructor(audioSourceId, audioNodeId) {\r\n        super(\"AudioStreamNodeAttachedEvent\", audioSourceId, audioNodeId);\r\n    }\r\n}\r\nexport class AudioStreamNodeDetachedEvent extends AudioStreamNodeEvent {\r\n    constructor(audioSourceId, audioNodeId) {\r\n        super(\"AudioStreamNodeDetachedEvent\", audioSourceId, audioNodeId);\r\n    }\r\n}\r\nexport class AudioStreamNodeErrorEvent extends AudioStreamNodeEvent {\r\n    constructor(audioSourceId, audioNodeId, error) {\r\n        super(\"AudioStreamNodeErrorEvent\", audioSourceId, audioNodeId);\r\n        this.privError = error;\r\n    }\r\n    get error() {\r\n        return this.privError;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=AudioSourceEvents.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent\";\r\nexport class ServiceEvent extends PlatformEvent {\r\n    constructor(eventName, jsonstring, eventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n        this.privJsonResult = jsonstring;\r\n    }\r\n    get jsonString() {\r\n        return this.privJsonResult;\r\n    }\r\n}\r\nexport class ConnectionEvent extends PlatformEvent {\r\n    constructor(eventName, connectionId, eventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n        this.privConnectionId = connectionId;\r\n    }\r\n    get connectionId() {\r\n        return this.privConnectionId;\r\n    }\r\n}\r\nexport class ConnectionStartEvent extends ConnectionEvent {\r\n    constructor(connectionId, uri, headers) {\r\n        super(\"ConnectionStartEvent\", connectionId);\r\n        this.privUri = uri;\r\n        this.privHeaders = headers;\r\n    }\r\n    get uri() {\r\n        return this.privUri;\r\n    }\r\n    get headers() {\r\n        return this.privHeaders;\r\n    }\r\n}\r\nexport class ConnectionEstablishedEvent extends ConnectionEvent {\r\n    constructor(connectionId) {\r\n        super(\"ConnectionEstablishedEvent\", connectionId);\r\n    }\r\n}\r\nexport class ConnectionClosedEvent extends ConnectionEvent {\r\n    constructor(connectionId, statusCode, reason) {\r\n        super(\"ConnectionClosedEvent\", connectionId, EventType.Debug);\r\n        this.privReason = reason;\r\n        this.privStatusCode = statusCode;\r\n    }\r\n    get reason() {\r\n        return this.privReason;\r\n    }\r\n    get statusCode() {\r\n        return this.privStatusCode;\r\n    }\r\n}\r\nexport class ConnectionErrorEvent extends ConnectionEvent {\r\n    constructor(connectionId, message, type) {\r\n        super(\"ConnectionErrorEvent\", connectionId, EventType.Debug);\r\n        this.privMessage = message;\r\n        this.privType = type;\r\n    }\r\n    get message() {\r\n        return this.privMessage;\r\n    }\r\n    get type() {\r\n        return this.privType;\r\n    }\r\n}\r\nexport class ConnectionEstablishErrorEvent extends ConnectionEvent {\r\n    constructor(connectionId, statuscode, reason) {\r\n        super(\"ConnectionEstablishErrorEvent\", connectionId, EventType.Error);\r\n        this.privStatusCode = statuscode;\r\n        this.privReason = reason;\r\n    }\r\n    get reason() {\r\n        return this.privReason;\r\n    }\r\n    get statusCode() {\r\n        return this.privStatusCode;\r\n    }\r\n}\r\nexport class ConnectionMessageReceivedEvent extends ConnectionEvent {\r\n    constructor(connectionId, networkReceivedTimeISO, message) {\r\n        super(\"ConnectionMessageReceivedEvent\", connectionId);\r\n        this.privNetworkReceivedTime = networkReceivedTimeISO;\r\n        this.privMessage = message;\r\n    }\r\n    get networkReceivedTime() {\r\n        return this.privNetworkReceivedTime;\r\n    }\r\n    get message() {\r\n        return this.privMessage;\r\n    }\r\n}\r\nexport class ConnectionMessageSentEvent extends ConnectionEvent {\r\n    constructor(connectionId, networkSentTimeISO, message) {\r\n        super(\"ConnectionMessageSentEvent\", connectionId);\r\n        this.privNetworkSentTime = networkSentTimeISO;\r\n        this.privMessage = message;\r\n    }\r\n    get networkSentTime() {\r\n        return this.privNetworkSentTime;\r\n    }\r\n    get message() {\r\n        return this.privMessage;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=ConnectionEvents.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/* eslint-disable max-classes-per-file */\r\n/**\r\n * The error that is thrown when an argument passed in is null.\r\n *\r\n * @export\r\n * @class ArgumentNullError\r\n * @extends {Error}\r\n */\r\nexport class ArgumentNullError extends Error {\r\n    /**\r\n     * Creates an instance of ArgumentNullError.\r\n     *\r\n     * @param {string} argumentName - Name of the argument that is null\r\n     *\r\n     * @memberOf ArgumentNullError\r\n     */\r\n    constructor(argumentName) {\r\n        super(argumentName);\r\n        this.name = \"ArgumentNull\";\r\n        this.message = argumentName;\r\n    }\r\n}\r\n/**\r\n * The error that is thrown when an invalid operation is performed in the code.\r\n *\r\n * @export\r\n * @class InvalidOperationError\r\n * @extends {Error}\r\n */\r\nexport class InvalidOperationError extends Error {\r\n    /**\r\n     * Creates an instance of InvalidOperationError.\r\n     *\r\n     * @param {string} error - The error\r\n     *\r\n     * @memberOf InvalidOperationError\r\n     */\r\n    constructor(error) {\r\n        super(error);\r\n        this.name = \"InvalidOperation\";\r\n        this.message = error;\r\n    }\r\n}\r\n/**\r\n * The error that is thrown when an object is disposed.\r\n *\r\n * @export\r\n * @class ObjectDisposedError\r\n * @extends {Error}\r\n */\r\nexport class ObjectDisposedError extends Error {\r\n    /**\r\n     * Creates an instance of ObjectDisposedError.\r\n     *\r\n     * @param {string} objectName - The object that is disposed\r\n     * @param {string} error - The error\r\n     *\r\n     * @memberOf ObjectDisposedError\r\n     */\r\n    constructor(objectName, error) {\r\n        super(error);\r\n        this.name = objectName + \"ObjectDisposed\";\r\n        this.message = error;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=Error.js.map\r\n","/* eslint-disable @typescript-eslint/no-unsafe-return */\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { InvalidOperationError } from \"./Error\";\r\nimport { createNoDashGuid } from \"./Guid\";\r\nexport var MessageType;\r\n(function (MessageType) {\r\n    MessageType[MessageType[\"Text\"] = 0] = \"Text\";\r\n    MessageType[MessageType[\"Binary\"] = 1] = \"Binary\";\r\n})(MessageType || (MessageType = {}));\r\nexport class ConnectionMessage {\r\n    constructor(messageType, body, headers, id) {\r\n        this.privBody = null;\r\n        if (messageType === MessageType.Text && body && !(typeof (body) === \"string\")) {\r\n            throw new InvalidOperationError(\"Payload must be a string\");\r\n        }\r\n        if (messageType === MessageType.Binary && body && !(body instanceof ArrayBuffer)) {\r\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\r\n        }\r\n        this.privMessageType = messageType;\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n        this.privBody = body;\r\n        this.privHeaders = headers ? headers : {};\r\n        this.privId = id ? id : createNoDashGuid();\r\n        switch (this.messageType) {\r\n            case MessageType.Binary:\r\n                this.privSize = this.binaryBody !== null ? this.binaryBody.byteLength : 0;\r\n                break;\r\n            case MessageType.Text:\r\n                this.privSize = this.textBody.length;\r\n        }\r\n    }\r\n    get messageType() {\r\n        return this.privMessageType;\r\n    }\r\n    get headers() {\r\n        return this.privHeaders;\r\n    }\r\n    get body() {\r\n        return this.privBody;\r\n    }\r\n    get textBody() {\r\n        if (this.privMessageType === MessageType.Binary) {\r\n            throw new InvalidOperationError(\"Not supported for binary message\");\r\n        }\r\n        return this.privBody;\r\n    }\r\n    get binaryBody() {\r\n        if (this.privMessageType === MessageType.Text) {\r\n            throw new InvalidOperationError(\"Not supported for text message\");\r\n        }\r\n        return this.privBody;\r\n    }\r\n    get id() {\r\n        return this.privId;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=ConnectionMessage.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nexport class ConnectionOpenResponse {\r\n    constructor(statusCode, reason) {\r\n        this.privStatusCode = statusCode;\r\n        this.privReason = reason;\r\n    }\r\n    get statusCode() {\r\n        return this.privStatusCode;\r\n    }\r\n    get reason() {\r\n        return this.privReason;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=ConnectionOpenResponse.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { ObjectDisposedError } from \"./Error\";\r\nimport { createNoDashGuid } from \"./Guid\";\r\nexport class EventSource {\r\n    constructor(metadata) {\r\n        this.privEventListeners = {};\r\n        this.privIsDisposed = false;\r\n        this.privConsoleListener = undefined;\r\n        this.privMetadata = metadata;\r\n    }\r\n    onEvent(event) {\r\n        if (this.isDisposed()) {\r\n            throw (new ObjectDisposedError(\"EventSource\"));\r\n        }\r\n        if (this.metadata) {\r\n            for (const paramName in this.metadata) {\r\n                if (paramName) {\r\n                    if (event.metadata) {\r\n                        if (!event.metadata[paramName]) {\r\n                            event.metadata[paramName] = this.metadata[paramName];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        for (const eventId in this.privEventListeners) {\r\n            if (eventId && this.privEventListeners[eventId]) {\r\n                this.privEventListeners[eventId](event);\r\n            }\r\n        }\r\n    }\r\n    attach(onEventCallback) {\r\n        const id = createNoDashGuid();\r\n        this.privEventListeners[id] = onEventCallback;\r\n        return {\r\n            detach: () => {\r\n                delete this.privEventListeners[id];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n    attachListener(listener) {\r\n        return this.attach((e) => listener.onEvent(e));\r\n    }\r\n    attachConsoleListener(listener) {\r\n        if (!!this.privConsoleListener) {\r\n            void this.privConsoleListener.detach(); // Detach implementation for eventListeners is synchronous\r\n        }\r\n        this.privConsoleListener = this.attach((e) => listener.onEvent(e));\r\n        return this.privConsoleListener;\r\n    }\r\n    isDisposed() {\r\n        return this.privIsDisposed;\r\n    }\r\n    dispose() {\r\n        this.privEventListeners = null;\r\n        this.privIsDisposed = true;\r\n    }\r\n    get metadata() {\r\n        return this.privMetadata;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=EventSource.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { ArgumentNullError } from \"./Error\";\r\nimport { EventSource } from \"./EventSource\";\r\nexport class Events {\r\n    static setEventSource(eventSource) {\r\n        if (!eventSource) {\r\n            throw new ArgumentNullError(\"eventSource\");\r\n        }\r\n        Events.privInstance = eventSource;\r\n    }\r\n    static get instance() {\r\n        return Events.privInstance;\r\n    }\r\n}\r\nEvents.privInstance = new EventSource();\r\n\r\n//# sourceMappingURL=Events.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nexport var ConnectionState;\r\n(function (ConnectionState) {\r\n    ConnectionState[ConnectionState[\"None\"] = 0] = \"None\";\r\n    ConnectionState[ConnectionState[\"Connected\"] = 1] = \"Connected\";\r\n    ConnectionState[ConnectionState[\"Connecting\"] = 2] = \"Connecting\";\r\n    ConnectionState[ConnectionState[\"Disconnected\"] = 3] = \"Disconnected\";\r\n})(ConnectionState || (ConnectionState = {}));\r\n\r\n//# sourceMappingURL=IConnection.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { ObjectDisposedError } from \"./Error\";\r\nexport class List {\r\n    constructor(list) {\r\n        this.privSubscriptionIdCounter = 0;\r\n        this.privAddSubscriptions = {};\r\n        this.privRemoveSubscriptions = {};\r\n        this.privDisposedSubscriptions = {};\r\n        this.privDisposeReason = null;\r\n        this.privList = [];\r\n        // copy the list rather than taking as is.\r\n        if (list) {\r\n            for (const item of list) {\r\n                this.privList.push(item);\r\n            }\r\n        }\r\n    }\r\n    get(itemIndex) {\r\n        this.throwIfDisposed();\r\n        return this.privList[itemIndex];\r\n    }\r\n    first() {\r\n        return this.get(0);\r\n    }\r\n    last() {\r\n        return this.get(this.length() - 1);\r\n    }\r\n    add(item) {\r\n        this.throwIfDisposed();\r\n        this.insertAt(this.privList.length, item);\r\n    }\r\n    insertAt(index, item) {\r\n        this.throwIfDisposed();\r\n        if (index === 0) {\r\n            this.privList.unshift(item);\r\n        }\r\n        else if (index === this.privList.length) {\r\n            this.privList.push(item);\r\n        }\r\n        else {\r\n            this.privList.splice(index, 0, item);\r\n        }\r\n        this.triggerSubscriptions(this.privAddSubscriptions);\r\n    }\r\n    removeFirst() {\r\n        this.throwIfDisposed();\r\n        return this.removeAt(0);\r\n    }\r\n    removeLast() {\r\n        this.throwIfDisposed();\r\n        return this.removeAt(this.length() - 1);\r\n    }\r\n    removeAt(index) {\r\n        this.throwIfDisposed();\r\n        return this.remove(index, 1)[0];\r\n    }\r\n    remove(index, count) {\r\n        this.throwIfDisposed();\r\n        const removedElements = this.privList.splice(index, count);\r\n        this.triggerSubscriptions(this.privRemoveSubscriptions);\r\n        return removedElements;\r\n    }\r\n    clear() {\r\n        this.throwIfDisposed();\r\n        this.remove(0, this.length());\r\n    }\r\n    length() {\r\n        this.throwIfDisposed();\r\n        return this.privList.length;\r\n    }\r\n    onAdded(addedCallback) {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n        this.privAddSubscriptions[subscriptionId] = addedCallback;\r\n        return {\r\n            detach: () => {\r\n                delete this.privAddSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n    onRemoved(removedCallback) {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n        this.privRemoveSubscriptions[subscriptionId] = removedCallback;\r\n        return {\r\n            detach: () => {\r\n                delete this.privRemoveSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n    onDisposed(disposedCallback) {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n        this.privDisposedSubscriptions[subscriptionId] = disposedCallback;\r\n        return {\r\n            detach: () => {\r\n                delete this.privDisposedSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n    join(seperator) {\r\n        this.throwIfDisposed();\r\n        return this.privList.join(seperator);\r\n    }\r\n    toArray() {\r\n        const cloneCopy = Array();\r\n        this.privList.forEach((val) => {\r\n            cloneCopy.push(val);\r\n        });\r\n        return cloneCopy;\r\n    }\r\n    any(callback) {\r\n        this.throwIfDisposed();\r\n        if (callback) {\r\n            return this.where(callback).length() > 0;\r\n        }\r\n        else {\r\n            return this.length() > 0;\r\n        }\r\n    }\r\n    all(callback) {\r\n        this.throwIfDisposed();\r\n        return this.where(callback).length() === this.length();\r\n    }\r\n    forEach(callback) {\r\n        this.throwIfDisposed();\r\n        for (let i = 0; i < this.length(); i++) {\r\n            callback(this.privList[i], i);\r\n        }\r\n    }\r\n    select(callback) {\r\n        this.throwIfDisposed();\r\n        const selectList = [];\r\n        for (let i = 0; i < this.privList.length; i++) {\r\n            selectList.push(callback(this.privList[i], i));\r\n        }\r\n        return new List(selectList);\r\n    }\r\n    where(callback) {\r\n        this.throwIfDisposed();\r\n        const filteredList = new List();\r\n        for (let i = 0; i < this.privList.length; i++) {\r\n            if (callback(this.privList[i], i)) {\r\n                filteredList.add(this.privList[i]);\r\n            }\r\n        }\r\n        return filteredList;\r\n    }\r\n    orderBy(compareFn) {\r\n        this.throwIfDisposed();\r\n        const clonedArray = this.toArray();\r\n        const orderedArray = clonedArray.sort(compareFn);\r\n        return new List(orderedArray);\r\n    }\r\n    orderByDesc(compareFn) {\r\n        this.throwIfDisposed();\r\n        return this.orderBy((a, b) => compareFn(b, a));\r\n    }\r\n    clone() {\r\n        this.throwIfDisposed();\r\n        return new List(this.toArray());\r\n    }\r\n    concat(list) {\r\n        this.throwIfDisposed();\r\n        return new List(this.privList.concat(list.toArray()));\r\n    }\r\n    concatArray(array) {\r\n        this.throwIfDisposed();\r\n        return new List(this.privList.concat(array));\r\n    }\r\n    isDisposed() {\r\n        return this.privList == null;\r\n    }\r\n    dispose(reason) {\r\n        if (!this.isDisposed()) {\r\n            this.privDisposeReason = reason;\r\n            this.privList = null;\r\n            this.privAddSubscriptions = null;\r\n            this.privRemoveSubscriptions = null;\r\n            this.triggerSubscriptions(this.privDisposedSubscriptions);\r\n        }\r\n    }\r\n    throwIfDisposed() {\r\n        if (this.isDisposed()) {\r\n            throw new ObjectDisposedError(\"List\", this.privDisposeReason);\r\n        }\r\n    }\r\n    triggerSubscriptions(subscriptions) {\r\n        if (subscriptions) {\r\n            for (const subscriptionId in subscriptions) {\r\n                if (subscriptionId) {\r\n                    subscriptions[subscriptionId]();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=List.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/* eslint-disable max-classes-per-file, @typescript-eslint/typedef */\r\nexport var PromiseState;\r\n(function (PromiseState) {\r\n    PromiseState[PromiseState[\"None\"] = 0] = \"None\";\r\n    PromiseState[PromiseState[\"Resolved\"] = 1] = \"Resolved\";\r\n    PromiseState[PromiseState[\"Rejected\"] = 2] = \"Rejected\";\r\n})(PromiseState || (PromiseState = {}));\r\nexport class PromiseResult {\r\n    constructor(promiseResultEventSource) {\r\n        this.throwIfError = () => {\r\n            if (this.isError) {\r\n                throw this.error;\r\n            }\r\n        };\r\n        promiseResultEventSource.on((result) => {\r\n            if (!this.privIsCompleted) {\r\n                this.privIsCompleted = true;\r\n                this.privIsError = false;\r\n                this.privResult = result;\r\n            }\r\n        }, (error) => {\r\n            if (!this.privIsCompleted) {\r\n                this.privIsCompleted = true;\r\n                this.privIsError = true;\r\n                this.privError = error;\r\n            }\r\n        });\r\n    }\r\n    get isCompleted() {\r\n        return this.privIsCompleted;\r\n    }\r\n    get isError() {\r\n        return this.privIsError;\r\n    }\r\n    get error() {\r\n        return this.privError;\r\n    }\r\n    get result() {\r\n        return this.privResult;\r\n    }\r\n}\r\nexport class PromiseResultEventSource {\r\n    constructor() {\r\n        this.setResult = (result) => {\r\n            this.privOnSetResult(result);\r\n        };\r\n        this.setError = (error) => {\r\n            this.privOnSetError(error);\r\n        };\r\n        this.on = (onSetResult, onSetError) => {\r\n            this.privOnSetResult = onSetResult;\r\n            this.privOnSetError = onSetError;\r\n        };\r\n    }\r\n}\r\nexport class Deferred {\r\n    constructor() {\r\n        this.resolve = (result) => {\r\n            this.privResolve(result);\r\n            return this;\r\n        };\r\n        this.reject = (error) => {\r\n            this.privReject(error);\r\n            return this;\r\n        };\r\n        // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\r\n        this.privPromise = new Promise((resolve, reject) => {\r\n            this.privResolve = resolve;\r\n            this.privReject = reject;\r\n        });\r\n    }\r\n    get promise() {\r\n        return this.privPromise;\r\n    }\r\n}\r\nexport class Sink {\r\n    constructor() {\r\n        this.privState = PromiseState.None;\r\n        this.privPromiseResult = null;\r\n        this.privPromiseResultEvents = null;\r\n        this.privSuccessHandlers = [];\r\n        this.privErrorHandlers = [];\r\n        this.privPromiseResultEvents = new PromiseResultEventSource();\r\n        this.privPromiseResult = new PromiseResult(this.privPromiseResultEvents);\r\n    }\r\n    get state() {\r\n        return this.privState;\r\n    }\r\n    get result() {\r\n        return this.privPromiseResult;\r\n    }\r\n    resolve(result) {\r\n        if (this.privState !== PromiseState.None) {\r\n            throw new Error(\"'Cannot resolve a completed promise'\");\r\n        }\r\n        this.privState = PromiseState.Resolved;\r\n        this.privPromiseResultEvents.setResult(result);\r\n        for (let i = 0; i < this.privSuccessHandlers.length; i++) {\r\n            this.executeSuccessCallback(result, this.privSuccessHandlers[i], this.privErrorHandlers[i]);\r\n        }\r\n        this.detachHandlers();\r\n    }\r\n    reject(error) {\r\n        if (this.privState !== PromiseState.None) {\r\n            throw new Error(\"'Cannot reject a completed promise'\");\r\n        }\r\n        this.privState = PromiseState.Rejected;\r\n        this.privPromiseResultEvents.setError(error);\r\n        for (const errorHandler of this.privErrorHandlers) {\r\n            this.executeErrorCallback(error, errorHandler);\r\n        }\r\n        this.detachHandlers();\r\n    }\r\n    on(successCallback, errorCallback) {\r\n        if (successCallback == null) {\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            successCallback = () => { };\r\n        }\r\n        if (this.privState === PromiseState.None) {\r\n            this.privSuccessHandlers.push(successCallback);\r\n            this.privErrorHandlers.push(errorCallback);\r\n        }\r\n        else {\r\n            if (this.privState === PromiseState.Resolved) {\r\n                this.executeSuccessCallback(this.privPromiseResult.result, successCallback, errorCallback);\r\n            }\r\n            else if (this.privState === PromiseState.Rejected) {\r\n                this.executeErrorCallback(this.privPromiseResult.error, errorCallback);\r\n            }\r\n            this.detachHandlers();\r\n        }\r\n    }\r\n    executeSuccessCallback(result, successCallback, errorCallback) {\r\n        try {\r\n            successCallback(result);\r\n        }\r\n        catch (e) {\r\n            this.executeErrorCallback(`'Unhandled callback error: ${e}'`, errorCallback);\r\n        }\r\n    }\r\n    executeErrorCallback(error, errorCallback) {\r\n        if (errorCallback) {\r\n            try {\r\n                errorCallback(error);\r\n            }\r\n            catch (e) {\r\n                throw new Error(`'Unhandled callback error: ${e}. InnerError: ${error}'`);\r\n            }\r\n        }\r\n        else {\r\n            throw new Error(`'Unhandled error: ${error}'`);\r\n        }\r\n    }\r\n    detachHandlers() {\r\n        this.privErrorHandlers = [];\r\n        this.privSuccessHandlers = [];\r\n    }\r\n}\r\n// eslint-disable-next-line prefer-arrow/prefer-arrow-functions\r\nexport function marshalPromiseToCallbacks(promise, cb, err) {\r\n    promise.then((val) => {\r\n        try {\r\n            if (!!cb) {\r\n                cb(val);\r\n            }\r\n        }\r\n        catch (error) {\r\n            if (!!err) {\r\n                try {\r\n                    if (error instanceof Error) {\r\n                        const typedError = error;\r\n                        err(typedError.name + \": \" + typedError.message);\r\n                    }\r\n                    else {\r\n                        err(error);\r\n                    }\r\n                    // eslint-disable-next-line no-empty\r\n                }\r\n                catch (error) { }\r\n            }\r\n        }\r\n    }, (error) => {\r\n        if (!!err) {\r\n            try {\r\n                if (error instanceof Error) {\r\n                    const typedError = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                }\r\n                else {\r\n                    err(error);\r\n                }\r\n                // eslint-disable-next-line no-empty\r\n            }\r\n            catch (error) { }\r\n        }\r\n    });\r\n}\r\n\r\n//# sourceMappingURL=Promise.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { InvalidOperationError, ObjectDisposedError } from \"./Error\";\r\nimport { List } from \"./List\";\r\nimport { Deferred, } from \"./Promise\";\r\nvar SubscriberType;\r\n(function (SubscriberType) {\r\n    SubscriberType[SubscriberType[\"Dequeue\"] = 0] = \"Dequeue\";\r\n    SubscriberType[SubscriberType[\"Peek\"] = 1] = \"Peek\";\r\n})(SubscriberType || (SubscriberType = {}));\r\nexport class Queue {\r\n    constructor(list) {\r\n        this.privPromiseStore = new List();\r\n        this.privIsDrainInProgress = false;\r\n        this.privIsDisposing = false;\r\n        this.privDisposeReason = null;\r\n        this.privList = list ? list : new List();\r\n        this.privDetachables = [];\r\n        this.privSubscribers = new List();\r\n        this.privDetachables.push(this.privList.onAdded(() => this.drain()));\r\n    }\r\n    enqueue(item) {\r\n        this.throwIfDispose();\r\n        this.enqueueFromPromise(new Promise((resolve) => resolve(item)));\r\n    }\r\n    enqueueFromPromise(promise) {\r\n        this.throwIfDispose();\r\n        promise.then((val) => {\r\n            this.privList.add(val);\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        }, () => { });\r\n    }\r\n    dequeue() {\r\n        this.throwIfDispose();\r\n        const deferredSubscriber = new Deferred();\r\n        if (this.privSubscribers) {\r\n            this.privSubscribers.add({ deferral: deferredSubscriber, type: SubscriberType.Dequeue });\r\n            this.drain();\r\n        }\r\n        return deferredSubscriber.promise;\r\n    }\r\n    peek() {\r\n        this.throwIfDispose();\r\n        const deferredSubscriber = new Deferred();\r\n        const subs = this.privSubscribers;\r\n        if (subs) {\r\n            this.privSubscribers.add({ deferral: deferredSubscriber, type: SubscriberType.Peek });\r\n            this.drain();\r\n        }\r\n        return deferredSubscriber.promise;\r\n    }\r\n    length() {\r\n        this.throwIfDispose();\r\n        return this.privList.length();\r\n    }\r\n    isDisposed() {\r\n        return this.privSubscribers == null;\r\n    }\r\n    drainAndDispose(pendingItemProcessor, reason) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!this.isDisposed() && !this.privIsDisposing) {\r\n                this.privDisposeReason = reason;\r\n                this.privIsDisposing = true;\r\n                const subs = this.privSubscribers;\r\n                if (subs) {\r\n                    while (subs.length() > 0) {\r\n                        const subscriber = subs.removeFirst();\r\n                        // TODO: this needs work (Resolve(null) instead?).\r\n                        subscriber.deferral.resolve(undefined);\r\n                        // subscriber.deferral.reject(\"Disposed\");\r\n                    }\r\n                    // note: this block assumes cooperative multitasking, i.e.,\r\n                    // between the if-statement and the assignment there are no\r\n                    // thread switches.\r\n                    // Reason is that between the initial const = this.; and this\r\n                    // point there is the derral.resolve() operation that might have\r\n                    // caused recursive calls to the Queue, especially, calling\r\n                    // Dispose() on the queue alredy (which would reset the var\r\n                    // here to null!).\r\n                    // That should generally hold true for javascript...\r\n                    if (this.privSubscribers === subs) {\r\n                        this.privSubscribers = subs;\r\n                    }\r\n                }\r\n                for (const detachable of this.privDetachables) {\r\n                    yield detachable.detach();\r\n                }\r\n                if (this.privPromiseStore.length() > 0 && pendingItemProcessor) {\r\n                    const promiseArray = [];\r\n                    this.privPromiseStore.toArray().forEach((wrapper) => {\r\n                        promiseArray.push(wrapper);\r\n                    });\r\n                    return Promise.all(promiseArray).finally(() => {\r\n                        this.privSubscribers = null;\r\n                        this.privList.forEach((item) => {\r\n                            pendingItemProcessor(item);\r\n                        });\r\n                        this.privList = null;\r\n                        return;\r\n                    }).then();\r\n                }\r\n                else {\r\n                    this.privSubscribers = null;\r\n                    this.privList = null;\r\n                }\r\n            }\r\n        });\r\n    }\r\n    dispose(reason) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            yield this.drainAndDispose(null, reason);\r\n        });\r\n    }\r\n    drain() {\r\n        if (!this.privIsDrainInProgress && !this.privIsDisposing) {\r\n            this.privIsDrainInProgress = true;\r\n            const subs = this.privSubscribers;\r\n            const lists = this.privList;\r\n            if (subs && lists) {\r\n                while (lists.length() > 0 && subs.length() > 0 && !this.privIsDisposing) {\r\n                    const subscriber = subs.removeFirst();\r\n                    if (subscriber.type === SubscriberType.Peek) {\r\n                        subscriber.deferral.resolve(lists.first());\r\n                    }\r\n                    else {\r\n                        const dequeuedItem = lists.removeFirst();\r\n                        subscriber.deferral.resolve(dequeuedItem);\r\n                    }\r\n                }\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.privSubscribers === subs) {\r\n                    this.privSubscribers = subs;\r\n                }\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.privList === lists) {\r\n                    this.privList = lists;\r\n                }\r\n            }\r\n            this.privIsDrainInProgress = false;\r\n        }\r\n    }\r\n    throwIfDispose() {\r\n        if (this.isDisposed()) {\r\n            if (this.privDisposeReason) {\r\n                throw new InvalidOperationError(this.privDisposeReason);\r\n            }\r\n            throw new ObjectDisposedError(\"Queue\");\r\n        }\r\n        else if (this.privIsDisposing) {\r\n            throw new InvalidOperationError(\"Queue disposing\");\r\n        }\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=Queue.js.map\r\n","/* eslint-disable @typescript-eslint/no-unsafe-assignment */\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { MessageType } from \"./ConnectionMessage\";\r\nimport { ArgumentNullError, InvalidOperationError } from \"./Error\";\r\nimport { createNoDashGuid } from \"./Guid\";\r\nexport class RawWebsocketMessage {\r\n    constructor(messageType, payload, id) {\r\n        this.privPayload = null;\r\n        if (!payload) {\r\n            throw new ArgumentNullError(\"payload\");\r\n        }\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n        if (messageType === MessageType.Binary && payload.__proto__.constructor.name !== \"ArrayBuffer\") {\r\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\r\n        }\r\n        if (messageType === MessageType.Text && !(typeof (payload) === \"string\")) {\r\n            throw new InvalidOperationError(\"Payload must be a string\");\r\n        }\r\n        this.privMessageType = messageType;\r\n        this.privPayload = payload;\r\n        this.privId = id ? id : createNoDashGuid();\r\n    }\r\n    get messageType() {\r\n        return this.privMessageType;\r\n    }\r\n    get payload() {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n        return this.privPayload;\r\n    }\r\n    get textContent() {\r\n        if (this.privMessageType === MessageType.Binary) {\r\n            throw new InvalidOperationError(\"Not supported for binary message\");\r\n        }\r\n        return this.privPayload;\r\n    }\r\n    get binaryContent() {\r\n        if (this.privMessageType === MessageType.Text) {\r\n            throw new InvalidOperationError(\"Not supported for text message\");\r\n        }\r\n        return this.privPayload;\r\n    }\r\n    get id() {\r\n        return this.privId;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=RawWebsocketMessage.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nexport class RiffPcmEncoder {\r\n    constructor(actualSampleRate, desiredSampleRate) {\r\n        this.privActualSampleRate = actualSampleRate;\r\n        this.privDesiredSampleRate = desiredSampleRate;\r\n    }\r\n    encode(actualAudioFrame) {\r\n        const audioFrame = this.downSampleAudioFrame(actualAudioFrame, this.privActualSampleRate, this.privDesiredSampleRate);\r\n        if (!audioFrame) {\r\n            return null;\r\n        }\r\n        const audioLength = audioFrame.length * 2;\r\n        const buffer = new ArrayBuffer(audioLength);\r\n        const view = new DataView(buffer);\r\n        this.floatTo16BitPCM(view, 0, audioFrame);\r\n        return buffer;\r\n    }\r\n    setString(view, offset, str) {\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(offset + i, str.charCodeAt(i));\r\n        }\r\n    }\r\n    floatTo16BitPCM(view, offset, input) {\r\n        for (let i = 0; i < input.length; i++, offset += 2) {\r\n            const s = Math.max(-1, Math.min(1, input[i]));\r\n            view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\r\n        }\r\n    }\r\n    downSampleAudioFrame(srcFrame, srcRate, dstRate) {\r\n        if (!srcFrame) {\r\n            return null;\r\n        }\r\n        if (dstRate === srcRate || dstRate > srcRate) {\r\n            return srcFrame;\r\n        }\r\n        const ratio = srcRate / dstRate;\r\n        const dstLength = Math.round(srcFrame.length / ratio);\r\n        const dstFrame = new Float32Array(dstLength);\r\n        let srcOffset = 0;\r\n        let dstOffset = 0;\r\n        while (dstOffset < dstLength) {\r\n            const nextSrcOffset = Math.round((dstOffset + 1) * ratio);\r\n            let accum = 0;\r\n            let count = 0;\r\n            while (srcOffset < nextSrcOffset && srcOffset < srcFrame.length) {\r\n                accum += srcFrame[srcOffset++];\r\n                count++;\r\n            }\r\n            dstFrame[dstOffset++] = accum / count;\r\n        }\r\n        return dstFrame;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=RiffPcmEncoder.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { InvalidOperationError } from \"./Error\";\r\nimport { createNoDashGuid } from \"./Guid\";\r\nimport { Queue } from \"./Queue\";\r\nexport class Stream {\r\n    constructor(streamId) {\r\n        this.privIsWriteEnded = false;\r\n        this.privIsReadEnded = false;\r\n        this.privId = streamId ? streamId : createNoDashGuid();\r\n        this.privReaderQueue = new Queue();\r\n    }\r\n    get isClosed() {\r\n        return this.privIsWriteEnded;\r\n    }\r\n    get isReadEnded() {\r\n        return this.privIsReadEnded;\r\n    }\r\n    get id() {\r\n        return this.privId;\r\n    }\r\n    close() {\r\n        if (!this.privIsWriteEnded) {\r\n            this.writeStreamChunk({\r\n                buffer: null,\r\n                isEnd: true,\r\n                timeReceived: Date.now(),\r\n            });\r\n            this.privIsWriteEnded = true;\r\n        }\r\n    }\r\n    writeStreamChunk(streamChunk) {\r\n        this.throwIfClosed();\r\n        if (!this.privReaderQueue.isDisposed()) {\r\n            try {\r\n                this.privReaderQueue.enqueue(streamChunk);\r\n            }\r\n            catch (e) {\r\n                // Do nothing\r\n            }\r\n        }\r\n    }\r\n    read() {\r\n        if (this.privIsReadEnded) {\r\n            throw new InvalidOperationError(\"Stream read has already finished\");\r\n        }\r\n        return this.privReaderQueue\r\n            .dequeue()\r\n            .then((streamChunk) => __awaiter(this, void 0, void 0, function* () {\r\n            if (streamChunk === undefined || streamChunk.isEnd) {\r\n                yield this.privReaderQueue.dispose(\"End of stream reached\");\r\n            }\r\n            return streamChunk;\r\n        }));\r\n    }\r\n    readEnded() {\r\n        if (!this.privIsReadEnded) {\r\n            this.privIsReadEnded = true;\r\n            this.privReaderQueue = new Queue();\r\n        }\r\n    }\r\n    throwIfClosed() {\r\n        if (this.privIsWriteEnded) {\r\n            throw new InvalidOperationError(\"Stream closed\");\r\n        }\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=Stream.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { Stream } from \"./Exports\";\r\nexport class ChunkedArrayBufferStream extends Stream {\r\n    constructor(targetChunkSize, streamId) {\r\n        super(streamId);\r\n        this.privTargetChunkSize = targetChunkSize;\r\n        this.privNextBufferReadyBytes = 0;\r\n    }\r\n    writeStreamChunk(chunk) {\r\n        // No pending write, and the buffer is the right size so write it.\r\n        if (chunk.isEnd ||\r\n            (0 === this.privNextBufferReadyBytes && chunk.buffer.byteLength === this.privTargetChunkSize)) {\r\n            super.writeStreamChunk(chunk);\r\n            return;\r\n        }\r\n        let bytesCopiedFromBuffer = 0;\r\n        while (bytesCopiedFromBuffer < chunk.buffer.byteLength) {\r\n            // Fill the next buffer.\r\n            if (undefined === this.privNextBufferToWrite) {\r\n                this.privNextBufferToWrite = new ArrayBuffer(this.privTargetChunkSize);\r\n                this.privNextBufferStartTime = chunk.timeReceived;\r\n            }\r\n            // Find out how many bytes we can copy into the read buffer.\r\n            const bytesToCopy = Math.min(chunk.buffer.byteLength - bytesCopiedFromBuffer, this.privTargetChunkSize - this.privNextBufferReadyBytes);\r\n            const targetView = new Uint8Array(this.privNextBufferToWrite);\r\n            const sourceView = new Uint8Array(chunk.buffer.slice(bytesCopiedFromBuffer, bytesToCopy + bytesCopiedFromBuffer));\r\n            targetView.set(sourceView, this.privNextBufferReadyBytes);\r\n            this.privNextBufferReadyBytes += bytesToCopy;\r\n            bytesCopiedFromBuffer += bytesToCopy;\r\n            // Are we ready to write?\r\n            if (this.privNextBufferReadyBytes === this.privTargetChunkSize) {\r\n                super.writeStreamChunk({\r\n                    buffer: this.privNextBufferToWrite,\r\n                    isEnd: false,\r\n                    timeReceived: this.privNextBufferStartTime,\r\n                });\r\n                this.privNextBufferReadyBytes = 0;\r\n                this.privNextBufferToWrite = undefined;\r\n            }\r\n        }\r\n    }\r\n    close() {\r\n        // Send whatever is pending, then close the base class.\r\n        if (0 !== this.privNextBufferReadyBytes && !this.isClosed) {\r\n            super.writeStreamChunk({\r\n                buffer: this.privNextBufferToWrite.slice(0, this.privNextBufferReadyBytes),\r\n                isEnd: false,\r\n                timeReceived: this.privNextBufferStartTime,\r\n            });\r\n        }\r\n        super.close();\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=ChunkedArrayBufferStream.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nexport class Timeout {\r\n    static load() {\r\n        // Prefilling the Maps with a function indexed by zero is necessary to be compliant with the specification.\r\n        const scheduledTimeoutFunctions = new Map([[0, () => { }]]); // eslint-disable-line @typescript-eslint/no-empty-function\r\n        const unhandledRequests = new Map();\r\n        // eslint-disable-next-line\r\n        const workerScript = `!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"\",n(n.s=14)}([function(e,t,n){\"use strict\";n.d(t,\"a\",(function(){return i})),n.d(t,\"b\",(function(){return u})),n.d(t,\"c\",(function(){return a})),n.d(t,\"d\",(function(){return d}));const r=new Map,o=new Map,i=e=>{const t=r.get(e);if(void 0===t)throw new Error('There is no interval scheduled with the given id \"'.concat(e,'\".'));clearTimeout(t),r.delete(e)},u=e=>{const t=o.get(e);if(void 0===t)throw new Error('There is no timeout scheduled with the given id \"'.concat(e,'\".'));clearTimeout(t),o.delete(e)},f=(e,t)=>{let n,r;if(\"performance\"in self){const o=performance.now();n=o,r=e-Math.max(0,o-t)}else n=Date.now(),r=e;return{expected:n+r,remainingDelay:r}},c=(e,t,n,r)=>{const o=\"performance\"in self?performance.now():Date.now();o>n?postMessage({id:null,method:\"call\",params:{timerId:t}}):e.set(t,setTimeout(c,n-o,e,t,n))},a=(e,t,n)=>{const{expected:o,remainingDelay:i}=f(e,n);r.set(t,setTimeout(c,i,r,t,o))},d=(e,t,n)=>{const{expected:r,remainingDelay:i}=f(e,n);o.set(t,setTimeout(c,i,o,t,r))}},function(e,t,n){\"use strict\";n.r(t);var r=n(2);for(var o in r)\"default\"!==o&&function(e){n.d(t,e,(function(){return r[e]}))}(o);var i=n(3);for(var o in i)\"default\"!==o&&function(e){n.d(t,e,(function(){return i[e]}))}(o);var u=n(4);for(var o in u)\"default\"!==o&&function(e){n.d(t,e,(function(){return u[e]}))}(o);var f=n(5);for(var o in f)\"default\"!==o&&function(e){n.d(t,e,(function(){return f[e]}))}(o);var c=n(6);for(var o in c)\"default\"!==o&&function(e){n.d(t,e,(function(){return c[e]}))}(o);var a=n(7);for(var o in a)\"default\"!==o&&function(e){n.d(t,e,(function(){return a[e]}))}(o);var d=n(8);for(var o in d)\"default\"!==o&&function(e){n.d(t,e,(function(){return d[e]}))}(o);var s=n(9);for(var o in s)\"default\"!==o&&function(e){n.d(t,e,(function(){return s[e]}))}(o)},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t,n){\"use strict\";n.r(t);var r=n(11);for(var o in r)\"default\"!==o&&function(e){n.d(t,e,(function(){return r[e]}))}(o);var i=n(12);for(var o in i)\"default\"!==o&&function(e){n.d(t,e,(function(){return i[e]}))}(o);var u=n(13);for(var o in u)\"default\"!==o&&function(e){n.d(t,e,(function(){return u[e]}))}(o)},function(e,t){},function(e,t){},function(e,t){},function(e,t,n){\"use strict\";n.r(t);var r=n(0),o=n(1);for(var i in o)\"default\"!==i&&function(e){n.d(t,e,(function(){return o[e]}))}(i);var u=n(10);for(var i in u)\"default\"!==i&&function(e){n.d(t,e,(function(){return u[e]}))}(i);addEventListener(\"message\",({data:e})=>{try{if(\"clear\"===e.method){const{id:t,params:{timerId:n}}=e;Object(r.b)(n),postMessage({error:null,id:t})}else{if(\"set\"!==e.method)throw new Error('The given method \"'.concat(e.method,'\" is not supported'));{const{params:{delay:t,now:n,timerId:o}}=e;Object(r.d)(t,o,n)}}}catch(t){postMessage({error:{message:t.message},id:e.id,result:null})}})}]);`;\r\n        const workerUrl = \"data:text/javascript;base64,\" + btoa(workerScript);\r\n        const worker = new Worker(workerUrl);\r\n        worker.addEventListener(\"message\", ({ data }) => {\r\n            if (Timeout.isCallNotification(data)) {\r\n                const { params: { timerId } } = data;\r\n                const idOrFunc = scheduledTimeoutFunctions.get(timerId);\r\n                if (typeof idOrFunc === \"number\") {\r\n                    const unhandledTimerId = unhandledRequests.get(idOrFunc);\r\n                    if (unhandledTimerId === undefined ||\r\n                        unhandledTimerId !== timerId) {\r\n                        throw new Error(\"The timer is in an undefined state.\");\r\n                    }\r\n                }\r\n                else if (typeof idOrFunc !== \"undefined\") {\r\n                    idOrFunc();\r\n                    // A timeout can be safely deleted because it is only called once.\r\n                    scheduledTimeoutFunctions.delete(timerId);\r\n                }\r\n                else {\r\n                    throw new Error(\"The timer is in an undefined state.\");\r\n                }\r\n            }\r\n            else if (Timeout.isClearResponse(data)) {\r\n                const { id } = data;\r\n                const unhandledTimerId = unhandledRequests.get(id);\r\n                if (unhandledTimerId === undefined) {\r\n                    throw new Error(\"The timer is in an undefined state.\");\r\n                }\r\n                unhandledRequests.delete(id);\r\n                scheduledTimeoutFunctions.delete(unhandledTimerId);\r\n            }\r\n            else {\r\n                const { error: { message } } = data;\r\n                throw new Error(message);\r\n            }\r\n        });\r\n        const clearTimeout = (timerId) => {\r\n            const id = Math.random();\r\n            unhandledRequests.set(id, timerId);\r\n            scheduledTimeoutFunctions.set(timerId, id);\r\n            worker.postMessage({\r\n                id,\r\n                method: \"clear\",\r\n                params: { timerId }\r\n            });\r\n        };\r\n        const setTimeout = (func, delay) => {\r\n            const timerId = Math.random();\r\n            scheduledTimeoutFunctions.set(timerId, func);\r\n            worker.postMessage({\r\n                id: null,\r\n                method: \"set\",\r\n                params: {\r\n                    delay,\r\n                    now: performance.now(),\r\n                    timerId\r\n                }\r\n            });\r\n            return timerId;\r\n        };\r\n        return {\r\n            clearTimeout,\r\n            setTimeout\r\n        };\r\n    }\r\n    static loadWorkerTimers() {\r\n        return () => {\r\n            if (Timeout.workerTimers !== null) {\r\n                return Timeout.workerTimers;\r\n            }\r\n            Timeout.workerTimers = Timeout.load();\r\n            return Timeout.workerTimers;\r\n        };\r\n    }\r\n    static isCallNotification(message) {\r\n        return message.method !== undefined && message.method === \"call\";\r\n    }\r\n    static isClearResponse(message) {\r\n        return message.error === null && typeof message.id === \"number\";\r\n    }\r\n}\r\nTimeout.workerTimers = null;\r\nTimeout.clearTimeout = (timerId) => Timeout.timers().clearTimeout(timerId);\r\nTimeout.setTimeout = (func, delay) => Timeout.timers().setTimeout(func, delay);\r\nTimeout.timers = Timeout.loadWorkerTimers();\r\n\r\n//# sourceMappingURL=Timeout.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/* eslint-disable max-classes-per-file */\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent\";\r\nexport class OCSPEvent extends PlatformEvent {\r\n    constructor(eventName, eventType, signature) {\r\n        super(eventName, eventType);\r\n        this.privSignature = signature;\r\n    }\r\n}\r\nexport class OCSPMemoryCacheHitEvent extends OCSPEvent {\r\n    constructor(signature) {\r\n        super(\"OCSPMemoryCacheHitEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\nexport class OCSPCacheMissEvent extends OCSPEvent {\r\n    constructor(signature) {\r\n        super(\"OCSPCacheMissEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\nexport class OCSPDiskCacheHitEvent extends OCSPEvent {\r\n    constructor(signature) {\r\n        super(\"OCSPDiskCacheHitEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\nexport class OCSPCacheUpdateNeededEvent extends OCSPEvent {\r\n    constructor(signature) {\r\n        super(\"OCSPCacheUpdateNeededEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\nexport class OCSPMemoryCacheStoreEvent extends OCSPEvent {\r\n    constructor(signature) {\r\n        super(\"OCSPMemoryCacheStoreEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\nexport class OCSPDiskCacheStoreEvent extends OCSPEvent {\r\n    constructor(signature) {\r\n        super(\"OCSPDiskCacheStoreEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\nexport class OCSPCacheUpdateCompleteEvent extends OCSPEvent {\r\n    constructor(signature) {\r\n        super(\"OCSPCacheUpdateCompleteEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\nexport class OCSPStapleReceivedEvent extends OCSPEvent {\r\n    constructor() {\r\n        super(\"OCSPStapleReceivedEvent\", EventType.Debug, \"\");\r\n    }\r\n}\r\nexport class OCSPWSUpgradeStartedEvent extends OCSPEvent {\r\n    constructor(serialNumber) {\r\n        super(\"OCSPWSUpgradeStartedEvent\", EventType.Debug, serialNumber);\r\n    }\r\n}\r\nexport class OCSPCacheEntryExpiredEvent extends OCSPEvent {\r\n    constructor(serialNumber, expireTime) {\r\n        super(\"OCSPCacheEntryExpiredEvent\", EventType.Debug, serialNumber);\r\n        this.privExpireTime = expireTime;\r\n    }\r\n}\r\nexport class OCSPCacheEntryNeedsRefreshEvent extends OCSPEvent {\r\n    constructor(serialNumber, startTime, expireTime) {\r\n        super(\"OCSPCacheEntryNeedsRefreshEvent\", EventType.Debug, serialNumber);\r\n        this.privExpireTime = expireTime;\r\n        this.privStartTime = startTime;\r\n    }\r\n}\r\nexport class OCSPCacheHitEvent extends OCSPEvent {\r\n    constructor(serialNumber, startTime, expireTime) {\r\n        super(\"OCSPCacheHitEvent\", EventType.Debug, serialNumber);\r\n        this.privExpireTime = expireTime;\r\n        this.privExpireTimeString = new Date(expireTime).toLocaleDateString();\r\n        this.privStartTime = startTime;\r\n        this.privStartTimeString = new Date(startTime).toLocaleTimeString();\r\n    }\r\n}\r\nexport class OCSPVerificationFailedEvent extends OCSPEvent {\r\n    constructor(serialNumber, error) {\r\n        super(\"OCSPVerificationFailedEvent\", EventType.Debug, serialNumber);\r\n        this.privError = error;\r\n    }\r\n}\r\nexport class OCSPCacheFetchErrorEvent extends OCSPEvent {\r\n    constructor(serialNumber, error) {\r\n        super(\"OCSPCacheFetchErrorEvent\", EventType.Debug, serialNumber);\r\n        this.privError = error;\r\n    }\r\n}\r\nexport class OCSPResponseRetrievedEvent extends OCSPEvent {\r\n    constructor(serialNumber) {\r\n        super(\"OCSPResponseRetrievedEvent\", EventType.Debug, serialNumber);\r\n    }\r\n}\r\nexport class OCSPCacheUpdateErrorEvent extends OCSPEvent {\r\n    constructor(serialNumber, error) {\r\n        super(\"OCSPCacheUpdateErrorEvent\", EventType.Debug, serialNumber);\r\n        this.privError = error;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=OCSPEvents.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { EventType, PlatformEvent } from \"./Exports\";\r\nexport class BackgroundEvent extends PlatformEvent {\r\n    constructor(error) {\r\n        super(\"BackgroundEvent\", EventType.Error);\r\n        this.privError = error;\r\n    }\r\n    get error() {\r\n        return this.privError;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=BackgroundError.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/**\r\n * @class Contracts\r\n * @private\r\n */\r\nexport class Contracts {\r\n    static throwIfNullOrUndefined(param, name) {\r\n        if (param === undefined || param === null) {\r\n            throw new Error(\"throwIfNullOrUndefined:\" + name);\r\n        }\r\n    }\r\n    static throwIfNull(param, name) {\r\n        if (param === null) {\r\n            throw new Error(\"throwIfNull:\" + name);\r\n        }\r\n    }\r\n    static throwIfNullOrWhitespace(param, name) {\r\n        Contracts.throwIfNullOrUndefined(param, name);\r\n        if ((\"\" + param).trim().length < 1) {\r\n            throw new Error(\"throwIfNullOrWhitespace:\" + name);\r\n        }\r\n    }\r\n    static throwIfNullOrTooLong(param, name, maxLength) {\r\n        Contracts.throwIfNullOrUndefined(param, name);\r\n        if ((\"\" + param).length > maxLength) {\r\n            throw new Error(\"throwIfNullOrTooLong:\" + name + \" (more than \" + maxLength.toString() + \" characters)\");\r\n        }\r\n    }\r\n    static throwIfNullOrTooShort(param, name, minLength) {\r\n        Contracts.throwIfNullOrUndefined(param, name);\r\n        if ((\"\" + param).length < minLength) {\r\n            throw new Error(\"throwIfNullOrTooShort:\" + name + \" (less than \" + minLength.toString() + \" characters)\");\r\n        }\r\n    }\r\n    static throwIfDisposed(isDisposed) {\r\n        if (isDisposed) {\r\n            throw new Error(\"the object is already disposed\");\r\n        }\r\n    }\r\n    static throwIfArrayEmptyOrWhitespace(array, name) {\r\n        Contracts.throwIfNullOrUndefined(array, name);\r\n        if (array.length === 0) {\r\n            throw new Error(\"throwIfArrayEmptyOrWhitespace:\" + name);\r\n        }\r\n        for (const item of array) {\r\n            Contracts.throwIfNullOrWhitespace(item, name);\r\n        }\r\n    }\r\n    static throwIfFileDoesNotExist(param, name) {\r\n        Contracts.throwIfNullOrWhitespace(param, name);\r\n        // TODO check for file existence.\r\n    }\r\n    static throwIfNotUndefined(param, name) {\r\n        if (param !== undefined) {\r\n            throw new Error(\"throwIfNotUndefined:\" + name);\r\n        }\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=Contracts.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nexport class HeaderNames {\r\n}\r\nHeaderNames.AuthKey = \"Ocp-Apim-Subscription-Key\";\r\nHeaderNames.Authorization = \"Authorization\";\r\nHeaderNames.ConnectionId = \"X-ConnectionId\";\r\nHeaderNames.ContentType = \"Content-Type\";\r\nHeaderNames.CustomCommandsAppId = \"X-CommandsAppId\";\r\nHeaderNames.Path = \"Path\";\r\nHeaderNames.RequestId = \"X-RequestId\";\r\nHeaderNames.RequestStreamId = \"X-StreamId\";\r\nHeaderNames.RequestTimestamp = \"X-Timestamp\";\r\n\r\n//# sourceMappingURL=HeaderNames.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nexport class AuthInfo {\r\n    constructor(headerName, token) {\r\n        this.privHeaderName = headerName;\r\n        this.privToken = token;\r\n    }\r\n    get headerName() {\r\n        return this.privHeaderName;\r\n    }\r\n    get token() {\r\n        return this.privToken;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=IAuthentication.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { ArgumentNullError, } from \"../common/Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { AuthInfo } from \"./IAuthentication\";\r\n/**\r\n * @class\r\n */\r\nexport class CognitiveSubscriptionKeyAuthentication {\r\n    /**\r\n     * Creates and initializes an instance of the CognitiveSubscriptionKeyAuthentication class.\r\n     * @constructor\r\n     * @param {string} subscriptionKey - The subscription key\r\n     */\r\n    constructor(subscriptionKey) {\r\n        if (!subscriptionKey) {\r\n            throw new ArgumentNullError(\"subscriptionKey\");\r\n        }\r\n        this.privAuthInfo = new AuthInfo(HeaderNames.AuthKey, subscriptionKey);\r\n    }\r\n    /**\r\n     * Fetches the subscription key.\r\n     * @member\r\n     * @function\r\n     * @public\r\n     * @param {string} authFetchEventId - The id to fetch.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    fetch(authFetchEventId) {\r\n        return Promise.resolve(this.privAuthInfo);\r\n    }\r\n    /**\r\n     * Fetches the subscription key.\r\n     * @member\r\n     * @function\r\n     * @public\r\n     * @param {string} authFetchEventId - The id to fetch.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    fetchOnExpiry(authFetchEventId) {\r\n        return Promise.resolve(this.privAuthInfo);\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=CognitiveSubscriptionKeyAuthentication.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { ArgumentNullError } from \"../common/Exports\";\r\nimport { AuthInfo } from \"./IAuthentication\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nexport class CognitiveTokenAuthentication {\r\n    constructor(fetchCallback, fetchOnExpiryCallback) {\r\n        if (!fetchCallback) {\r\n            throw new ArgumentNullError(\"fetchCallback\");\r\n        }\r\n        if (!fetchOnExpiryCallback) {\r\n            throw new ArgumentNullError(\"fetchOnExpiryCallback\");\r\n        }\r\n        this.privFetchCallback = fetchCallback;\r\n        this.privFetchOnExpiryCallback = fetchOnExpiryCallback;\r\n    }\r\n    fetch(authFetchEventId) {\r\n        return this.privFetchCallback(authFetchEventId).then((token) => new AuthInfo(HeaderNames.Authorization, token === undefined ? undefined : CognitiveTokenAuthentication.privTokenPrefix + token));\r\n    }\r\n    fetchOnExpiry(authFetchEventId) {\r\n        return this.privFetchOnExpiryCallback(authFetchEventId).then((token) => new AuthInfo(HeaderNames.Authorization, token === undefined ? undefined : CognitiveTokenAuthentication.privTokenPrefix + token));\r\n    }\r\n}\r\nCognitiveTokenAuthentication.privTokenPrefix = \"bearer \";\r\n\r\n//# sourceMappingURL=CognitiveTokenAuthentication.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport * as fs from \"fs\";\r\nimport { Contracts } from \"../Contracts\";\r\nexport class AudioFileWriter {\r\n    constructor(filename) {\r\n        Contracts.throwIfNullOrUndefined(fs.openSync, \"\\nFile System access not available, please use Push or PullAudioOutputStream\");\r\n        this.privFd = fs.openSync(filename, \"w\");\r\n    }\r\n    set format(format) {\r\n        Contracts.throwIfNotUndefined(this.privAudioFormat, \"format is already set\");\r\n        this.privAudioFormat = format;\r\n        let headerOffset = 0;\r\n        if (this.privAudioFormat.hasHeader) {\r\n            headerOffset = this.privAudioFormat.header.byteLength;\r\n        }\r\n        if (this.privFd !== undefined) {\r\n            this.privWriteStream = fs.createWriteStream(\"\", { fd: this.privFd, start: headerOffset, autoClose: false });\r\n        }\r\n    }\r\n    write(buffer) {\r\n        Contracts.throwIfNullOrUndefined(this.privAudioFormat, \"must set format before writing.\");\r\n        if (this.privWriteStream !== undefined) {\r\n            this.privWriteStream.write(new Uint8Array(buffer.slice(0)));\r\n        }\r\n    }\r\n    close() {\r\n        if (this.privFd !== undefined) {\r\n            this.privWriteStream.on(\"finish\", () => {\r\n                if (this.privAudioFormat.hasHeader) {\r\n                    this.privAudioFormat.updateHeader(this.privWriteStream.bytesWritten);\r\n                    fs.writeSync(this.privFd, new Int8Array(this.privAudioFormat.header), 0, this.privAudioFormat.header.byteLength, 0);\r\n                }\r\n                fs.closeSync(this.privFd);\r\n                this.privFd = undefined;\r\n            });\r\n            this.privWriteStream.end();\r\n        }\r\n    }\r\n    id() {\r\n        return this.privId;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=AudioFileWriter.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// eslint-disable-next-line max-classes-per-file\r\nexport var AudioFormatTag;\r\n(function (AudioFormatTag) {\r\n    AudioFormatTag[AudioFormatTag[\"PCM\"] = 1] = \"PCM\";\r\n    AudioFormatTag[AudioFormatTag[\"MuLaw\"] = 2] = \"MuLaw\";\r\n    AudioFormatTag[AudioFormatTag[\"Siren\"] = 3] = \"Siren\";\r\n    AudioFormatTag[AudioFormatTag[\"MP3\"] = 4] = \"MP3\";\r\n    AudioFormatTag[AudioFormatTag[\"SILKSkype\"] = 5] = \"SILKSkype\";\r\n    AudioFormatTag[AudioFormatTag[\"OGG_OPUS\"] = 6] = \"OGG_OPUS\";\r\n    AudioFormatTag[AudioFormatTag[\"WEBM_OPUS\"] = 7] = \"WEBM_OPUS\";\r\n    AudioFormatTag[AudioFormatTag[\"ALaw\"] = 8] = \"ALaw\";\r\n    AudioFormatTag[AudioFormatTag[\"FLAC\"] = 9] = \"FLAC\";\r\n    AudioFormatTag[AudioFormatTag[\"OPUS\"] = 10] = \"OPUS\";\r\n})(AudioFormatTag || (AudioFormatTag = {}));\r\n/**\r\n * Represents audio stream format used for custom audio input configurations.\r\n * @class AudioStreamFormat\r\n */\r\nexport class AudioStreamFormat {\r\n    /**\r\n     * Creates an audio stream format object representing the default audio stream\r\n     * format (16KHz 16bit mono PCM).\r\n     * @member AudioStreamFormat.getDefaultInputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    static getDefaultInputFormat() {\r\n        return AudioStreamFormatImpl.getDefaultInputFormat();\r\n    }\r\n    /**\r\n     * Creates an audio stream format object with the specified format characteristics.\r\n     * @member AudioStreamFormat.getWaveFormat\r\n     * @function\r\n     * @public\r\n     * @param {number} samplesPerSecond - Sample rate, in samples per second (Hertz).\r\n     * @param {number} bitsPerSample - Bits per sample, typically 16.\r\n     * @param {number} channels - Number of channels in the waveform-audio data. Monaural data\r\n     * uses one channel and stereo data uses two channels.\r\n     * @param {AudioFormatTag} format - Audio format (PCM, alaw or mulaw).\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    static getWaveFormat(samplesPerSecond, bitsPerSample, channels, format) {\r\n        return new AudioStreamFormatImpl(samplesPerSecond, bitsPerSample, channels, format);\r\n    }\r\n    /**\r\n     * Creates an audio stream format object with the specified pcm waveformat characteristics.\r\n     * @member AudioStreamFormat.getWaveFormatPCM\r\n     * @function\r\n     * @public\r\n     * @param {number} samplesPerSecond - Sample rate, in samples per second (Hertz).\r\n     * @param {number} bitsPerSample - Bits per sample, typically 16.\r\n     * @param {number} channels - Number of channels in the waveform-audio data. Monaural data\r\n     * uses one channel and stereo data uses two channels.\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    static getWaveFormatPCM(samplesPerSecond, bitsPerSample, channels) {\r\n        return new AudioStreamFormatImpl(samplesPerSecond, bitsPerSample, channels);\r\n    }\r\n}\r\n/**\r\n * @private\r\n * @class AudioStreamFormatImpl\r\n */\r\nexport class AudioStreamFormatImpl extends AudioStreamFormat {\r\n    /**\r\n     * Creates an instance with the given values.\r\n     * @constructor\r\n     * @param {number} samplesPerSec - Samples per second.\r\n     * @param {number} bitsPerSample - Bits per sample.\r\n     * @param {number} channels - Number of channels.\r\n     * @param {AudioFormatTag} format - Audio format (PCM, alaw or mulaw).\r\n     */\r\n    constructor(samplesPerSec = 16000, bitsPerSample = 16, channels = 1, format = AudioFormatTag.PCM) {\r\n        super();\r\n        let isWavFormat = true;\r\n        /* 1 for PCM; 6 for alaw; 7 for mulaw */\r\n        switch (format) {\r\n            case AudioFormatTag.PCM:\r\n                this.formatTag = 1;\r\n                break;\r\n            case AudioFormatTag.ALaw:\r\n                this.formatTag = 6;\r\n                break;\r\n            case AudioFormatTag.MuLaw:\r\n                this.formatTag = 7;\r\n                break;\r\n            default:\r\n                isWavFormat = false;\r\n        }\r\n        this.bitsPerSample = bitsPerSample;\r\n        this.samplesPerSec = samplesPerSec;\r\n        this.channels = channels;\r\n        this.avgBytesPerSec = this.samplesPerSec * this.channels * (this.bitsPerSample / 8);\r\n        this.blockAlign = this.channels * Math.max(this.bitsPerSample, 8);\r\n        if (isWavFormat) {\r\n            this.privHeader = new ArrayBuffer(44);\r\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\r\n            const view = new DataView(this.privHeader);\r\n            /* RIFF identifier */\r\n            this.setString(view, 0, \"RIFF\");\r\n            /* file length */\r\n            view.setUint32(4, 0, true);\r\n            /* RIFF type & Format */\r\n            this.setString(view, 8, \"WAVEfmt \");\r\n            /* format chunk length */\r\n            view.setUint32(16, 16, true);\r\n            /* audio format */\r\n            view.setUint16(20, this.formatTag, true);\r\n            /* channel count */\r\n            view.setUint16(22, this.channels, true);\r\n            /* sample rate */\r\n            view.setUint32(24, this.samplesPerSec, true);\r\n            /* byte rate (sample rate * block align) */\r\n            view.setUint32(28, this.avgBytesPerSec, true);\r\n            /* block align (channel count * bytes per sample) */\r\n            view.setUint16(32, this.channels * (this.bitsPerSample / 8), true);\r\n            /* bits per sample */\r\n            view.setUint16(34, this.bitsPerSample, true);\r\n            /* data chunk identifier */\r\n            this.setString(view, 36, \"data\");\r\n            /* data chunk length */\r\n            view.setUint32(40, 0, true);\r\n        }\r\n    }\r\n    /**\r\n     * Retrieves the default input format.\r\n     * @member AudioStreamFormatImpl.getDefaultInputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {AudioStreamFormatImpl} The default input format.\r\n     */\r\n    static getDefaultInputFormat() {\r\n        return new AudioStreamFormatImpl();\r\n    }\r\n    /**\r\n     * Creates an audio context appropriate to current browser\r\n     * @member AudioStreamFormatImpl.getAudioContext\r\n     * @function\r\n     * @public\r\n     * @returns {AudioContext} An audio context instance\r\n     */\r\n    /* eslint-disable */\r\n    static getAudioContext(sampleRate) {\r\n        // Workaround for Speech SDK bug in Safari.\r\n        const AudioContext = window.AudioContext // our preferred impl\r\n            || window.webkitAudioContext // fallback, mostly when on Safari\r\n            || false; // could not find.\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext\r\n        if (!!AudioContext) {\r\n            if (sampleRate !== undefined && navigator.mediaDevices.getSupportedConstraints().sampleRate) {\r\n                return new AudioContext({ sampleRate });\r\n            }\r\n            else {\r\n                return new AudioContext();\r\n            }\r\n        }\r\n        else {\r\n            throw new Error(\"Browser does not support Web Audio API (AudioContext is not available).\");\r\n        }\r\n    }\r\n    /* eslint-enable */\r\n    /**\r\n     * Closes the configuration object.\r\n     * @member AudioStreamFormatImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    close() {\r\n        return;\r\n    }\r\n    get header() {\r\n        return this.privHeader;\r\n    }\r\n    setString(view, offset, str) {\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(offset + i, str.charCodeAt(i));\r\n        }\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=AudioStreamFormat.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n/* eslint-disable max-classes-per-file */\r\nimport { connectivity, type, } from \"../../common.speech/Exports\";\r\nimport { AudioSourceInitializingEvent, AudioSourceReadyEvent, AudioStreamNodeAttachedEvent, AudioStreamNodeAttachingEvent, AudioStreamNodeDetachedEvent, ChunkedArrayBufferStream, Events, EventSource, } from \"../../common/Exports\";\r\nimport { createNoDashGuid } from \"../../common/Guid\";\r\nimport { AudioStreamFormat } from \"../Exports\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @class AudioInputStream\r\n */\r\nexport class AudioInputStream {\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        return;\r\n    }\r\n    /**\r\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\r\n     * @member AudioInputStream.createPushStream\r\n     * @function\r\n     * @public\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     * written to the push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PushAudioInputStream} The audio input stream being created.\r\n     */\r\n    static createPushStream(format) {\r\n        return PushAudioInputStream.create(format);\r\n    }\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for read()\r\n     * and close() methods.\r\n     * @member AudioInputStream.createPullStream\r\n     * @function\r\n     * @public\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object, derived from\r\n     * PullAudioInputStreamCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be returned from\r\n     * the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PullAudioInputStream} The audio input stream being created.\r\n     */\r\n    static createPullStream(callback, format) {\r\n        return PullAudioInputStream.create(callback, format);\r\n        // throw new Error(\"Oops\");\r\n    }\r\n}\r\n/**\r\n * Represents memory backed push audio input stream used for custom audio input configurations.\r\n * @class PushAudioInputStream\r\n */\r\nexport class PushAudioInputStream extends AudioInputStream {\r\n    /**\r\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\r\n     * @member PushAudioInputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be written to the\r\n     * push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PushAudioInputStream} The push audio input stream being created.\r\n     */\r\n    static create(format) {\r\n        return new PushAudioInputStreamImpl(format);\r\n    }\r\n}\r\n/**\r\n * Represents memory backed push audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class PushAudioInputStreamImpl\r\n */\r\nexport class PushAudioInputStreamImpl extends PushAudioInputStream {\r\n    /**\r\n     * Creates and initalizes an instance with the given values.\r\n     * @constructor\r\n     * @param {AudioStreamFormat} format - The audio stream format.\r\n     */\r\n    constructor(format) {\r\n        super();\r\n        if (format === undefined) {\r\n            this.privFormat = AudioStreamFormatImpl.getDefaultInputFormat();\r\n        }\r\n        else {\r\n            this.privFormat = format;\r\n        }\r\n        this.privEvents = new EventSource();\r\n        this.privId = createNoDashGuid();\r\n        this.privStream = new ChunkedArrayBufferStream(this.privFormat.avgBytesPerSec / 10);\r\n    }\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    get format() {\r\n        return Promise.resolve(this.privFormat);\r\n    }\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PushAudioInputStreamImpl.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    write(dataBuffer) {\r\n        this.privStream.writeStreamChunk({\r\n            buffer: dataBuffer,\r\n            isEnd: false,\r\n            timeReceived: Date.now()\r\n        });\r\n    }\r\n    /**\r\n     * Closes the stream.\r\n     * @member PushAudioInputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    close() {\r\n        this.privStream.close();\r\n    }\r\n    id() {\r\n        return this.privId;\r\n    }\r\n    get blob() {\r\n        return this.attach(\"id\").then((audioNode) => {\r\n            const data = [];\r\n            let bufferData = Buffer.from(\"\");\r\n            const readCycle = () => audioNode.read().then((audioStreamChunk) => {\r\n                if (!audioStreamChunk || audioStreamChunk.isEnd) {\r\n                    if (typeof (XMLHttpRequest) !== \"undefined\" && typeof (Blob) !== \"undefined\") {\r\n                        return Promise.resolve(new Blob(data));\r\n                    }\r\n                    else {\r\n                        return Promise.resolve(Buffer.from(bufferData));\r\n                    }\r\n                }\r\n                else {\r\n                    if (typeof (Blob) !== \"undefined\") {\r\n                        data.push(audioStreamChunk.buffer);\r\n                    }\r\n                    else {\r\n                        bufferData = Buffer.concat([bufferData, this.toBuffer(audioStreamChunk.buffer)]);\r\n                    }\r\n                    return readCycle();\r\n                }\r\n            });\r\n            return readCycle();\r\n        });\r\n    }\r\n    turnOn() {\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return;\r\n    }\r\n    attach(audioNodeId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n            yield this.turnOn();\r\n            const stream = this.privStream;\r\n            this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n            return {\r\n                detach: () => __awaiter(this, void 0, void 0, function* () {\r\n                    this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                    return this.turnOff();\r\n                }),\r\n                id: () => audioNodeId,\r\n                read: () => stream.read(),\r\n            };\r\n        });\r\n    }\r\n    detach(audioNodeId) {\r\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n    }\r\n    turnOff() {\r\n        return;\r\n    }\r\n    get events() {\r\n        return this.privEvents;\r\n    }\r\n    get deviceInfo() {\r\n        return Promise.resolve({\r\n            bitspersample: this.privFormat.bitsPerSample,\r\n            channelcount: this.privFormat.channels,\r\n            connectivity: connectivity.Unknown,\r\n            manufacturer: \"Speech SDK\",\r\n            model: \"PushStream\",\r\n            samplerate: this.privFormat.samplesPerSec,\r\n            type: type.Stream,\r\n        });\r\n    }\r\n    onEvent(event) {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n    toBuffer(arrayBuffer) {\r\n        const buf = Buffer.alloc(arrayBuffer.byteLength);\r\n        const view = new Uint8Array(arrayBuffer);\r\n        for (let i = 0; i < buf.length; ++i) {\r\n            buf[i] = view[i];\r\n        }\r\n        return buf;\r\n    }\r\n}\r\n/*\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @class PullAudioInputStream\r\n */\r\nexport class PullAudioInputStream extends AudioInputStream {\r\n    /**\r\n     * Creates and initializes and instance.\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        super();\r\n    }\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\r\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\r\n     * @member PullAudioInputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\r\n     * derived from PullAudioInputStreamCustomCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     * returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PullAudioInputStream} The push audio input stream being created.\r\n     */\r\n    static create(callback, format) {\r\n        return new PullAudioInputStreamImpl(callback, format);\r\n    }\r\n}\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class PullAudioInputStreamImpl\r\n */\r\nexport class PullAudioInputStreamImpl extends PullAudioInputStream {\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\r\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\r\n     * @constructor\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\r\n     * derived from PullAudioInputStreamCustomCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     * returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     */\r\n    constructor(callback, format) {\r\n        super();\r\n        if (undefined === format) {\r\n            this.privFormat = AudioStreamFormat.getDefaultInputFormat();\r\n        }\r\n        else {\r\n            this.privFormat = format;\r\n        }\r\n        this.privEvents = new EventSource();\r\n        this.privId = createNoDashGuid();\r\n        this.privCallback = callback;\r\n        this.privIsClosed = false;\r\n        this.privBufferSize = this.privFormat.avgBytesPerSec / 10;\r\n    }\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    get format() {\r\n        return Promise.resolve(this.privFormat);\r\n    }\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioInputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    close() {\r\n        this.privIsClosed = true;\r\n        this.privCallback.close();\r\n    }\r\n    id() {\r\n        return this.privId;\r\n    }\r\n    get blob() {\r\n        return Promise.reject(\"Not implemented\");\r\n    }\r\n    turnOn() {\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return;\r\n    }\r\n    attach(audioNodeId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n            yield this.turnOn();\r\n            this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n            return {\r\n                detach: () => {\r\n                    this.privCallback.close();\r\n                    this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                    return this.turnOff();\r\n                },\r\n                id: () => audioNodeId,\r\n                read: () => {\r\n                    let totalBytes = 0;\r\n                    let transmitBuff;\r\n                    // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\r\n                    while (totalBytes < this.privBufferSize) {\r\n                        // Sizing the read buffer to the delta between the perfect size and what's left means we won't ever get too much\r\n                        // data back.\r\n                        const readBuff = new ArrayBuffer(this.privBufferSize - totalBytes);\r\n                        const pulledBytes = this.privCallback.read(readBuff);\r\n                        // If there is no return buffer yet defined, set the return buffer to the that was just populated.\r\n                        // This was, if we have enough data there's no copy penalty, but if we don't we have a buffer that's the\r\n                        // preferred size allocated.\r\n                        if (undefined === transmitBuff) {\r\n                            transmitBuff = readBuff;\r\n                        }\r\n                        else {\r\n                            // Not the first bite at the apple, so fill the return buffer with the data we got back.\r\n                            const intView = new Int8Array(transmitBuff);\r\n                            intView.set(new Int8Array(readBuff), totalBytes);\r\n                        }\r\n                        // If there are no bytes to read, just break out and be done.\r\n                        if (0 === pulledBytes) {\r\n                            break;\r\n                        }\r\n                        totalBytes += pulledBytes;\r\n                    }\r\n                    return Promise.resolve({\r\n                        buffer: transmitBuff.slice(0, totalBytes),\r\n                        isEnd: this.privIsClosed || totalBytes === 0,\r\n                        timeReceived: Date.now(),\r\n                    });\r\n                },\r\n            };\r\n        });\r\n    }\r\n    detach(audioNodeId) {\r\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n    }\r\n    turnOff() {\r\n        return;\r\n    }\r\n    get events() {\r\n        return this.privEvents;\r\n    }\r\n    get deviceInfo() {\r\n        return Promise.resolve({\r\n            bitspersample: this.privFormat.bitsPerSample,\r\n            channelcount: this.privFormat.channels,\r\n            connectivity: connectivity.Unknown,\r\n            manufacturer: \"Speech SDK\",\r\n            model: \"PullStream\",\r\n            samplerate: this.privFormat.samplesPerSec,\r\n            type: type.Stream,\r\n        });\r\n    }\r\n    onEvent(event) {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=AudioInputStream.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/**\r\n * Define speech synthesis audio output formats.\r\n * @enum SpeechSynthesisOutputFormat\r\n * Updated in version 1.17.0\r\n */\r\nexport var SpeechSynthesisOutputFormat;\r\n(function (SpeechSynthesisOutputFormat) {\r\n    /**\r\n     * raw-8khz-8bit-mono-mulaw\r\n     * @member SpeechSynthesisOutputFormat.Raw8Khz8BitMonoMULaw,\r\n     */\r\n    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat[\"Raw8Khz8BitMonoMULaw\"] = 0] = \"Raw8Khz8BitMonoMULaw\";\r\n    /**\r\n     * riff-16khz-16kbps-mono-siren\r\n     * @note Unsupported by the service. Do not use this value.\r\n     * @member SpeechSynthesisOutputFormat.Riff16Khz16KbpsMonoSiren\r\n     */\r\n    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat[\"Riff16Khz16KbpsMonoSiren\"] = 1] = \"Riff16Khz16KbpsMonoSiren\";\r\n    /**\r\n     * audio-16khz-16kbps-mono-siren\r\n     * @note Unsupported by the service. Do not use this value.\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz16KbpsMonoSiren\r\n     */\r\n    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat[\"Audio16Khz16KbpsMonoSiren\"] = 2] = \"Audio16Khz16KbpsMonoSiren\";\r\n    /**\r\n     * audio-16khz-32kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3\r\n     */\r\n    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat[\"Audio16Khz32KBitRateMonoMp3\"] = 3] = \"Audio16Khz32KBitRateMonoMp3\";\r\n    /**\r\n     * audio-16khz-128kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz128KBitRateMonoMp3\r\n     */\r\n    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat[\"Audio16Khz128KBitRateMonoMp3\"] = 4] = \"Audio16Khz128KBitRateMonoMp3\";\r\n    /**\r\n     * audio-16khz-64kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz64KBitRateMonoMp3\r\n     */\r\n    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat[\"Audio16Khz64KBitRateMonoMp3\"] = 5] = \"Audio16Khz64KBitRateMonoMp3\";\r\n    /**\r\n     * audio-24khz-48kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz48KBitRateMonoMp3\r\n     */\r\n    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat[\"Audio24Khz48KBitRateMonoMp3\"] = 6] = \"Audio24Khz48KBitRateMonoMp3\";\r\n    /**\r\n     * audio-24khz-96kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz96KBitRateMonoMp3\r\n     */\r\n    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat[\"Audio24Khz96KBitRateMonoMp3\"] = 7] = \"Audio24Khz96KBitRateMonoMp3\";\r\n    /**\r\n     * audio-24khz-160kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz160KBitRateMonoMp3\r\n     */\r\n    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat[\"Audio24Khz160KBitRateMonoMp3\"] = 8] = \"Audio24Khz160KBitRateMonoMp3\";\r\n    /**\r\n     * raw-16khz-16bit-mono-truesilk\r\n     * @member SpeechSynthesisOutputFormat.Raw16Khz16BitMonoTrueSilk\r\n     */\r\n    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat[\"Raw16Khz16BitMonoTrueSilk\"] = 9] = \"Raw16Khz16BitMonoTrueSilk\";\r\n    /**\r\n     * riff-16khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff16Khz16BitMonoPcm\r\n     */\r\n    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat[\"Riff16Khz16BitMonoPcm\"] = 10] = \"Riff16Khz16BitMonoPcm\";\r\n    /**\r\n     * riff-8khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff8Khz16BitMonoPcm\r\n     */\r\n    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat[\"Riff8Khz16BitMonoPcm\"] = 11] = \"Riff8Khz16BitMonoPcm\";\r\n    /**\r\n     * riff-24khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm\r\n     */\r\n    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat[\"Riff24Khz16BitMonoPcm\"] = 12] = \"Riff24Khz16BitMonoPcm\";\r\n    /**\r\n     * riff-8khz-8bit-mono-mulaw\r\n     * @member SpeechSynthesisOutputFormat.Riff8Khz8BitMonoMULaw\r\n     */\r\n    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat[\"Riff8Khz8BitMonoMULaw\"] = 13] = \"Riff8Khz8BitMonoMULaw\";\r\n    /**\r\n     * raw-16khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw16Khz16BitMonoPcm\r\n     */\r\n    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat[\"Raw16Khz16BitMonoPcm\"] = 14] = \"Raw16Khz16BitMonoPcm\";\r\n    /**\r\n     * raw-24khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw24Khz16BitMonoPcm\r\n     */\r\n    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat[\"Raw24Khz16BitMonoPcm\"] = 15] = \"Raw24Khz16BitMonoPcm\";\r\n    /**\r\n     * raw-8khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw8Khz16BitMonoPcm\r\n     */\r\n    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat[\"Raw8Khz16BitMonoPcm\"] = 16] = \"Raw8Khz16BitMonoPcm\";\r\n    /**\r\n     * ogg-16khz-16bit-mono-opus\r\n     * @member SpeechSynthesisOutputFormat.Ogg16Khz16BitMonoOpus\r\n     */\r\n    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat[\"Ogg16Khz16BitMonoOpus\"] = 17] = \"Ogg16Khz16BitMonoOpus\";\r\n    /**\r\n     * ogg-24khz-16bit-mono-opus\r\n     * @member SpeechSynthesisOutputFormat.Ogg24Khz16BitMonoOpus\r\n     */\r\n    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat[\"Ogg24Khz16BitMonoOpus\"] = 18] = \"Ogg24Khz16BitMonoOpus\";\r\n    /**\r\n     * raw-48khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw48Khz16BitMonoPcm\r\n     */\r\n    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat[\"Raw48Khz16BitMonoPcm\"] = 19] = \"Raw48Khz16BitMonoPcm\";\r\n    /**\r\n     * riff-48khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff48Khz16BitMonoPcm\r\n     */\r\n    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat[\"Riff48Khz16BitMonoPcm\"] = 20] = \"Riff48Khz16BitMonoPcm\";\r\n    /**\r\n     * audio-48khz-96kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio48Khz96KBitRateMonoMp3\r\n     */\r\n    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat[\"Audio48Khz96KBitRateMonoMp3\"] = 21] = \"Audio48Khz96KBitRateMonoMp3\";\r\n    /**\r\n     * audio-48khz-192kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio48Khz192KBitRateMonoMp3\r\n     */\r\n    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat[\"Audio48Khz192KBitRateMonoMp3\"] = 22] = \"Audio48Khz192KBitRateMonoMp3\";\r\n    /**\r\n     * ogg-48khz-16bit-mono-opus\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesisOutputFormat.Ogg48Khz16BitMonoOpus\r\n     */\r\n    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat[\"Ogg48Khz16BitMonoOpus\"] = 23] = \"Ogg48Khz16BitMonoOpus\";\r\n    /**\r\n     * webm-16khz-16bit-mono-opus\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesisOutputFormat.Webm16Khz16BitMonoOpus\r\n     */\r\n    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat[\"Webm16Khz16BitMonoOpus\"] = 24] = \"Webm16Khz16BitMonoOpus\";\r\n    /**\r\n     * webm-24khz-16bit-mono-opus\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesisOutputFormat.Webm24Khz16BitMonoOpus\r\n     */\r\n    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat[\"Webm24Khz16BitMonoOpus\"] = 25] = \"Webm24Khz16BitMonoOpus\";\r\n    /**\r\n     * raw-24khz-16bit-mono-truesilk\r\n     * Added in version 1.17.0\r\n     * @member SpeechSynthesisOutputFormat.Raw24Khz16BitMonoTrueSilk\r\n     */\r\n    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat[\"Raw24Khz16BitMonoTrueSilk\"] = 26] = \"Raw24Khz16BitMonoTrueSilk\";\r\n    /**\r\n     * raw-8khz-8bit-mono-alaw\r\n     * Added in version 1.17.0\r\n     * @member SpeechSynthesisOutputFormat.Raw8Khz8BitMonoALaw\r\n     */\r\n    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat[\"Raw8Khz8BitMonoALaw\"] = 27] = \"Raw8Khz8BitMonoALaw\";\r\n    /**\r\n     * riff-8khz-8bit-mono-alaw\r\n     * Added in version 1.17.0\r\n     * @member SpeechSynthesisOutputFormat.Riff8Khz8BitMonoALaw\r\n     */\r\n    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat[\"Riff8Khz8BitMonoALaw\"] = 28] = \"Riff8Khz8BitMonoALaw\";\r\n    /**\r\n     * webm-24khz-16bit-24kbps-mono-opus\r\n     * Audio compressed by OPUS codec in a webm container, with bitrate of 24kbps, optimized for IoT scenario.\r\n     * Added in version 1.19.0\r\n     * @member SpeechSynthesisOutputFormat.Webm24Khz16Bit24KbpsMonoOpus\r\n     */\r\n    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat[\"Webm24Khz16Bit24KbpsMonoOpus\"] = 29] = \"Webm24Khz16Bit24KbpsMonoOpus\";\r\n    /**\r\n     * audio-16khz-16bit-32kbps-mono-opus\r\n     * Audio compressed by OPUS codec without container, with bitrate of 32kbps.\r\n     * Added in version 1.20.0\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz16Bit32KbpsMonoOpus\r\n     */\r\n    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat[\"Audio16Khz16Bit32KbpsMonoOpus\"] = 30] = \"Audio16Khz16Bit32KbpsMonoOpus\";\r\n    /**\r\n     * audio-24khz-16bit-48kbps-mono-opus\r\n     * Audio compressed by OPUS codec without container, with bitrate of 48kbps.\r\n     * Added in version 1.20.0\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz16Bit48KbpsMonoOpus\r\n     */\r\n    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat[\"Audio24Khz16Bit48KbpsMonoOpus\"] = 31] = \"Audio24Khz16Bit48KbpsMonoOpus\";\r\n    /**\r\n     * audio-24khz-16bit-24kbps-mono-opus\r\n     * Audio compressed by OPUS codec without container, with bitrate of 24kbps.\r\n     * Added in version 1.20.0\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz16Bit24KbpsMonoOpus\r\n     */\r\n    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat[\"Audio24Khz16Bit24KbpsMonoOpus\"] = 32] = \"Audio24Khz16Bit24KbpsMonoOpus\";\r\n    /**\r\n     * raw-22050hz-16bit-mono-pcm\r\n     * Raw PCM audio at 22050Hz sampling rate and 16-bit depth.\r\n     * Added in version 1.22.0\r\n     * @member SpeechSynthesisOutputFormat.Raw22050Hz16BitMonoPcm\r\n     */\r\n    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat[\"Raw22050Hz16BitMonoPcm\"] = 33] = \"Raw22050Hz16BitMonoPcm\";\r\n    /**\r\n     * riff-22050hz-16bit-mono-pcm\r\n     * PCM audio at 22050Hz sampling rate and 16-bit depth, with RIFF header.\r\n     * Added in version 1.22.0\r\n     * @member SpeechSynthesisOutputFormat.Riff22050Hz16BitMonoPcm\r\n     */\r\n    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat[\"Riff22050Hz16BitMonoPcm\"] = 34] = \"Riff22050Hz16BitMonoPcm\";\r\n    /**\r\n     * raw-44100hz-16bit-mono-pcm\r\n     * Raw PCM audio at 44100Hz sampling rate and 16-bit depth.\r\n     * Added in version 1.22.0\r\n     * @member SpeechSynthesisOutputFormat.Raw44100Hz16BitMonoPcm\r\n     */\r\n    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat[\"Raw44100Hz16BitMonoPcm\"] = 35] = \"Raw44100Hz16BitMonoPcm\";\r\n    /**\r\n     * riff-44100hz-16bit-mono-pcm\r\n     * PCM audio at 44100Hz sampling rate and 16-bit depth, with RIFF header.\r\n     * Added in version 1.22.0\r\n     * @member SpeechSynthesisOutputFormat.Riff44100Hz16BitMonoPcm\r\n     */\r\n    SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat[\"Riff44100Hz16BitMonoPcm\"] = 36] = \"Riff44100Hz16BitMonoPcm\";\r\n})(SpeechSynthesisOutputFormat || (SpeechSynthesisOutputFormat = {}));\r\n\r\n//# sourceMappingURL=SpeechSynthesisOutputFormat.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { SpeechSynthesisOutputFormat } from \"../SpeechSynthesisOutputFormat\";\r\nimport { AudioFormatTag, AudioStreamFormatImpl } from \"./AudioStreamFormat\";\r\n/**\r\n * @private\r\n * @class AudioOutputFormatImpl\r\n * Updated in version 1.17.0\r\n */\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class AudioOutputFormatImpl extends AudioStreamFormatImpl {\r\n    /**\r\n     * Creates an instance with the given values.\r\n     * @constructor\r\n     * @param formatTag\r\n     * @param {number} channels - Number of channels.\r\n     * @param {number} samplesPerSec - Samples per second.\r\n     * @param {number} avgBytesPerSec - Average bytes per second.\r\n     * @param {number} blockAlign - Block alignment.\r\n     * @param {number} bitsPerSample - Bits per sample.\r\n     * @param {string} audioFormatString - Audio format string\r\n     * @param {string} requestAudioFormatString - Audio format string sent to service.\r\n     * @param {boolean} hasHeader - If the format has header or not.\r\n     */\r\n    constructor(formatTag, channels, samplesPerSec, avgBytesPerSec, blockAlign, bitsPerSample, audioFormatString, requestAudioFormatString, hasHeader) {\r\n        super(samplesPerSec, bitsPerSample, channels, formatTag);\r\n        this.formatTag = formatTag;\r\n        this.avgBytesPerSec = avgBytesPerSec;\r\n        this.blockAlign = blockAlign;\r\n        this.priAudioFormatString = audioFormatString;\r\n        this.priRequestAudioFormatString = requestAudioFormatString;\r\n        this.priHasHeader = hasHeader;\r\n    }\r\n    static fromSpeechSynthesisOutputFormat(speechSynthesisOutputFormat) {\r\n        if (speechSynthesisOutputFormat === undefined) {\r\n            return AudioOutputFormatImpl.getDefaultOutputFormat();\r\n        }\r\n        return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(AudioOutputFormatImpl.SpeechSynthesisOutputFormatToString[speechSynthesisOutputFormat]);\r\n    }\r\n    static fromSpeechSynthesisOutputFormatString(speechSynthesisOutputFormatString) {\r\n        switch (speechSynthesisOutputFormatString) {\r\n            case \"raw-8khz-8bit-mono-mulaw\":\r\n                return new AudioOutputFormatImpl(AudioFormatTag.MuLaw, 1, 8000, 8000, 1, 8, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\r\n            case \"riff-16khz-16kbps-mono-siren\":\r\n                return new AudioOutputFormatImpl(AudioFormatTag.Siren, 1, 16000, 2000, 40, 0, speechSynthesisOutputFormatString, \"audio-16khz-16kbps-mono-siren\", true);\r\n            case \"audio-16khz-16kbps-mono-siren\":\r\n                return new AudioOutputFormatImpl(AudioFormatTag.Siren, 1, 16000, 2000, 40, 0, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\r\n            case \"audio-16khz-32kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(AudioFormatTag.MP3, 1, 16000, 32 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\r\n            case \"audio-16khz-128kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(AudioFormatTag.MP3, 1, 16000, 128 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\r\n            case \"audio-16khz-64kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(AudioFormatTag.MP3, 1, 16000, 64 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\r\n            case \"audio-24khz-48kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(AudioFormatTag.MP3, 1, 24000, 48 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\r\n            case \"audio-24khz-96kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(AudioFormatTag.MP3, 1, 24000, 96 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\r\n            case \"audio-24khz-160kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(AudioFormatTag.MP3, 1, 24000, 160 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\r\n            case \"raw-16khz-16bit-mono-truesilk\":\r\n                return new AudioOutputFormatImpl(AudioFormatTag.SILKSkype, 1, 16000, 32000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\r\n            case \"riff-8khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 8000, 16000, 2, 16, speechSynthesisOutputFormatString, \"raw-8khz-16bit-mono-pcm\", true);\r\n            case \"riff-24khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 24000, 48000, 2, 16, speechSynthesisOutputFormatString, \"raw-24khz-16bit-mono-pcm\", true);\r\n            case \"riff-8khz-8bit-mono-mulaw\":\r\n                return new AudioOutputFormatImpl(AudioFormatTag.MuLaw, 1, 8000, 8000, 1, 8, speechSynthesisOutputFormatString, \"raw-8khz-8bit-mono-mulaw\", true);\r\n            case \"raw-16khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 16000, 32000, 2, 16, speechSynthesisOutputFormatString, \"raw-16khz-16bit-mono-pcm\", false);\r\n            case \"raw-24khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 24000, 48000, 2, 16, speechSynthesisOutputFormatString, \"raw-24khz-16bit-mono-pcm\", false);\r\n            case \"raw-8khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 8000, 16000, 2, 16, speechSynthesisOutputFormatString, \"raw-8khz-16bit-mono-pcm\", false);\r\n            case \"ogg-16khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(AudioFormatTag.OGG_OPUS, 1, 16000, 8192, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\r\n            case \"ogg-24khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(AudioFormatTag.OGG_OPUS, 1, 24000, 8192, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\r\n            case \"raw-48khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 48000, 96000, 2, 16, speechSynthesisOutputFormatString, \"raw-48khz-16bit-mono-pcm\", false);\r\n            case \"riff-48khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 48000, 96000, 2, 16, speechSynthesisOutputFormatString, \"raw-48khz-16bit-mono-pcm\", true);\r\n            case \"audio-48khz-96kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(AudioFormatTag.MP3, 1, 48000, 96 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\r\n            case \"audio-48khz-192kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(AudioFormatTag.MP3, 1, 48000, 192 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\r\n            case \"ogg-48khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(AudioFormatTag.OGG_OPUS, 1, 48000, 12000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\r\n            case \"webm-16khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(AudioFormatTag.WEBM_OPUS, 1, 16000, 4000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\r\n            case \"webm-24khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(AudioFormatTag.WEBM_OPUS, 1, 24000, 6000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\r\n            case \"webm-24khz-16bit-24kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(AudioFormatTag.WEBM_OPUS, 1, 24000, 3000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\r\n            case \"audio-16khz-16bit-32kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(AudioFormatTag.OPUS, 1, 16000, 4000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\r\n            case \"audio-24khz-16bit-48kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(AudioFormatTag.OPUS, 1, 24000, 6000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\r\n            case \"audio-24khz-16bit-24kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(AudioFormatTag.OPUS, 1, 24000, 3000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\r\n            case \"audio-24khz-16bit-mono-flac\":\r\n                return new AudioOutputFormatImpl(AudioFormatTag.FLAC, 1, 24000, 24000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\r\n            case \"audio-48khz-16bit-mono-flac\":\r\n                return new AudioOutputFormatImpl(AudioFormatTag.FLAC, 1, 48000, 30000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\r\n            case \"raw-24khz-16bit-mono-truesilk\":\r\n                return new AudioOutputFormatImpl(AudioFormatTag.SILKSkype, 1, 24000, 48000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\r\n            case \"raw-8khz-8bit-mono-alaw\":\r\n                return new AudioOutputFormatImpl(AudioFormatTag.ALaw, 1, 8000, 8000, 1, 8, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\r\n            case \"riff-8khz-8bit-mono-alaw\":\r\n                return new AudioOutputFormatImpl(AudioFormatTag.ALaw, 1, 8000, 8000, 1, 8, speechSynthesisOutputFormatString, \"raw-8khz-8bit-mono-alaw\", true);\r\n            case \"raw-22050hz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 22050, 44100, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\r\n            case \"riff-22050hz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 22050, 44100, 2, 16, speechSynthesisOutputFormatString, \"raw-22050hz-16bit-mono-pcm\", true);\r\n            case \"raw-44100hz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 44100, 88200, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\r\n            case \"riff-44100hz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 44100, 88200, 2, 16, speechSynthesisOutputFormatString, \"raw-44100hz-16bit-mono-pcm\", true);\r\n            case \"riff-16khz-16bit-mono-pcm\":\r\n            default:\r\n                return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 16000, 32000, 2, 16, \"riff-16khz-16bit-mono-pcm\", \"raw-16khz-16bit-mono-pcm\", true);\r\n        }\r\n    }\r\n    static getDefaultOutputFormat() {\r\n        return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString((typeof window !== \"undefined\") ? \"audio-24khz-48kbitrate-mono-mp3\" : \"riff-16khz-16bit-mono-pcm\");\r\n    }\r\n    /**\r\n     * Specifies if this audio output format has a header\r\n     * @boolean AudioOutputFormatImpl.prototype.hasHeader\r\n     * @function\r\n     * @public\r\n     */\r\n    get hasHeader() {\r\n        return this.priHasHeader;\r\n    }\r\n    /**\r\n     * Specifies the header of this format\r\n     * @ArrayBuffer AudioOutputFormatImpl.prototype.header\r\n     * @function\r\n     * @public\r\n     */\r\n    get header() {\r\n        if (this.hasHeader) {\r\n            return this.privHeader;\r\n        }\r\n        return undefined;\r\n    }\r\n    /**\r\n     * Updates the header based on the audio length\r\n     * @member AudioOutputFormatImpl.updateHeader\r\n     * @function\r\n     * @public\r\n     * @param {number} audioLength - the audio length\r\n     */\r\n    updateHeader(audioLength) {\r\n        if (this.priHasHeader) {\r\n            const view = new DataView(this.privHeader);\r\n            view.setUint32(4, audioLength + this.privHeader.byteLength - 8, true);\r\n            view.setUint32(40, audioLength, true);\r\n        }\r\n    }\r\n    /**\r\n     * Specifies the audio format string to be sent to the service\r\n     * @string AudioOutputFormatImpl.prototype.requestAudioFormatString\r\n     * @function\r\n     * @public\r\n     */\r\n    get requestAudioFormatString() {\r\n        return this.priRequestAudioFormatString;\r\n    }\r\n}\r\nAudioOutputFormatImpl.SpeechSynthesisOutputFormatToString = {\r\n    [SpeechSynthesisOutputFormat.Raw8Khz8BitMonoMULaw]: \"raw-8khz-8bit-mono-mulaw\",\r\n    [SpeechSynthesisOutputFormat.Riff16Khz16KbpsMonoSiren]: \"riff-16khz-16kbps-mono-siren\",\r\n    [SpeechSynthesisOutputFormat.Audio16Khz16KbpsMonoSiren]: \"audio-16khz-16kbps-mono-siren\",\r\n    [SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3]: \"audio-16khz-32kbitrate-mono-mp3\",\r\n    [SpeechSynthesisOutputFormat.Audio16Khz128KBitRateMonoMp3]: \"audio-16khz-128kbitrate-mono-mp3\",\r\n    [SpeechSynthesisOutputFormat.Audio16Khz64KBitRateMonoMp3]: \"audio-16khz-64kbitrate-mono-mp3\",\r\n    [SpeechSynthesisOutputFormat.Audio24Khz48KBitRateMonoMp3]: \"audio-24khz-48kbitrate-mono-mp3\",\r\n    [SpeechSynthesisOutputFormat.Audio24Khz96KBitRateMonoMp3]: \"audio-24khz-96kbitrate-mono-mp3\",\r\n    [SpeechSynthesisOutputFormat.Audio24Khz160KBitRateMonoMp3]: \"audio-24khz-160kbitrate-mono-mp3\",\r\n    [SpeechSynthesisOutputFormat.Raw16Khz16BitMonoTrueSilk]: \"raw-16khz-16bit-mono-truesilk\",\r\n    [SpeechSynthesisOutputFormat.Riff16Khz16BitMonoPcm]: \"riff-16khz-16bit-mono-pcm\",\r\n    [SpeechSynthesisOutputFormat.Riff8Khz16BitMonoPcm]: \"riff-8khz-16bit-mono-pcm\",\r\n    [SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm]: \"riff-24khz-16bit-mono-pcm\",\r\n    [SpeechSynthesisOutputFormat.Riff8Khz8BitMonoMULaw]: \"riff-8khz-8bit-mono-mulaw\",\r\n    [SpeechSynthesisOutputFormat.Raw16Khz16BitMonoPcm]: \"raw-16khz-16bit-mono-pcm\",\r\n    [SpeechSynthesisOutputFormat.Raw24Khz16BitMonoPcm]: \"raw-24khz-16bit-mono-pcm\",\r\n    [SpeechSynthesisOutputFormat.Raw8Khz16BitMonoPcm]: \"raw-8khz-16bit-mono-pcm\",\r\n    [SpeechSynthesisOutputFormat.Ogg16Khz16BitMonoOpus]: \"ogg-16khz-16bit-mono-opus\",\r\n    [SpeechSynthesisOutputFormat.Ogg24Khz16BitMonoOpus]: \"ogg-24khz-16bit-mono-opus\",\r\n    [SpeechSynthesisOutputFormat.Raw48Khz16BitMonoPcm]: \"raw-48khz-16bit-mono-pcm\",\r\n    [SpeechSynthesisOutputFormat.Riff48Khz16BitMonoPcm]: \"riff-48khz-16bit-mono-pcm\",\r\n    [SpeechSynthesisOutputFormat.Audio48Khz96KBitRateMonoMp3]: \"audio-48khz-96kbitrate-mono-mp3\",\r\n    [SpeechSynthesisOutputFormat.Audio48Khz192KBitRateMonoMp3]: \"audio-48khz-192kbitrate-mono-mp3\",\r\n    [SpeechSynthesisOutputFormat.Ogg48Khz16BitMonoOpus]: \"ogg-48khz-16bit-mono-opus\",\r\n    [SpeechSynthesisOutputFormat.Webm16Khz16BitMonoOpus]: \"webm-16khz-16bit-mono-opus\",\r\n    [SpeechSynthesisOutputFormat.Webm24Khz16BitMonoOpus]: \"webm-24khz-16bit-mono-opus\",\r\n    [SpeechSynthesisOutputFormat.Webm24Khz16Bit24KbpsMonoOpus]: \"webm-24khz-16bit-24kbps-mono-opus\",\r\n    [SpeechSynthesisOutputFormat.Raw24Khz16BitMonoTrueSilk]: \"raw-24khz-16bit-mono-truesilk\",\r\n    [SpeechSynthesisOutputFormat.Raw8Khz8BitMonoALaw]: \"raw-8khz-8bit-mono-alaw\",\r\n    [SpeechSynthesisOutputFormat.Riff8Khz8BitMonoALaw]: \"riff-8khz-8bit-mono-alaw\",\r\n    [SpeechSynthesisOutputFormat.Audio16Khz16Bit32KbpsMonoOpus]: \"audio-16khz-16bit-32kbps-mono-opus\",\r\n    [SpeechSynthesisOutputFormat.Audio24Khz16Bit48KbpsMonoOpus]: \"audio-24khz-16bit-48kbps-mono-opus\",\r\n    [SpeechSynthesisOutputFormat.Audio24Khz16Bit24KbpsMonoOpus]: \"audio-24khz-16bit-24kbps-mono-opus\",\r\n    [SpeechSynthesisOutputFormat.Raw22050Hz16BitMonoPcm]: \"raw-22050hz-16bit-mono-pcm\",\r\n    [SpeechSynthesisOutputFormat.Riff22050Hz16BitMonoPcm]: \"riff-22050hz-16bit-mono-pcm\",\r\n    [SpeechSynthesisOutputFormat.Raw44100Hz16BitMonoPcm]: \"raw-44100hz-16bit-mono-pcm\",\r\n    [SpeechSynthesisOutputFormat.Riff44100Hz16BitMonoPcm]: \"riff-44100hz-16bit-mono-pcm\",\r\n};\r\n\r\n//# sourceMappingURL=AudioOutputFormat.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n/* eslint-disable max-classes-per-file */\r\nimport { createNoDashGuid, Stream, } from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat\";\r\n/**\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @class AudioOutputStream\r\n */\r\nexport class AudioOutputStream {\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        return;\r\n    }\r\n    /**\r\n     * Creates a memory backed PullAudioOutputStream with the specified audio format.\r\n     * @member AudioOutputStream.createPullStream\r\n     * @function\r\n     * @public\r\n     * @returns {PullAudioOutputStream} The audio output stream being created.\r\n     */\r\n    static createPullStream() {\r\n        return PullAudioOutputStream.create();\r\n    }\r\n}\r\n/**\r\n * Represents memory backed push audio output stream used for custom audio output configurations.\r\n * @class PullAudioOutputStream\r\n */\r\nexport class PullAudioOutputStream extends AudioOutputStream {\r\n    /**\r\n     * Creates a memory backed PullAudioOutputStream with the specified audio format.\r\n     * @member PullAudioOutputStream.create\r\n     * @function\r\n     * @public\r\n     * @returns {PullAudioOutputStream} The push audio output stream being created.\r\n     */\r\n    static create() {\r\n        return new PullAudioOutputStreamImpl();\r\n    }\r\n}\r\n/**\r\n * Represents memory backed push audio output stream used for custom audio output configurations.\r\n * @private\r\n * @class PullAudioOutputStreamImpl\r\n */\r\nexport class PullAudioOutputStreamImpl extends PullAudioOutputStream {\r\n    /**\r\n     * Creates and initializes an instance with the given values.\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.privId = createNoDashGuid();\r\n        this.privStream = new Stream();\r\n    }\r\n    /**\r\n     * Sets the format information to the stream. For internal use only.\r\n     * @param {AudioStreamFormat} format - the format to be set.\r\n     */\r\n    set format(format) {\r\n        if (format === undefined || format === null) {\r\n            this.privFormat = AudioOutputFormatImpl.getDefaultOutputFormat();\r\n        }\r\n        this.privFormat = format;\r\n    }\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    get format() {\r\n        return this.privFormat;\r\n    }\r\n    /**\r\n     * Checks if the stream is closed\r\n     * @member PullAudioOutputStreamImpl.prototype.isClosed\r\n     * @property\r\n     * @public\r\n     */\r\n    get isClosed() {\r\n        return this.privStream.isClosed;\r\n    }\r\n    /**\r\n     * Gets the id of the stream\r\n     * @member PullAudioOutputStreamImpl.prototype.id\r\n     * @property\r\n     * @public\r\n     */\r\n    id() {\r\n        return this.privId;\r\n    }\r\n    /**\r\n     * Reads audio data from the internal buffer.\r\n     * @member PullAudioOutputStreamImpl.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\r\n     * @returns {Promise<number>} - Audio buffer length has been read.\r\n     */\r\n    read(dataBuffer) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const intView = new Int8Array(dataBuffer);\r\n            let totalBytes = 0;\r\n            if (this.privLastChunkView !== undefined) {\r\n                if (this.privLastChunkView.length > dataBuffer.byteLength) {\r\n                    intView.set(this.privLastChunkView.slice(0, dataBuffer.byteLength));\r\n                    this.privLastChunkView = this.privLastChunkView.slice(dataBuffer.byteLength);\r\n                    return Promise.resolve(dataBuffer.byteLength);\r\n                }\r\n                intView.set(this.privLastChunkView);\r\n                totalBytes = this.privLastChunkView.length;\r\n                this.privLastChunkView = undefined;\r\n            }\r\n            // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\r\n            while (totalBytes < dataBuffer.byteLength && !this.privStream.isReadEnded) {\r\n                const chunk = yield this.privStream.read();\r\n                if (chunk !== undefined && !chunk.isEnd) {\r\n                    let tmpBuffer;\r\n                    if (chunk.buffer.byteLength > dataBuffer.byteLength - totalBytes) {\r\n                        tmpBuffer = chunk.buffer.slice(0, dataBuffer.byteLength - totalBytes);\r\n                        this.privLastChunkView = new Int8Array(chunk.buffer.slice(dataBuffer.byteLength - totalBytes));\r\n                    }\r\n                    else {\r\n                        tmpBuffer = chunk.buffer;\r\n                    }\r\n                    intView.set(new Int8Array(tmpBuffer), totalBytes);\r\n                    totalBytes += tmpBuffer.byteLength;\r\n                }\r\n                else {\r\n                    this.privStream.readEnded();\r\n                }\r\n            }\r\n            return totalBytes;\r\n        });\r\n    }\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PullAudioOutputStreamImpl.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    write(dataBuffer) {\r\n        Contracts.throwIfNullOrUndefined(this.privStream, \"must set format before writing\");\r\n        this.privStream.writeStreamChunk({\r\n            buffer: dataBuffer,\r\n            isEnd: false,\r\n            timeReceived: Date.now()\r\n        });\r\n    }\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioOutputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    close() {\r\n        this.privStream.close();\r\n    }\r\n}\r\n/*\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @class PushAudioOutputStream\r\n */\r\nexport class PushAudioOutputStream extends AudioOutputStream {\r\n    /**\r\n     * Creates and initializes and instance.\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        super();\r\n    }\r\n    /**\r\n     * Creates a PushAudioOutputStream that delegates to the specified callback interface for\r\n     * write() and close() methods.\r\n     * @member PushAudioOutputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\r\n     * derived from PushAudioOutputStreamCallback\r\n     * @returns {PushAudioOutputStream} The push audio output stream being created.\r\n     */\r\n    static create(callback) {\r\n        return new PushAudioOutputStreamImpl(callback);\r\n    }\r\n}\r\n/**\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @private\r\n * @class PushAudioOutputStreamImpl\r\n */\r\nexport class PushAudioOutputStreamImpl extends PushAudioOutputStream {\r\n    /**\r\n     * Creates a PushAudioOutputStream that delegates to the specified callback interface for\r\n     * read() and close() methods.\r\n     * @constructor\r\n     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\r\n     * derived from PushAudioOutputStreamCallback\r\n     */\r\n    constructor(callback) {\r\n        super();\r\n        this.privId = createNoDashGuid();\r\n        this.privCallback = callback;\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    set format(format) { }\r\n    write(buffer) {\r\n        if (!!this.privCallback.write) {\r\n            this.privCallback.write(buffer);\r\n        }\r\n    }\r\n    close() {\r\n        if (!!this.privCallback.close) {\r\n            this.privCallback.close();\r\n        }\r\n    }\r\n    id() {\r\n        return this.privId;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=AudioOutputStream.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { FileAudioSource, MicAudioSource, PcmRecorder, } from \"../../common.browser/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport { AudioInputStream, PullAudioInputStreamCallback, PullAudioOutputStream, PushAudioOutputStream, PushAudioOutputStreamCallback, SpeakerAudioDestination } from \"../Exports\";\r\nimport { AudioFileWriter } from \"./AudioFileWriter\";\r\nimport { PullAudioInputStreamImpl } from \"./AudioInputStream\";\r\nimport { PushAudioOutputStreamImpl } from \"./AudioOutputStream\";\r\n/**\r\n * Represents audio input configuration used for specifying what type of input to use (microphone, file, stream).\r\n * @class AudioConfig\r\n * Updated in version 1.11.0\r\n */\r\nexport class AudioConfig {\r\n    /**\r\n     * Creates an AudioConfig object representing the default microphone on the system.\r\n     * @member AudioConfig.fromDefaultMicrophoneInput\r\n     * @function\r\n     * @public\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    static fromDefaultMicrophoneInput() {\r\n        const pcmRecorder = new PcmRecorder(true);\r\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder));\r\n    }\r\n    /**\r\n     * Creates an AudioConfig object representing a microphone with the specified device ID.\r\n     * @member AudioConfig.fromMicrophoneInput\r\n     * @function\r\n     * @public\r\n     * @param {string | undefined} deviceId - Specifies the device ID of the microphone to be used.\r\n     * Default microphone is used the value is omitted.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    static fromMicrophoneInput(deviceId) {\r\n        const pcmRecorder = new PcmRecorder(true);\r\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder, deviceId));\r\n    }\r\n    /**\r\n     * Creates an AudioConfig object representing the specified file.\r\n     * @member AudioConfig.fromWavFileInput\r\n     * @function\r\n     * @public\r\n     * @param {File} fileName - Specifies the audio input file. Currently, only WAV / PCM is supported.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    static fromWavFileInput(file, name = \"unnamedBuffer.wav\") {\r\n        return new AudioConfigImpl(new FileAudioSource(file, name));\r\n    }\r\n    /**\r\n     * Creates an AudioConfig object representing the specified stream.\r\n     * @member AudioConfig.fromStreamInput\r\n     * @function\r\n     * @public\r\n     * @param {AudioInputStream | PullAudioInputStreamCallback | MediaStream} audioStream - Specifies the custom audio input\r\n     * stream. Currently, only WAV / PCM is supported.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    static fromStreamInput(audioStream) {\r\n        if (audioStream instanceof PullAudioInputStreamCallback) {\r\n            return new AudioConfigImpl(new PullAudioInputStreamImpl(audioStream));\r\n        }\r\n        if (audioStream instanceof AudioInputStream) {\r\n            return new AudioConfigImpl(audioStream);\r\n        }\r\n        if (typeof MediaStream !== \"undefined\" && audioStream instanceof MediaStream) {\r\n            const pcmRecorder = new PcmRecorder(false);\r\n            return new AudioConfigImpl(new MicAudioSource(pcmRecorder, null, null, audioStream));\r\n        }\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n    /**\r\n     * Creates an AudioConfig object representing the default speaker.\r\n     * @member AudioConfig.fromDefaultSpeakerOutput\r\n     * @function\r\n     * @public\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    static fromDefaultSpeakerOutput() {\r\n        return new AudioOutputConfigImpl(new SpeakerAudioDestination());\r\n    }\r\n    /**\r\n     * Creates an AudioConfig object representing the custom IPlayer object.\r\n     * You can use the IPlayer object to control pause, resume, etc.\r\n     * @member AudioConfig.fromSpeakerOutput\r\n     * @function\r\n     * @public\r\n     * @param {IPlayer} player - the IPlayer object for playback.\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.12.0\r\n     */\r\n    static fromSpeakerOutput(player) {\r\n        if (player === undefined) {\r\n            return AudioConfig.fromDefaultSpeakerOutput();\r\n        }\r\n        if (player instanceof SpeakerAudioDestination) {\r\n            return new AudioOutputConfigImpl(player);\r\n        }\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n    /**\r\n     * Creates an AudioConfig object representing a specified output audio file\r\n     * @member AudioConfig.fromAudioFileOutput\r\n     * @function\r\n     * @public\r\n     * @param {PathLike} filename - the filename of the output audio file\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    static fromAudioFileOutput(filename) {\r\n        return new AudioOutputConfigImpl(new AudioFileWriter(filename));\r\n    }\r\n    /**\r\n     * Creates an AudioConfig object representing a specified audio output stream\r\n     * @member AudioConfig.fromStreamOutput\r\n     * @function\r\n     * @public\r\n     * @param {AudioOutputStream | PushAudioOutputStreamCallback} audioStream - Specifies the custom audio output\r\n     * stream.\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    static fromStreamOutput(audioStream) {\r\n        if (audioStream instanceof PushAudioOutputStreamCallback) {\r\n            return new AudioOutputConfigImpl(new PushAudioOutputStreamImpl(audioStream));\r\n        }\r\n        if (audioStream instanceof PushAudioOutputStream) {\r\n            return new AudioOutputConfigImpl(audioStream);\r\n        }\r\n        if (audioStream instanceof PullAudioOutputStream) {\r\n            return new AudioOutputConfigImpl(audioStream);\r\n        }\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n}\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class AudioConfigImpl\r\n */\r\nexport class AudioConfigImpl extends AudioConfig {\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {IAudioSource} source - An audio source.\r\n     */\r\n    constructor(source) {\r\n        super();\r\n        this.privSource = source;\r\n    }\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    get format() {\r\n        return this.privSource.format;\r\n    }\r\n    /**\r\n     * @member AudioConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    close(cb, err) {\r\n        this.privSource.turnOff().then(() => {\r\n            if (!!cb) {\r\n                cb();\r\n            }\r\n        }, (error) => {\r\n            if (!!err) {\r\n                err(error);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @member AudioConfigImpl.prototype.id\r\n     * @function\r\n     * @public\r\n     */\r\n    id() {\r\n        return this.privSource.id();\r\n    }\r\n    /**\r\n     * @member AudioConfigImpl.prototype.blob\r\n     * @function\r\n     * @public\r\n     */\r\n    get blob() {\r\n        return this.privSource.blob;\r\n    }\r\n    /**\r\n     * @member AudioConfigImpl.prototype.turnOn\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} A promise.\r\n     */\r\n    turnOn() {\r\n        return this.privSource.turnOn();\r\n    }\r\n    /**\r\n     * @member AudioConfigImpl.prototype.attach\r\n     * @function\r\n     * @public\r\n     * @param {string} audioNodeId - The audio node id.\r\n     * @returns {Promise<IAudioStreamNode>} A promise.\r\n     */\r\n    attach(audioNodeId) {\r\n        return this.privSource.attach(audioNodeId);\r\n    }\r\n    /**\r\n     * @member AudioConfigImpl.prototype.detach\r\n     * @function\r\n     * @public\r\n     * @param {string} audioNodeId - The audio node id.\r\n     */\r\n    detach(audioNodeId) {\r\n        return this.privSource.detach(audioNodeId);\r\n    }\r\n    /**\r\n     * @member AudioConfigImpl.prototype.turnOff\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} A promise.\r\n     */\r\n    turnOff() {\r\n        return this.privSource.turnOff();\r\n    }\r\n    /**\r\n     * @member AudioConfigImpl.prototype.events\r\n     * @function\r\n     * @public\r\n     * @returns {EventSource<AudioSourceEvent>} An event source for audio events.\r\n     */\r\n    get events() {\r\n        return this.privSource.events;\r\n    }\r\n    setProperty(name, value) {\r\n        Contracts.throwIfNull(value, \"value\");\r\n        if (undefined !== this.privSource.setProperty) {\r\n            this.privSource.setProperty(name, value);\r\n        }\r\n        else {\r\n            throw new Error(\"This AudioConfig instance does not support setting properties.\");\r\n        }\r\n    }\r\n    getProperty(name, def) {\r\n        if (undefined !== this.privSource.getProperty) {\r\n            return this.privSource.getProperty(name, def);\r\n        }\r\n        else {\r\n            throw new Error(\"This AudioConfig instance does not support getting properties.\");\r\n        }\r\n        return def;\r\n    }\r\n    get deviceInfo() {\r\n        return this.privSource.deviceInfo;\r\n    }\r\n}\r\nexport class AudioOutputConfigImpl extends AudioConfig {\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {IAudioDestination} destination - An audio destination.\r\n     */\r\n    constructor(destination) {\r\n        super();\r\n        this.privDestination = destination;\r\n    }\r\n    set format(format) {\r\n        this.privDestination.format = format;\r\n    }\r\n    write(buffer) {\r\n        this.privDestination.write(buffer);\r\n    }\r\n    close() {\r\n        this.privDestination.close();\r\n    }\r\n    id() {\r\n        return this.privDestination.id();\r\n    }\r\n    setProperty() {\r\n        throw new Error(\"This AudioConfig instance does not support setting properties.\");\r\n    }\r\n    getProperty() {\r\n        throw new Error(\"This AudioConfig instance does not support getting properties.\");\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=AudioConfig.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/**\r\n * Defines the possible reasons a recognition result might be canceled.\r\n * @class CancellationReason\r\n */\r\nexport var CancellationReason;\r\n(function (CancellationReason) {\r\n    /**\r\n     * Indicates that an error occurred during speech recognition.\r\n     * @member CancellationReason.Error\r\n     */\r\n    CancellationReason[CancellationReason[\"Error\"] = 0] = \"Error\";\r\n    /**\r\n     * Indicates that the end of the audio stream was reached.\r\n     * @member CancellationReason.EndOfStream\r\n     */\r\n    CancellationReason[CancellationReason[\"EndOfStream\"] = 1] = \"EndOfStream\";\r\n})(CancellationReason || (CancellationReason = {}));\r\n\r\n//# sourceMappingURL=CancellationReason.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/**\r\n * An abstract base class that defines callback methods (read() and close()) for\r\n * custom audio input streams).\r\n * @class PullAudioInputStreamCallback\r\n */\r\nexport class PullAudioInputStreamCallback {\r\n}\r\n\r\n//# sourceMappingURL=PullAudioInputStreamCallback.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/**\r\n * An abstract base class that defines callback methods (write() and close()) for\r\n * custom audio output streams).\r\n * @class PushAudioOutputStreamCallback\r\n */\r\nexport class PushAudioOutputStreamCallback {\r\n}\r\n\r\n//# sourceMappingURL=PushAudioOutputStreamCallback.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/**\r\n * Defines content for session events like SessionStarted/Stopped, SoundStarted/Stopped.\r\n * @class SessionEventArgs\r\n */\r\nexport class SessionEventArgs {\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    constructor(sessionId) {\r\n        this.privSessionId = sessionId;\r\n    }\r\n    /**\r\n     * Represents the session identifier.\r\n     * @member SessionEventArgs.prototype.sessionId\r\n     * @function\r\n     * @public\r\n     * @returns {string} Represents the session identifier.\r\n     */\r\n    get sessionId() {\r\n        return this.privSessionId;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=SessionEventArgs.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { SessionEventArgs } from \"./Exports\";\r\n/**\r\n * Defines payload for session events like Speech Start/End Detected\r\n * @class\r\n */\r\nexport class RecognitionEventArgs extends SessionEventArgs {\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    constructor(offset, sessionId) {\r\n        super(sessionId);\r\n        this.privOffset = offset;\r\n    }\r\n    /**\r\n     * Represents the message offset\r\n     * @member RecognitionEventArgs.prototype.offset\r\n     * @function\r\n     * @public\r\n     */\r\n    get offset() {\r\n        return this.privOffset;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=RecognitionEventArgs.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/**\r\n * Define Speech Recognizer output formats.\r\n * @class OutputFormat\r\n */\r\nexport var OutputFormat;\r\n(function (OutputFormat) {\r\n    /**\r\n     * @member OutputFormat.Simple\r\n     */\r\n    OutputFormat[OutputFormat[\"Simple\"] = 0] = \"Simple\";\r\n    /**\r\n     * @member OutputFormat.Detailed\r\n     */\r\n    OutputFormat[OutputFormat[\"Detailed\"] = 1] = \"Detailed\";\r\n})(OutputFormat || (OutputFormat = {}));\r\n\r\n//# sourceMappingURL=OutputFormat.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/**\r\n * Defines result of speech recognition.\r\n * @class RecognitionResult\r\n */\r\nexport class RecognitionResult {\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} language - Primary Language detected, if provided.\r\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    constructor(resultId, reason, text, duration, offset, language, languageDetectionConfidence, errorDetails, json, properties) {\r\n        this.privResultId = resultId;\r\n        this.privReason = reason;\r\n        this.privText = text;\r\n        this.privDuration = duration;\r\n        this.privOffset = offset;\r\n        this.privLanguage = language;\r\n        this.privLanguageDetectionConfidence = languageDetectionConfidence;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privJson = json;\r\n        this.privProperties = properties;\r\n    }\r\n    /**\r\n     * Specifies the result identifier.\r\n     * @member RecognitionResult.prototype.resultId\r\n     * @function\r\n     * @public\r\n     * @returns {string} Specifies the result identifier.\r\n     */\r\n    get resultId() {\r\n        return this.privResultId;\r\n    }\r\n    /**\r\n     * Specifies status of the result.\r\n     * @member RecognitionResult.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {ResultReason} Specifies status of the result.\r\n     */\r\n    get reason() {\r\n        return this.privReason;\r\n    }\r\n    /**\r\n     * Presents the recognized text in the result.\r\n     * @member RecognitionResult.prototype.text\r\n     * @function\r\n     * @public\r\n     * @returns {string} Presents the recognized text in the result.\r\n     */\r\n    get text() {\r\n        return this.privText;\r\n    }\r\n    /**\r\n     * Duration of recognized speech in 100 nano second increments.\r\n     * @member RecognitionResult.prototype.duration\r\n     * @function\r\n     * @public\r\n     * @returns {number} Duration of recognized speech in 100 nano second increments.\r\n     */\r\n    get duration() {\r\n        return this.privDuration;\r\n    }\r\n    /**\r\n     * Offset of recognized speech in 100 nano second increments.\r\n     * @member RecognitionResult.prototype.offset\r\n     * @function\r\n     * @public\r\n     * @returns {number} Offset of recognized speech in 100 nano second increments.\r\n     */\r\n    get offset() {\r\n        return this.privOffset;\r\n    }\r\n    /**\r\n     * Primary Language detected.\r\n     * @member RecognitionResult.prototype.language\r\n     * @function\r\n     * @public\r\n     * @returns {string} language detected.\r\n     */\r\n    get language() {\r\n        return this.privLanguage;\r\n    }\r\n    /**\r\n     * Primary Language detection confidence (Unknown, Low, Medium, High).\r\n     * @member RecognitionResult.prototype.languageDetectionConfidence\r\n     * @function\r\n     * @public\r\n     * @returns {string} detection confidence strength.\r\n     */\r\n    get languageDetectionConfidence() {\r\n        return this.privLanguageDetectionConfidence;\r\n    }\r\n    /**\r\n     * In case of an unsuccessful recognition, provides details of the occurred error.\r\n     * @member RecognitionResult.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} a brief description of an error.\r\n     */\r\n    get errorDetails() {\r\n        return this.privErrorDetails;\r\n    }\r\n    /**\r\n     * A string containing Json serialized recognition result as it was received from the service.\r\n     * @member RecognitionResult.prototype.json\r\n     * @function\r\n     * @private\r\n     * @returns {string} Json serialized representation of the result.\r\n     */\r\n    get json() {\r\n        return this.privJson;\r\n    }\r\n    /**\r\n     * The set of properties exposed in the result.\r\n     * @member RecognitionResult.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The set of properties exposed in the result.\r\n     */\r\n    get properties() {\r\n        return this.privProperties;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=RecognitionResult.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { RecognitionResult } from \"./Exports\";\r\n/**\r\n * Defines result of speech recognition.\r\n * @class SpeechRecognitionResult\r\n */\r\nexport class SpeechRecognitionResult extends RecognitionResult {\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @public\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} language - Primary Language detected, if provided.\r\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param {string} speakerId - speaker id for conversation transcription, if provided.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    constructor(resultId, reason, text, duration, offset, language, languageDetectionConfidence, speakerId, errorDetails, json, properties) {\r\n        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, errorDetails, json, properties);\r\n        this.privSpeakerId = speakerId;\r\n    }\r\n    /**\r\n     * speaker id from conversation transcription/id scenarios\r\n     * @member SpeechRecognitionResult.prototype.speakerId\r\n     * @function\r\n     * @public\r\n     * @returns {string} id of speaker in given result\r\n     */\r\n    get speakerId() {\r\n        return this.privSpeakerId;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=SpeechRecognitionResult.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/* eslint-disable max-classes-per-file */\r\nimport { RecognitionEventArgs } from \"./Exports\";\r\n/**\r\n * Defines contents of speech recognizing/recognized event.\r\n * @class SpeechRecognitionEventArgs\r\n */\r\nexport class SpeechRecognitionEventArgs extends RecognitionEventArgs {\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {SpeechRecognitionResult} result - The speech recognition result.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    constructor(result, offset, sessionId) {\r\n        super(offset, sessionId);\r\n        this.privResult = result;\r\n    }\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @member SpeechRecognitionEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechRecognitionResult} the recognition result.\r\n     */\r\n    get result() {\r\n        return this.privResult;\r\n    }\r\n}\r\n/**\r\n * Defines contents of conversation transcribed/transcribing event.\r\n * @class ConversationTranscriptionEventArgs\r\n */\r\nexport class ConversationTranscriptionEventArgs extends SpeechRecognitionEventArgs {\r\n}\r\n\r\n//# sourceMappingURL=SpeechRecognitionEventArgs.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { RecognitionEventArgs } from \"./Exports\";\r\n/**\r\n * Defines content of a CancellationEvent.\r\n * @class CancellationEventArgsBase\r\n */\r\nexport class CancellationEventArgsBase extends RecognitionEventArgs {\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {CancellationReason} reason - The cancellation reason.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    constructor(reason, errorDetails, errorCode, offset, sessionId) {\r\n        super(offset, sessionId);\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member CancellationEventArgsBase.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    get reason() {\r\n        return this.privReason;\r\n    }\r\n    /**\r\n     * The error code in case of an unsuccessful operation.\r\n     * @return An error code that represents the error reason.\r\n     */\r\n    get errorCode() {\r\n        return this.privErrorCode;\r\n    }\r\n    /**\r\n     * In case of an unsuccessful operation, provides details of the occurred error.\r\n     * @member CancellationEventArgsBase.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    get errorDetails() {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=CancellationEventArgsBase.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { CancellationEventArgsBase, } from \"./CancellationEventArgsBase\";\r\nexport class SpeechRecognitionCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n\r\n//# sourceMappingURL=SpeechRecognitionCanceledEventArgs.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/**\r\n * Defines the possible reasons a recognition result might be generated.\r\n * @class ResultReason\r\n */\r\nexport var ResultReason;\r\n(function (ResultReason) {\r\n    /**\r\n     * Indicates speech could not be recognized. More details\r\n     * can be found in the NoMatchDetails object.\r\n     * @member ResultReason.NoMatch\r\n     */\r\n    ResultReason[ResultReason[\"NoMatch\"] = 0] = \"NoMatch\";\r\n    /**\r\n     * Indicates that the recognition was canceled. More details\r\n     * can be found using the CancellationDetails object.\r\n     * @member ResultReason.Canceled\r\n     */\r\n    ResultReason[ResultReason[\"Canceled\"] = 1] = \"Canceled\";\r\n    /**\r\n     * Indicates the speech result contains hypothesis text.\r\n     * @member ResultReason.RecognizedSpeech\r\n     */\r\n    ResultReason[ResultReason[\"RecognizingSpeech\"] = 2] = \"RecognizingSpeech\";\r\n    /**\r\n     * Indicates the speech result contains final text that has been recognized.\r\n     * Speech Recognition is now complete for this phrase.\r\n     * @member ResultReason.RecognizedSpeech\r\n     */\r\n    ResultReason[ResultReason[\"RecognizedSpeech\"] = 3] = \"RecognizedSpeech\";\r\n    /**\r\n     * Indicates the speech result contains a finalized acceptance of a provided keyword.\r\n     * Speech recognition will continue unless otherwise configured.\r\n     * @member ResultReason.RecognizedKeyword\r\n     */\r\n    ResultReason[ResultReason[\"RecognizedKeyword\"] = 4] = \"RecognizedKeyword\";\r\n    /**\r\n     * Indicates the intent result contains hypothesis text and intent.\r\n     * @member ResultReason.RecognizingIntent\r\n     */\r\n    ResultReason[ResultReason[\"RecognizingIntent\"] = 5] = \"RecognizingIntent\";\r\n    /**\r\n     * Indicates the intent result contains final text and intent.\r\n     * Speech Recognition and Intent determination are now complete for this phrase.\r\n     * @member ResultReason.RecognizedIntent\r\n     */\r\n    ResultReason[ResultReason[\"RecognizedIntent\"] = 6] = \"RecognizedIntent\";\r\n    /**\r\n     * Indicates the translation result contains hypothesis text and its translation(s).\r\n     * @member ResultReason.TranslatingSpeech\r\n     */\r\n    ResultReason[ResultReason[\"TranslatingSpeech\"] = 7] = \"TranslatingSpeech\";\r\n    /**\r\n     * Indicates the translation result contains final text and corresponding translation(s).\r\n     * Speech Recognition and Translation are now complete for this phrase.\r\n     * @member ResultReason.TranslatedSpeech\r\n     */\r\n    ResultReason[ResultReason[\"TranslatedSpeech\"] = 8] = \"TranslatedSpeech\";\r\n    /**\r\n     * Indicates the synthesized audio result contains a non-zero amount of audio data\r\n     * @member ResultReason.SynthesizingAudio\r\n     */\r\n    ResultReason[ResultReason[\"SynthesizingAudio\"] = 9] = \"SynthesizingAudio\";\r\n    /**\r\n     * Indicates the synthesized audio is now complete for this phrase.\r\n     * @member ResultReason.SynthesizingAudioCompleted\r\n     */\r\n    ResultReason[ResultReason[\"SynthesizingAudioCompleted\"] = 10] = \"SynthesizingAudioCompleted\";\r\n    /**\r\n     * Indicates the speech synthesis is now started\r\n     * @member ResultReason.SynthesizingAudioStarted\r\n     */\r\n    ResultReason[ResultReason[\"SynthesizingAudioStarted\"] = 11] = \"SynthesizingAudioStarted\";\r\n    /**\r\n     * Indicates the voice profile is being enrolled and customers need to send more audio to create a voice profile.\r\n     * @member ResultReason.EnrollingVoiceProfile\r\n     */\r\n    ResultReason[ResultReason[\"EnrollingVoiceProfile\"] = 12] = \"EnrollingVoiceProfile\";\r\n    /**\r\n     * Indicates the voice profile has been enrolled.\r\n     * @member ResultReason.EnrolledVoiceProfile\r\n     */\r\n    ResultReason[ResultReason[\"EnrolledVoiceProfile\"] = 13] = \"EnrolledVoiceProfile\";\r\n    /**\r\n     * Indicates successful identification of some speakers.\r\n     * @member ResultReason.RecognizedSpeakers\r\n     */\r\n    ResultReason[ResultReason[\"RecognizedSpeakers\"] = 14] = \"RecognizedSpeakers\";\r\n    /**\r\n     * Indicates successfully verified one speaker.\r\n     * @member ResultReason.RecognizedSpeaker\r\n     */\r\n    ResultReason[ResultReason[\"RecognizedSpeaker\"] = 15] = \"RecognizedSpeaker\";\r\n    /**\r\n     * Indicates a voice profile has been reset successfully.\r\n     * @member ResultReason.ResetVoiceProfile\r\n     */\r\n    ResultReason[ResultReason[\"ResetVoiceProfile\"] = 16] = \"ResetVoiceProfile\";\r\n    /**\r\n     * Indicates a voice profile has been deleted successfully.\r\n     * @member ResultReason.DeletedVoiceProfile\r\n     */\r\n    ResultReason[ResultReason[\"DeletedVoiceProfile\"] = 17] = \"DeletedVoiceProfile\";\r\n    /**\r\n     * Indicates synthesis voices list has been successfully retrieved.\r\n     * @member ResultReason.VoicesListRetrieved\r\n     */\r\n    ResultReason[ResultReason[\"VoicesListRetrieved\"] = 18] = \"VoicesListRetrieved\";\r\n})(ResultReason || (ResultReason = {}));\r\n\r\n//# sourceMappingURL=ResultReason.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/* eslint-disable max-classes-per-file */\r\nimport { ForceDictationPropertyName, OutputFormatPropertyName, ServicePropertiesPropertyName } from \"../common.speech/Exports\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport { OutputFormat, ProfanityOption, PropertyCollection, PropertyId, SpeechSynthesisOutputFormat, } from \"./Exports\";\r\n/**\r\n * Speech configuration.\r\n * @class SpeechConfig\r\n */\r\nexport class SpeechConfig {\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        return;\r\n    }\r\n    /**\r\n     * Static instance of SpeechConfig returned by passing subscriptionKey and service region.\r\n     * Note: Please use your LanguageUnderstanding subscription key in case you want to use the Intent recognizer.\r\n     * @member SpeechConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechConfig} The speech factory\r\n     */\r\n    static fromSubscription(subscriptionKey, region) {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n        const speechImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_IntentRegion, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        return speechImpl;\r\n    }\r\n    /**\r\n     * Creates an instance of the speech config with specified endpoint and subscription key.\r\n     * This method is intended only for users who use a non-standard service endpoint or parameters.\r\n     * Note: Please use your LanguageUnderstanding subscription key in case you want to use the Intent recognizer.\r\n     * Note: The query parameters specified in the endpoint URL are not changed, even if they are set by any other APIs.\r\n     * For example, if language is defined in the uri as query parameter \"language=de-DE\", and also set by\r\n     * SpeechConfig.speechRecognitionLanguage = \"en-US\", the language setting in uri takes precedence,\r\n     * and the effective language is \"de-DE\". Only the parameters that are not specified in the\r\n     * endpoint URL can be set by other APIs.\r\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\r\n     * fromEndpoint method, and then set authorizationToken=\"token\" on the created SpeechConfig instance to\r\n     * use the authorization token.\r\n     * @member SpeechConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The service endpoint to connect to.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    static fromEndpoint(endpoint, subscriptionKey) {\r\n        Contracts.throwIfNull(endpoint, \"endpoint\");\r\n        const speechImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\r\n        if (undefined !== subscriptionKey) {\r\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n        return speechImpl;\r\n    }\r\n    /**\r\n     * Creates an instance of the speech config with specified host and subscription key.\r\n     * This method is intended only for users who use a non-default service host. Standard resource path will be assumed.\r\n     * For services with a non-standard resource path or no path at all, use fromEndpoint instead.\r\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\r\n     * Note: To use an authorization token with fromHost, use fromHost(URL),\r\n     * and then set the AuthorizationToken property on the created SpeechConfig instance.\r\n     * Note: Added in version 1.9.0.\r\n     * @member SpeechConfig.fromHost\r\n     * @function\r\n     * @public\r\n     * @param {URL} host - The service endpoint to connect to. Format is \"protocol://host:port\" where \":port\" is optional.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    static fromHost(hostName, subscriptionKey) {\r\n        Contracts.throwIfNull(hostName, \"hostName\");\r\n        const speechImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Host, hostName.protocol + \"//\" + hostName.hostname + (hostName.port === \"\" ? \"\" : \":\" + hostName.port));\r\n        if (undefined !== subscriptionKey) {\r\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n        return speechImpl;\r\n    }\r\n    /**\r\n     * Creates an instance of the speech factory with specified initial authorization token and region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * Note: Please use a token derived from your LanguageUnderstanding subscription key in case you want\r\n     * to use the Intent recognizer. As configuration values are copied when creating a new recognizer,\r\n     * the new token value will not apply to recognizers that have already been created. For recognizers\r\n     * that have been created before, you need to set authorization token of the corresponding recognizer\r\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member SpeechConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} authorizationToken - The initial authorization token.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    static fromAuthorizationToken(authorizationToken, region) {\r\n        Contracts.throwIfNull(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n        const speechImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_IntentRegion, region);\r\n        speechImpl.authorizationToken = authorizationToken;\r\n        return speechImpl;\r\n    }\r\n    /**\r\n     * Closes the configuration.\r\n     * @member SpeechConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    close() { }\r\n}\r\n/**\r\n * @public\r\n * @class SpeechConfigImpl\r\n */\r\nexport class SpeechConfigImpl extends SpeechConfig {\r\n    constructor() {\r\n        super();\r\n        this.privProperties = new PropertyCollection();\r\n        this.speechRecognitionLanguage = \"en-US\"; // Should we have a default?\r\n        this.outputFormat = OutputFormat.Simple;\r\n    }\r\n    get properties() {\r\n        return this.privProperties;\r\n    }\r\n    get endPoint() {\r\n        return new URL(this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Endpoint));\r\n    }\r\n    get subscriptionKey() {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Key);\r\n    }\r\n    get region() {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n    }\r\n    get authorizationToken() {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n    set authorizationToken(value) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n    get speechRecognitionLanguage() {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n    set speechRecognitionLanguage(value) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, value);\r\n    }\r\n    get autoDetectSourceLanguages() {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages);\r\n    }\r\n    set autoDetectSourceLanguages(value) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, value);\r\n    }\r\n    get outputFormat() {\r\n        return OutputFormat[this.privProperties.getProperty(OutputFormatPropertyName, undefined)];\r\n    }\r\n    set outputFormat(value) {\r\n        this.privProperties.setProperty(OutputFormatPropertyName, OutputFormat[value]);\r\n    }\r\n    get endpointId() {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_EndpointId);\r\n    }\r\n    set endpointId(value) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_EndpointId, value);\r\n    }\r\n    setProperty(name, value) {\r\n        Contracts.throwIfNull(value, \"value\");\r\n        this.privProperties.setProperty(name, value);\r\n    }\r\n    getProperty(name, def) {\r\n        return this.privProperties.getProperty(name, def);\r\n    }\r\n    setProxy(proxyHostName, proxyPort, proxyUserName, proxyPassword) {\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyHostName], proxyHostName);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPort], proxyPort);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyUserName], proxyUserName);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPassword], proxyPassword);\r\n    }\r\n    setServiceProperty(name, value) {\r\n        const currentProperties = JSON.parse(this.privProperties.getProperty(ServicePropertiesPropertyName, \"{}\"));\r\n        currentProperties[name] = value;\r\n        this.privProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\r\n    }\r\n    setProfanity(profanity) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceResponse_ProfanityOption, ProfanityOption[profanity]);\r\n    }\r\n    enableAudioLogging() {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_EnableAudioLogging, \"true\");\r\n    }\r\n    requestWordLevelTimestamps() {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"true\");\r\n    }\r\n    enableDictation() {\r\n        this.privProperties.setProperty(ForceDictationPropertyName, \"true\");\r\n    }\r\n    clone() {\r\n        const ret = new SpeechConfigImpl();\r\n        ret.privProperties = this.privProperties.clone();\r\n        return ret;\r\n    }\r\n    get speechSynthesisLanguage() {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage);\r\n    }\r\n    set speechSynthesisLanguage(language) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthLanguage, language);\r\n    }\r\n    get speechSynthesisVoiceName() {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice);\r\n    }\r\n    set speechSynthesisVoiceName(voice) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthVoice, voice);\r\n    }\r\n    get speechSynthesisOutputFormat() {\r\n        return SpeechSynthesisOutputFormat[this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)];\r\n    }\r\n    set speechSynthesisOutputFormat(format) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, SpeechSynthesisOutputFormat[format]);\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=SpeechConfig.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { PropertyId } from \"./Exports\";\r\n/**\r\n * Represents collection of properties and their values.\r\n * @class PropertyCollection\r\n */\r\nexport class PropertyCollection {\r\n    constructor() {\r\n        this.privKeys = [];\r\n        this.privValues = [];\r\n    }\r\n    /**\r\n     * Returns the property value in type String.\r\n     * Currently only String, int and bool are allowed.\r\n     * If the name is not available, the specified defaultValue is returned.\r\n     * @member PropertyCollection.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string | number | boolean} def - The default value which is returned if the parameter\r\n     * is not available in the collection.\r\n     * @returns {string} value of the parameter.\r\n     */\r\n    getProperty(key, def) {\r\n        let keyToUse;\r\n        if (typeof key === \"string\") {\r\n            keyToUse = key;\r\n        }\r\n        else {\r\n            keyToUse = PropertyId[key];\r\n        }\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            if (this.privKeys[n] === keyToUse) {\r\n                return this.privValues[n];\r\n            }\r\n        }\r\n        if (def === undefined) {\r\n            return undefined;\r\n        }\r\n        return String(def);\r\n    }\r\n    /**\r\n     * Sets the String value of the parameter specified by name.\r\n     * @member PropertyCollection.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} value - The value of the parameter.\r\n     */\r\n    setProperty(key, value) {\r\n        let keyToUse;\r\n        if (typeof key === \"string\") {\r\n            keyToUse = key;\r\n        }\r\n        else {\r\n            keyToUse = PropertyId[key];\r\n        }\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            if (this.privKeys[n] === keyToUse) {\r\n                this.privValues[n] = value;\r\n                return;\r\n            }\r\n        }\r\n        this.privKeys.push(keyToUse);\r\n        this.privValues.push(value);\r\n    }\r\n    /**\r\n     * Clones the collection.\r\n     * @member PropertyCollection.prototype.clone\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} A copy of the collection.\r\n     */\r\n    clone() {\r\n        const clonedMap = new PropertyCollection();\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            clonedMap.privKeys.push(this.privKeys[n]);\r\n            clonedMap.privValues.push(this.privValues[n]);\r\n        }\r\n        return clonedMap;\r\n    }\r\n    /**\r\n     * Merges this set of properties into another, no overwrites.\r\n     * @member PropertyCollection.prototype.mergeTo\r\n     * @function\r\n     * @public\r\n     * @param {PropertyCollection}  destinationCollection - The collection to merge into.\r\n     */\r\n    mergeTo(destinationCollection) {\r\n        this.privKeys.forEach((key) => {\r\n            if (destinationCollection.getProperty(key, undefined) === undefined) {\r\n                const value = this.getProperty(key);\r\n                destinationCollection.setProperty(key, value);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Get the keys in Property Collection.\r\n     * @member PropertyCollection.prototype.keys\r\n     * @function\r\n     * @public\r\n     * @returns {string []} Keys in the collection.\r\n     */\r\n    get keys() {\r\n        return this.privKeys;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=PropertyCollection.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/**\r\n * Defines speech property ids.\r\n * @class PropertyId\r\n */\r\nexport var PropertyId;\r\n(function (PropertyId) {\r\n    /**\r\n     * The Cognitive Services Speech Service subscription Key. If you are using an intent recognizer, you need to\r\n     * specify the LUIS endpoint key for your particular LUIS app. Under normal circumstances, you shouldn't\r\n     * have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromSubscription]].\r\n     * @member PropertyId.SpeechServiceConnection_Key\r\n     */\r\n    PropertyId[PropertyId[\"SpeechServiceConnection_Key\"] = 0] = \"SpeechServiceConnection_Key\";\r\n    /**\r\n     * The Cognitive Services Speech Service endpoint (url). Under normal circumstances, you shouldn't\r\n     * have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromEndpoint]].\r\n     * NOTE: This endpoint is not the same as the endpoint used to obtain an access token.\r\n     * @member PropertyId.SpeechServiceConnection_Endpoint\r\n     */\r\n    PropertyId[PropertyId[\"SpeechServiceConnection_Endpoint\"] = 1] = \"SpeechServiceConnection_Endpoint\";\r\n    /**\r\n     * The Cognitive Services Speech Service region. Under normal circumstances, you shouldn't have to\r\n     * use this property directly.\r\n     * Instead, use [[SpeechConfig.fromSubscription]], [[SpeechConfig.fromEndpoint]], [[SpeechConfig.fromAuthorizationToken]].\r\n     * @member PropertyId.SpeechServiceConnection_Region\r\n     */\r\n    PropertyId[PropertyId[\"SpeechServiceConnection_Region\"] = 2] = \"SpeechServiceConnection_Region\";\r\n    /**\r\n     * The Cognitive Services Speech Service authorization token (aka access token). Under normal circumstances,\r\n     * you shouldn't have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromAuthorizationToken]], [[SpeechRecognizer.authorizationToken]],\r\n     * [[IntentRecognizer.authorizationToken]], [[TranslationRecognizer.authorizationToken]], [[SpeakerRecognizer.authorizationToken]].\r\n     * @member PropertyId.SpeechServiceAuthorization_Token\r\n     */\r\n    PropertyId[PropertyId[\"SpeechServiceAuthorization_Token\"] = 3] = \"SpeechServiceAuthorization_Token\";\r\n    /**\r\n     * The Cognitive Services Speech Service authorization type. Currently unused.\r\n     * @member PropertyId.SpeechServiceAuthorization_Type\r\n     */\r\n    PropertyId[PropertyId[\"SpeechServiceAuthorization_Type\"] = 4] = \"SpeechServiceAuthorization_Type\";\r\n    /**\r\n     * The Cognitive Services Speech Service endpoint id. Under normal circumstances, you shouldn't\r\n     * have to use this property directly.\r\n     * Instead, use [[SpeechConfig.endpointId]].\r\n     * NOTE: The endpoint id is available in the Speech Portal, listed under Endpoint Details.\r\n     * @member PropertyId.SpeechServiceConnection_EndpointId\r\n     */\r\n    PropertyId[PropertyId[\"SpeechServiceConnection_EndpointId\"] = 5] = \"SpeechServiceConnection_EndpointId\";\r\n    /**\r\n     * The list of comma separated languages (BCP-47 format) used as target translation languages. Under normal circumstances,\r\n     * you shouldn't have to use this property directly.\r\n     * Instead use [[SpeechTranslationConfig.addTargetLanguage]],\r\n     * [[SpeechTranslationConfig.targetLanguages]], [[TranslationRecognizer.targetLanguages]].\r\n     * @member PropertyId.SpeechServiceConnection_TranslationToLanguages\r\n     */\r\n    PropertyId[PropertyId[\"SpeechServiceConnection_TranslationToLanguages\"] = 6] = \"SpeechServiceConnection_TranslationToLanguages\";\r\n    /**\r\n     * The name of the Cognitive Service Text to Speech Service Voice. Under normal circumstances, you shouldn't have to use this\r\n     * property directly.\r\n     * Instead, use [[SpeechTranslationConfig.voiceName]].\r\n     * NOTE: Valid voice names can be found <a href=\"https://aka.ms/csspeech/voicenames\">here</a>.\r\n     * @member PropertyId.SpeechServiceConnection_TranslationVoice\r\n     */\r\n    PropertyId[PropertyId[\"SpeechServiceConnection_TranslationVoice\"] = 7] = \"SpeechServiceConnection_TranslationVoice\";\r\n    /**\r\n     * Translation features.\r\n     * @member PropertyId.SpeechServiceConnection_TranslationFeatures\r\n     */\r\n    PropertyId[PropertyId[\"SpeechServiceConnection_TranslationFeatures\"] = 8] = \"SpeechServiceConnection_TranslationFeatures\";\r\n    /**\r\n     * The Language Understanding Service Region. Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Instead, use [[LanguageUnderstandingModel]].\r\n     * @member PropertyId.SpeechServiceConnection_IntentRegion\r\n     */\r\n    PropertyId[PropertyId[\"SpeechServiceConnection_IntentRegion\"] = 9] = \"SpeechServiceConnection_IntentRegion\";\r\n    /**\r\n     * The host name of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    PropertyId[PropertyId[\"SpeechServiceConnection_ProxyHostName\"] = 10] = \"SpeechServiceConnection_ProxyHostName\";\r\n    /**\r\n     * The port of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    PropertyId[PropertyId[\"SpeechServiceConnection_ProxyPort\"] = 11] = \"SpeechServiceConnection_ProxyPort\";\r\n    /**\r\n     * The user name of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    PropertyId[PropertyId[\"SpeechServiceConnection_ProxyUserName\"] = 12] = \"SpeechServiceConnection_ProxyUserName\";\r\n    /**\r\n     * The password of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    PropertyId[PropertyId[\"SpeechServiceConnection_ProxyPassword\"] = 13] = \"SpeechServiceConnection_ProxyPassword\";\r\n    /**\r\n     * The Cognitive Services Speech Service recognition Mode. Can be \"INTERACTIVE\", \"CONVERSATION\", \"DICTATION\".\r\n     * This property is intended to be read-only. The SDK is using it internally.\r\n     * @member PropertyId.SpeechServiceConnection_RecoMode\r\n     */\r\n    PropertyId[PropertyId[\"SpeechServiceConnection_RecoMode\"] = 14] = \"SpeechServiceConnection_RecoMode\";\r\n    /**\r\n     * The spoken language to be recognized (in BCP-47 format). Under normal circumstances, you shouldn't have to use this property\r\n     * directly.\r\n     * Instead, use [[SpeechConfig.speechRecognitionLanguage]].\r\n     * @member PropertyId.SpeechServiceConnection_RecoLanguage\r\n     */\r\n    PropertyId[PropertyId[\"SpeechServiceConnection_RecoLanguage\"] = 15] = \"SpeechServiceConnection_RecoLanguage\";\r\n    /**\r\n     * The session id. This id is a universally unique identifier (aka UUID) representing a specific binding of an audio input stream\r\n     * and the underlying speech recognition instance to which it is bound. Under normal circumstances, you shouldn't have to use this\r\n     * property directly.\r\n     * Instead use [[SessionEventArgs.sessionId]].\r\n     * @member PropertyId.Speech_SessionId\r\n     */\r\n    PropertyId[PropertyId[\"Speech_SessionId\"] = 16] = \"Speech_SessionId\";\r\n    /**\r\n     * The spoken language to be synthesized (e.g. en-US)\r\n     * @member PropertyId.SpeechServiceConnection_SynthLanguage\r\n     */\r\n    PropertyId[PropertyId[\"SpeechServiceConnection_SynthLanguage\"] = 17] = \"SpeechServiceConnection_SynthLanguage\";\r\n    /**\r\n     * The name of the TTS voice to be used for speech synthesis\r\n     * @member PropertyId.SpeechServiceConnection_SynthVoice\r\n     */\r\n    PropertyId[PropertyId[\"SpeechServiceConnection_SynthVoice\"] = 18] = \"SpeechServiceConnection_SynthVoice\";\r\n    /**\r\n     * The string to specify TTS output audio format\r\n     * @member PropertyId.SpeechServiceConnection_SynthOutputFormat\r\n     */\r\n    PropertyId[PropertyId[\"SpeechServiceConnection_SynthOutputFormat\"] = 19] = \"SpeechServiceConnection_SynthOutputFormat\";\r\n    /**\r\n     * The list of comma separated languages used as possible source languages\r\n     * Added in version 1.13.0\r\n     * @member PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages\r\n     */\r\n    PropertyId[PropertyId[\"SpeechServiceConnection_AutoDetectSourceLanguages\"] = 20] = \"SpeechServiceConnection_AutoDetectSourceLanguages\";\r\n    /**\r\n     * The requested Cognitive Services Speech Service response output format (simple or detailed). Under normal circumstances, you shouldn't have\r\n     * to use this property directly.\r\n     * Instead use [[SpeechConfig.outputFormat]].\r\n     * @member PropertyId.SpeechServiceResponse_RequestDetailedResultTrueFalse\r\n     */\r\n    PropertyId[PropertyId[\"SpeechServiceResponse_RequestDetailedResultTrueFalse\"] = 21] = \"SpeechServiceResponse_RequestDetailedResultTrueFalse\";\r\n    /**\r\n     * The requested Cognitive Services Speech Service response output profanity level. Currently unused.\r\n     * @member PropertyId.SpeechServiceResponse_RequestProfanityFilterTrueFalse\r\n     */\r\n    PropertyId[PropertyId[\"SpeechServiceResponse_RequestProfanityFilterTrueFalse\"] = 22] = \"SpeechServiceResponse_RequestProfanityFilterTrueFalse\";\r\n    /**\r\n     * The Cognitive Services Speech Service response output (in JSON format). This property is available on recognition result objects only.\r\n     * @member PropertyId.SpeechServiceResponse_JsonResult\r\n     */\r\n    PropertyId[PropertyId[\"SpeechServiceResponse_JsonResult\"] = 23] = \"SpeechServiceResponse_JsonResult\";\r\n    /**\r\n     * The Cognitive Services Speech Service error details (in JSON format). Under normal circumstances, you shouldn't have to\r\n     * use this property directly. Instead use [[CancellationDetails.errorDetails]].\r\n     * @member PropertyId.SpeechServiceResponse_JsonErrorDetails\r\n     */\r\n    PropertyId[PropertyId[\"SpeechServiceResponse_JsonErrorDetails\"] = 24] = \"SpeechServiceResponse_JsonErrorDetails\";\r\n    /**\r\n     * The cancellation reason. Currently unused.\r\n     * @member PropertyId.CancellationDetails_Reason\r\n     */\r\n    PropertyId[PropertyId[\"CancellationDetails_Reason\"] = 25] = \"CancellationDetails_Reason\";\r\n    /**\r\n     * The cancellation text. Currently unused.\r\n     * @member PropertyId.CancellationDetails_ReasonText\r\n     */\r\n    PropertyId[PropertyId[\"CancellationDetails_ReasonText\"] = 26] = \"CancellationDetails_ReasonText\";\r\n    /**\r\n     * The Cancellation detailed text. Currently unused.\r\n     * @member PropertyId.CancellationDetails_ReasonDetailedText\r\n     */\r\n    PropertyId[PropertyId[\"CancellationDetails_ReasonDetailedText\"] = 27] = \"CancellationDetails_ReasonDetailedText\";\r\n    /**\r\n     * The Language Understanding Service response output (in JSON format). Available via [[IntentRecognitionResult]]\r\n     * @member PropertyId.LanguageUnderstandingServiceResponse_JsonResult\r\n     */\r\n    PropertyId[PropertyId[\"LanguageUnderstandingServiceResponse_JsonResult\"] = 28] = \"LanguageUnderstandingServiceResponse_JsonResult\";\r\n    /**\r\n     * The URL string built from speech configuration.\r\n     * This property is intended to be read-only. The SDK is using it internally.\r\n     * NOTE: Added in version 1.7.0.\r\n     */\r\n    PropertyId[PropertyId[\"SpeechServiceConnection_Url\"] = 29] = \"SpeechServiceConnection_Url\";\r\n    /**\r\n     * The initial silence timeout value (in milliseconds) used by the service.\r\n     * Added in version 1.7.0\r\n     */\r\n    PropertyId[PropertyId[\"SpeechServiceConnection_InitialSilenceTimeoutMs\"] = 30] = \"SpeechServiceConnection_InitialSilenceTimeoutMs\";\r\n    /**\r\n     * The end silence timeout value (in milliseconds) used by the service.\r\n     * Added in version 1.7.0\r\n     */\r\n    PropertyId[PropertyId[\"SpeechServiceConnection_EndSilenceTimeoutMs\"] = 31] = \"SpeechServiceConnection_EndSilenceTimeoutMs\";\r\n    /**\r\n     * A duration of detected silence, measured in milliseconds, after which speech-to-text will determine a spoken\r\n     * phrase has ended and generate a final Recognized result. Configuring this timeout may be helpful in situations\r\n     * where spoken input is significantly faster or slower than usual and default segmentation behavior consistently\r\n     * yields results that are too long or too short. Segmentation timeout values that are inappropriately high or low\r\n     * can negatively affect speech-to-text accuracy; this property should be carefully configured and the resulting\r\n     * behavior should be thoroughly validated as intended.\r\n     *\r\n     * For more information about timeout configuration that includes discussion of default behaviors, please visit\r\n     * https://aka.ms/csspeech/timeouts.\r\n     *\r\n     * Added in version 1.21.0.\r\n     */\r\n    PropertyId[PropertyId[\"Speech_SegmentationSilenceTimeoutMs\"] = 32] = \"Speech_SegmentationSilenceTimeoutMs\";\r\n    /**\r\n     * A boolean value specifying whether audio logging is enabled in the service or not.\r\n     * Added in version 1.7.0\r\n     */\r\n    PropertyId[PropertyId[\"SpeechServiceConnection_EnableAudioLogging\"] = 33] = \"SpeechServiceConnection_EnableAudioLogging\";\r\n    /**\r\n     * The speech service connection language identifier mode.\r\n     * Can be \"AtStart\" (the default), or \"Continuous\". See Language\r\n     * Identification document https://aka.ms/speech/lid?pivots=programming-language-javascript\r\n     * for more details.\r\n     * Added in 1.25.0\r\n     **/\r\n    PropertyId[PropertyId[\"SpeechServiceConnection_LanguageIdMode\"] = 34] = \"SpeechServiceConnection_LanguageIdMode\";\r\n    /**\r\n     * A string value representing the desired endpoint version to target for Speech Recognition.\r\n     * Added in version 1.21.0\r\n     */\r\n    PropertyId[PropertyId[\"SpeechServiceConnection_RecognitionEndpointVersion\"] = 35] = \"SpeechServiceConnection_RecognitionEndpointVersion\";\r\n    /**\r\n     * The requested Cognitive Services Speech Service response output profanity setting.\r\n     * Allowed values are \"masked\", \"removed\", and \"raw\".\r\n     * Added in version 1.7.0.\r\n     */\r\n    PropertyId[PropertyId[\"SpeechServiceResponse_ProfanityOption\"] = 36] = \"SpeechServiceResponse_ProfanityOption\";\r\n    /**\r\n     * A string value specifying which post processing option should be used by service.\r\n     * Allowed values are \"TrueText\".\r\n     * Added in version 1.7.0\r\n     */\r\n    PropertyId[PropertyId[\"SpeechServiceResponse_PostProcessingOption\"] = 37] = \"SpeechServiceResponse_PostProcessingOption\";\r\n    /**\r\n     * A boolean value specifying whether to include word-level timestamps in the response result.\r\n     * Added in version 1.7.0\r\n     */\r\n    PropertyId[PropertyId[\"SpeechServiceResponse_RequestWordLevelTimestamps\"] = 38] = \"SpeechServiceResponse_RequestWordLevelTimestamps\";\r\n    /**\r\n     * The number of times a word has to be in partial results to be returned.\r\n     * Added in version 1.7.0\r\n     */\r\n    PropertyId[PropertyId[\"SpeechServiceResponse_StablePartialResultThreshold\"] = 39] = \"SpeechServiceResponse_StablePartialResultThreshold\";\r\n    /**\r\n     * A string value specifying the output format option in the response result. Internal use only.\r\n     * Added in version 1.7.0.\r\n     */\r\n    PropertyId[PropertyId[\"SpeechServiceResponse_OutputFormatOption\"] = 40] = \"SpeechServiceResponse_OutputFormatOption\";\r\n    /**\r\n     * A boolean value to request for stabilizing translation partial results by omitting words in the end.\r\n     * Added in version 1.7.0.\r\n     */\r\n    PropertyId[PropertyId[\"SpeechServiceResponse_TranslationRequestStablePartialResult\"] = 41] = \"SpeechServiceResponse_TranslationRequestStablePartialResult\";\r\n    /**\r\n     * A boolean value specifying whether to request WordBoundary events.\r\n     * @member PropertyId.SpeechServiceResponse_RequestWordBoundary\r\n     * Added in version 1.21.0.\r\n     */\r\n    PropertyId[PropertyId[\"SpeechServiceResponse_RequestWordBoundary\"] = 42] = \"SpeechServiceResponse_RequestWordBoundary\";\r\n    /**\r\n     * A boolean value specifying whether to request punctuation boundary in WordBoundary Events. Default is true.\r\n     * @member PropertyId.SpeechServiceResponse_RequestPunctuationBoundary\r\n     * Added in version 1.21.0.\r\n     */\r\n    PropertyId[PropertyId[\"SpeechServiceResponse_RequestPunctuationBoundary\"] = 43] = \"SpeechServiceResponse_RequestPunctuationBoundary\";\r\n    /**\r\n     * A boolean value specifying whether to request sentence boundary in WordBoundary Events. Default is false.\r\n     * @member PropertyId.SpeechServiceResponse_RequestSentenceBoundary\r\n     * Added in version 1.21.0.\r\n     */\r\n    PropertyId[PropertyId[\"SpeechServiceResponse_RequestSentenceBoundary\"] = 44] = \"SpeechServiceResponse_RequestSentenceBoundary\";\r\n    /**\r\n     * Identifier used to connect to the backend service.\r\n     * @member PropertyId.Conversation_ApplicationId\r\n     */\r\n    PropertyId[PropertyId[\"Conversation_ApplicationId\"] = 45] = \"Conversation_ApplicationId\";\r\n    /**\r\n     * Type of dialog backend to connect to.\r\n     * @member PropertyId.Conversation_DialogType\r\n     */\r\n    PropertyId[PropertyId[\"Conversation_DialogType\"] = 46] = \"Conversation_DialogType\";\r\n    /**\r\n     * Silence timeout for listening\r\n     * @member PropertyId.Conversation_Initial_Silence_Timeout\r\n     */\r\n    PropertyId[PropertyId[\"Conversation_Initial_Silence_Timeout\"] = 47] = \"Conversation_Initial_Silence_Timeout\";\r\n    /**\r\n     * From Id to add to speech recognition activities.\r\n     * @member PropertyId.Conversation_From_Id\r\n     */\r\n    PropertyId[PropertyId[\"Conversation_From_Id\"] = 48] = \"Conversation_From_Id\";\r\n    /**\r\n     * ConversationId for the session.\r\n     * @member PropertyId.Conversation_Conversation_Id\r\n     */\r\n    PropertyId[PropertyId[\"Conversation_Conversation_Id\"] = 49] = \"Conversation_Conversation_Id\";\r\n    /**\r\n     * Comma separated list of custom voice deployment ids.\r\n     * @member PropertyId.Conversation_Custom_Voice_Deployment_Ids\r\n     */\r\n    PropertyId[PropertyId[\"Conversation_Custom_Voice_Deployment_Ids\"] = 50] = \"Conversation_Custom_Voice_Deployment_Ids\";\r\n    /**\r\n     * Speech activity template, stamp properties from the template on the activity generated by the service for speech.\r\n     * @member PropertyId.Conversation_Speech_Activity_Template\r\n     * Added in version 1.10.0.\r\n     */\r\n    PropertyId[PropertyId[\"Conversation_Speech_Activity_Template\"] = 51] = \"Conversation_Speech_Activity_Template\";\r\n    /**\r\n     * Enables or disables the receipt of turn status messages as obtained on the turnStatusReceived event.\r\n     * @member PropertyId.Conversation_Request_Bot_Status_Messages\r\n     * Added in version 1.15.0.\r\n     */\r\n    PropertyId[PropertyId[\"Conversation_Request_Bot_Status_Messages\"] = 52] = \"Conversation_Request_Bot_Status_Messages\";\r\n    /**\r\n     * Specifies the connection ID to be provided in the Agent configuration message, e.g. a Direct Line token for\r\n     * channel authentication.\r\n     * Added in version 1.15.1.\r\n     */\r\n    PropertyId[PropertyId[\"Conversation_Agent_Connection_Id\"] = 53] = \"Conversation_Agent_Connection_Id\";\r\n    /**\r\n     * The Cognitive Services Speech Service host (url). Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromHost]].\r\n     */\r\n    PropertyId[PropertyId[\"SpeechServiceConnection_Host\"] = 54] = \"SpeechServiceConnection_Host\";\r\n    /**\r\n     * Set the host for service calls to the Conversation Translator REST management and websocket calls.\r\n     */\r\n    PropertyId[PropertyId[\"ConversationTranslator_Host\"] = 55] = \"ConversationTranslator_Host\";\r\n    /**\r\n     * Optionally set the the host's display name.\r\n     * Used when joining a conversation.\r\n     */\r\n    PropertyId[PropertyId[\"ConversationTranslator_Name\"] = 56] = \"ConversationTranslator_Name\";\r\n    /**\r\n     * Optionally set a value for the X-CorrelationId request header.\r\n     * Used for troubleshooting errors in the server logs. It should be a valid guid.\r\n     */\r\n    PropertyId[PropertyId[\"ConversationTranslator_CorrelationId\"] = 57] = \"ConversationTranslator_CorrelationId\";\r\n    /**\r\n     * Set the conversation token to be sent to the speech service. This enables the\r\n     * service to service call from the speech service to the Conversation Translator service for relaying\r\n     * recognitions. For internal use.\r\n     */\r\n    PropertyId[PropertyId[\"ConversationTranslator_Token\"] = 58] = \"ConversationTranslator_Token\";\r\n    /**\r\n     * The reference text of the audio for pronunciation evaluation.\r\n     * For this and the following pronunciation assessment parameters, see\r\n     * https://docs.microsoft.com/azure/cognitive-services/speech-service/rest-speech-to-text#pronunciation-assessment-parameters for details.\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PropertyId[PropertyId[\"PronunciationAssessment_ReferenceText\"] = 59] = \"PronunciationAssessment_ReferenceText\";\r\n    /**\r\n     * The point system for pronunciation score calibration (FivePoint or HundredMark).\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PropertyId[PropertyId[\"PronunciationAssessment_GradingSystem\"] = 60] = \"PronunciationAssessment_GradingSystem\";\r\n    /**\r\n     * The pronunciation evaluation granularity (Phoneme, Word, or FullText).\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PropertyId[PropertyId[\"PronunciationAssessment_Granularity\"] = 61] = \"PronunciationAssessment_Granularity\";\r\n    /**\r\n     * Defines if enable miscue calculation.\r\n     * With this enabled, the pronounced words will be compared to the reference text,\r\n     * and will be marked with omission/insertion based on the comparison. The default setting is False.\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PropertyId[PropertyId[\"PronunciationAssessment_EnableMiscue\"] = 62] = \"PronunciationAssessment_EnableMiscue\";\r\n    /**\r\n     * The json string of pronunciation assessment parameters\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PropertyId[PropertyId[\"PronunciationAssessment_Json\"] = 63] = \"PronunciationAssessment_Json\";\r\n    /**\r\n     * Pronunciation assessment parameters.\r\n     * This property is intended to be read-only. The SDK is using it internally.\r\n     * Added in version 1.15.0\r\n     */\r\n    PropertyId[PropertyId[\"PronunciationAssessment_Params\"] = 64] = \"PronunciationAssessment_Params\";\r\n    /**\r\n     * Version of Speaker Recognition API to use.\r\n     * Added in version 1.18.0\r\n     */\r\n    PropertyId[PropertyId[\"SpeakerRecognition_Api_Version\"] = 65] = \"SpeakerRecognition_Api_Version\";\r\n})(PropertyId || (PropertyId = {}));\r\n\r\n//# sourceMappingURL=PropertyId.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { CognitiveSubscriptionKeyAuthentication, CognitiveTokenAuthentication, Context, OS, ServiceRecognizerBase, SpeechServiceConfig, } from \"../common.speech/Exports\";\r\nimport { Deferred, marshalPromiseToCallbacks } from \"../common/Exports\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport { AudioConfig, PropertyId, } from \"./Exports\";\r\n/**\r\n * Defines the base class Recognizer which mainly contains common event handlers.\r\n * @class Recognizer\r\n */\r\nexport class Recognizer {\r\n    /**\r\n     * Creates and initializes an instance of a Recognizer\r\n     * @constructor\r\n     * @param {AudioConfig} audioInput - An optional audio input stream associated with the recognizer\r\n     */\r\n    constructor(audioConfig, properties, connectionFactory) {\r\n        this.audioConfig = (audioConfig !== undefined) ? audioConfig : AudioConfig.fromDefaultMicrophoneInput();\r\n        this.privDisposed = false;\r\n        this.privProperties = properties.clone();\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.implCommonRecognizerSetup();\r\n    }\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member Recognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    close(cb, errorCb) {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n    /**\r\n     * @Internal\r\n     * Internal data member to support fromRecognizer* pattern methods on other classes.\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    get internalData() {\r\n        return this.privReco;\r\n    }\r\n    /**\r\n     * This method performs cleanup of resources.\r\n     * The Boolean parameter disposing indicates whether the method is called\r\n     * from Dispose (if disposing is true) or from the finalizer (if disposing is false).\r\n     * Derived classes should override this method to dispose resource if needed.\r\n     * @member Recognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - Flag to request disposal.\r\n     */\r\n    dispose(disposing) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (this.privDisposed) {\r\n                return;\r\n            }\r\n            this.privDisposed = true;\r\n            if (disposing) {\r\n                if (this.privReco) {\r\n                    yield this.privReco.audioSource.turnOff();\r\n                    yield this.privReco.dispose();\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * This method returns the current state of the telemetry setting.\r\n     * @member Recognizer.prototype.telemetryEnabled\r\n     * @function\r\n     * @public\r\n     * @returns true if the telemetry is enabled, false otherwise.\r\n     */\r\n    static get telemetryEnabled() {\r\n        return ServiceRecognizerBase.telemetryDataEnabled;\r\n    }\r\n    /**\r\n     * This method globally enables or disables telemetry.\r\n     * @member Recognizer.prototype.enableTelemetry\r\n     * @function\r\n     * @public\r\n     * @param enabled - Global setting for telemetry collection.\r\n     * If set to true, telemetry information like microphone errors,\r\n     * recognition errors are collected and sent to Microsoft.\r\n     * If set to false, no telemetry is sent to Microsoft.\r\n     */\r\n    static enableTelemetry(enabled) {\r\n        ServiceRecognizerBase.telemetryDataEnabled = enabled;\r\n    }\r\n    // Does the generic recognizer setup that is common across all recognizer types.\r\n    implCommonRecognizerSetup() {\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n        const recognizerConfig = this.createRecognizerConfig(new SpeechServiceConfig(new Context(new OS(osPlatform, osName, osVersion))));\r\n        this.privReco = this.createServiceRecognizer(Recognizer.getAuthFromProperties(this.privProperties), this.privConnectionFactory, this.audioConfig, recognizerConfig);\r\n    }\r\n    recognizeOnceAsyncImpl(recognitionMode) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            Contracts.throwIfDisposed(this.privDisposed);\r\n            const ret = new Deferred();\r\n            yield this.implRecognizerStop();\r\n            yield this.privReco.recognize(recognitionMode, ret.resolve, ret.reject);\r\n            const result = yield ret.promise;\r\n            yield this.implRecognizerStop();\r\n            return result;\r\n        });\r\n    }\r\n    startContinuousRecognitionAsyncImpl(recognitionMode) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            Contracts.throwIfDisposed(this.privDisposed);\r\n            yield this.implRecognizerStop();\r\n            yield this.privReco.recognize(recognitionMode, undefined, undefined);\r\n        });\r\n    }\r\n    stopContinuousRecognitionAsyncImpl() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            Contracts.throwIfDisposed(this.privDisposed);\r\n            yield this.implRecognizerStop();\r\n        });\r\n    }\r\n    implRecognizerStop() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (this.privReco) {\r\n                yield this.privReco.stopRecognizing();\r\n            }\r\n            return;\r\n        });\r\n    }\r\n    static getAuthFromProperties(properties) {\r\n        const subscriptionKey = properties.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n        const authentication = (subscriptionKey && subscriptionKey !== \"\") ?\r\n            new CognitiveSubscriptionKeyAuthentication(subscriptionKey) :\r\n            new CognitiveTokenAuthentication(() => {\r\n                const authorizationToken = properties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                return Promise.resolve(authorizationToken);\r\n            }, () => {\r\n                const authorizationToken = properties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                return Promise.resolve(authorizationToken);\r\n            });\r\n        return authentication;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=Recognizer.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { OutputFormatPropertyName, RecognitionMode, RecognizerConfig, SpeechConnectionFactory, SpeechServiceRecognizer, } from \"../common.speech/Exports\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport { OutputFormat, PropertyId, Recognizer, } from \"./Exports\";\r\n/**\r\n * Performs speech recognition from microphone, file, or other audio input streams, and gets transcribed text as result.\r\n * @class SpeechRecognizer\r\n */\r\nexport class SpeechRecognizer extends Recognizer {\r\n    /**\r\n     * SpeechRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    constructor(speechConfig, audioConfig) {\r\n        const speechConfigImpl = speechConfig;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n        Contracts.throwIfNullOrWhitespace(speechConfigImpl.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage), PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n        super(audioConfig, speechConfigImpl.properties, new SpeechConnectionFactory());\r\n        this.privDisposedRecognizer = false;\r\n    }\r\n    /**\r\n     * SpeechRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    static FromConfig(speechConfig, autoDetectSourceLanguageConfig, audioConfig) {\r\n        const speechConfigImpl = speechConfig;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\r\n        const recognizer = new SpeechRecognizer(speechConfig, audioConfig);\r\n        return recognizer;\r\n    }\r\n    /**\r\n     * Gets the endpoint id of a customized speech model that is used for speech recognition.\r\n     * @member SpeechRecognizer.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @returns {string} the endpoint id of a customized speech model that is used for speech recognition.\r\n     */\r\n    get endpointId() {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_EndpointId, \"00000000-0000-0000-0000-000000000000\");\r\n    }\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member SpeechRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    get authorizationToken() {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member SpeechRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    set authorizationToken(token) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member SpeechRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} The spoken language of recognition.\r\n     */\r\n    get speechRecognitionLanguage() {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n    /**\r\n     * Gets the output format of recognition.\r\n     * @member SpeechRecognizer.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {OutputFormat} The output format of recognition.\r\n     */\r\n    get outputFormat() {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n        if (this.properties.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) === OutputFormat[OutputFormat.Simple]) {\r\n            return OutputFormat.Simple;\r\n        }\r\n        else {\r\n            return OutputFormat.Detailed;\r\n        }\r\n    }\r\n    /**\r\n     * The collection of properties and their values defined for this SpeechRecognizer.\r\n     * @member SpeechRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechRecognizer.\r\n     */\r\n    get properties() {\r\n        return this.privProperties;\r\n    }\r\n    /**\r\n     * Starts speech recognition, and stops after the first utterance is recognized.\r\n     * The task returns the recognition text as result.\r\n     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\r\n     * so it is suitable only for single shot recognition\r\n     * like command or query. For long-running recognition, use StartContinuousRecognitionAsync() instead.\r\n     * @member SpeechRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the SpeechRecognitionResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    recognizeOnceAsync(cb, err) {\r\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Interactive), cb, err);\r\n    }\r\n    /**\r\n     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * @member SpeechRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    startContinuousRecognitionAsync(cb, err) {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * @member SpeechRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    stopContinuousRecognitionAsync(cb, err) {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n    /**\r\n     * Starts speech recognition with keyword spotting, until\r\n     * stopKeywordRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * Note: Key word spotting functionality is only available on the\r\n     * Speech Devices SDK. This functionality is currently not included in the SDK itself.\r\n     * @member SpeechRecognizer.prototype.startKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param {KeywordRecognitionModel} model The keyword recognition model that\r\n     * specifies the keyword to be recognized.\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    startKeywordRecognitionAsync(model, cb, err) {\r\n        Contracts.throwIfNull(model, \"model\");\r\n        if (!!err) {\r\n            err(\"Not yet implemented.\");\r\n        }\r\n    }\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * Note: Key word spotting functionality is only available on the\r\n     * Speech Devices SDK. This functionality is currently not included in the SDK itself.\r\n     * @member SpeechRecognizer.prototype.stopKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    stopKeywordRecognitionAsync(cb) {\r\n        if (!!cb) {\r\n            cb();\r\n        }\r\n    }\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member SpeechRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    close(cb, errorCb) {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member SpeechRecognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    dispose(disposing) {\r\n        const _super = Object.create(null, {\r\n            dispose: { get: () => super.dispose }\r\n        });\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (this.privDisposedRecognizer) {\r\n                return;\r\n            }\r\n            if (disposing) {\r\n                this.privDisposedRecognizer = true;\r\n                yield this.implRecognizerStop();\r\n            }\r\n            yield _super.dispose.call(this, disposing);\r\n        });\r\n    }\r\n    createRecognizerConfig(speechConfig) {\r\n        return new RecognizerConfig(speechConfig, this.properties);\r\n    }\r\n    createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {\r\n        const configImpl = audioConfig;\r\n        return new SpeechServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=SpeechRecognizer.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/**\r\n * Contains detailed information about why a result was canceled.\r\n * @class CancellationDetailsBase\r\n */\r\nexport class CancellationDetailsBase {\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {CancellationReason} reason - The cancellation reason.\r\n     * @param {string} errorDetails - The error details, if provided.\r\n     */\r\n    constructor(reason, errorDetails, errorCode) {\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member CancellationDetailsBase.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    get reason() {\r\n        return this.privReason;\r\n    }\r\n    /**\r\n     * In case of an unsuccessful recognition, provides details of the occurred error.\r\n     * @member CancellationDetailsBase.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    get errorDetails() {\r\n        return this.privErrorDetails;\r\n    }\r\n    /**\r\n     * The error code in case of an unsuccessful recognition.\r\n     * Added in version 1.1.0.\r\n     * @return An error code that represents the error reason.\r\n     */\r\n    get ErrorCode() {\r\n        return this.privErrorCode;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=CancellationDetailsBase.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { CancellationErrorCodePropertyName, EnumTranslation, SimpleSpeechPhrase } from \"../common.speech/Exports\";\r\nimport { CancellationDetailsBase } from \"./CancellationDetailsBase\";\r\nimport { CancellationErrorCode, CancellationReason, RecognitionResult } from \"./Exports\";\r\n/**\r\n * Contains detailed information about why a result was canceled.\r\n * @class CancellationDetails\r\n */\r\nexport class CancellationDetails extends CancellationDetailsBase {\r\n    constructor(reason, errorDetails, errorCode) {\r\n        super(reason, errorDetails, errorCode);\r\n    }\r\n    /**\r\n     * Creates an instance of CancellationDetails object for the canceled RecognitionResult.\r\n     * @member CancellationDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {RecognitionResult | SpeechSynthesisResult} result - The result that was canceled.\r\n     * @returns {CancellationDetails} The cancellation details object being created.\r\n     */\r\n    static fromResult(result) {\r\n        let reason = CancellationReason.Error;\r\n        let errorCode = CancellationErrorCode.NoError;\r\n        if (result instanceof RecognitionResult && !!result.json) {\r\n            const simpleSpeech = SimpleSpeechPhrase.fromJSON(result.json);\r\n            reason = EnumTranslation.implTranslateCancelResult(simpleSpeech.RecognitionStatus);\r\n        }\r\n        if (!!result.properties) {\r\n            errorCode = CancellationErrorCode[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError])];\r\n        }\r\n        return new CancellationDetails(reason, result.errorDetails || EnumTranslation.implTranslateErrorDetails(errorCode), errorCode);\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=CancellationDetails.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/**\r\n * Defines error code in case that CancellationReason is Error.\r\n * Added in version 1.1.0.\r\n */\r\nexport var CancellationErrorCode;\r\n(function (CancellationErrorCode) {\r\n    /**\r\n     * Indicates that no error occurred during speech recognition.\r\n     */\r\n    CancellationErrorCode[CancellationErrorCode[\"NoError\"] = 0] = \"NoError\";\r\n    /**\r\n     * Indicates an authentication error.\r\n     */\r\n    CancellationErrorCode[CancellationErrorCode[\"AuthenticationFailure\"] = 1] = \"AuthenticationFailure\";\r\n    /**\r\n     * Indicates that one or more recognition parameters are invalid.\r\n     */\r\n    CancellationErrorCode[CancellationErrorCode[\"BadRequestParameters\"] = 2] = \"BadRequestParameters\";\r\n    /**\r\n     * Indicates that the number of parallel requests exceeded the number of allowed\r\n     * concurrent transcriptions for the subscription.\r\n     */\r\n    CancellationErrorCode[CancellationErrorCode[\"TooManyRequests\"] = 3] = \"TooManyRequests\";\r\n    /**\r\n     * Indicates a connection error.\r\n     */\r\n    CancellationErrorCode[CancellationErrorCode[\"ConnectionFailure\"] = 4] = \"ConnectionFailure\";\r\n    /**\r\n     * Indicates a time-out error when waiting for response from service.\r\n     */\r\n    CancellationErrorCode[CancellationErrorCode[\"ServiceTimeout\"] = 5] = \"ServiceTimeout\";\r\n    /**\r\n     * Indicates that an error is returned by the service.\r\n     */\r\n    CancellationErrorCode[CancellationErrorCode[\"ServiceError\"] = 6] = \"ServiceError\";\r\n    /**\r\n     * Indicates an unexpected runtime error.\r\n     */\r\n    CancellationErrorCode[CancellationErrorCode[\"RuntimeError\"] = 7] = \"RuntimeError\";\r\n    /**\r\n     * Indicates an quota overrun on existing key.\r\n     */\r\n    CancellationErrorCode[CancellationErrorCode[\"Forbidden\"] = 8] = \"Forbidden\";\r\n})(CancellationErrorCode || (CancellationErrorCode = {}));\r\n\r\n//# sourceMappingURL=CancellationErrorCodes.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nexport class QueryParameterNames {\r\n}\r\nQueryParameterNames.BotId = \"botid\";\r\nQueryParameterNames.CustomSpeechDeploymentId = \"cid\";\r\nQueryParameterNames.CustomVoiceDeploymentId = \"deploymentId\";\r\nQueryParameterNames.EnableAudioLogging = \"storeAudio\";\r\nQueryParameterNames.EnableLanguageId = \"lidEnabled\";\r\nQueryParameterNames.EnableWordLevelTimestamps = \"wordLevelTimestamps\";\r\nQueryParameterNames.EndSilenceTimeoutMs = \"endSilenceTimeoutMs\";\r\nQueryParameterNames.SegmentationSilenceTimeoutMs = \"segmentationSilenceTimeoutMs\";\r\nQueryParameterNames.Format = \"format\";\r\nQueryParameterNames.InitialSilenceTimeoutMs = \"initialSilenceTimeoutMs\";\r\nQueryParameterNames.Language = \"language\";\r\nQueryParameterNames.Profanity = \"profanity\";\r\nQueryParameterNames.RequestBotStatusMessages = \"enableBotMessageStatus\";\r\nQueryParameterNames.StableIntermediateThreshold = \"stableIntermediateThreshold\";\r\nQueryParameterNames.StableTranslation = \"stableTranslation\";\r\nQueryParameterNames.TestHooks = \"testhooks\";\r\nQueryParameterNames.Postprocessing = \"postprocessing\";\r\nQueryParameterNames.CtsMeetingId = \"meetingId\";\r\nQueryParameterNames.CtsDeviceId = \"deviceId\";\r\nQueryParameterNames.CtsIsParticipant = \"isParticipant\";\r\n\r\n//# sourceMappingURL=QueryParameterNames.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { ServicePropertiesPropertyName, } from \"../common.speech/Exports\";\r\nimport { PropertyId } from \"../sdk/Exports\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames\";\r\nexport class ConnectionFactoryBase {\r\n    static getHostSuffix(region) {\r\n        if (!!region) {\r\n            if (region.toLowerCase().startsWith(\"china\")) {\r\n                return \".azure.cn\";\r\n            }\r\n            if (region.toLowerCase().startsWith(\"usgov\")) {\r\n                return \".azure.us\";\r\n            }\r\n        }\r\n        return \".microsoft.com\";\r\n    }\r\n    setCommonUrlParams(config, queryParams, endpoint) {\r\n        const propertyIdToParameterMap = new Map([\r\n            [PropertyId.Speech_SegmentationSilenceTimeoutMs, QueryParameterNames.SegmentationSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceConnection_EnableAudioLogging, QueryParameterNames.EnableAudioLogging],\r\n            [PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs, QueryParameterNames.EndSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs, QueryParameterNames.InitialSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceResponse_PostProcessingOption, QueryParameterNames.Postprocessing],\r\n            [PropertyId.SpeechServiceResponse_ProfanityOption, QueryParameterNames.Profanity],\r\n            [PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, QueryParameterNames.EnableWordLevelTimestamps],\r\n            [PropertyId.SpeechServiceResponse_StablePartialResultThreshold, QueryParameterNames.StableIntermediateThreshold],\r\n        ]);\r\n        propertyIdToParameterMap.forEach((parameterName, propertyId) => {\r\n            this.setUrlParameter(propertyId, parameterName, config, queryParams, endpoint);\r\n        });\r\n        const serviceProperties = JSON.parse(config.parameters.getProperty(ServicePropertiesPropertyName, \"{}\"));\r\n        Object.keys(serviceProperties).forEach((value) => {\r\n            queryParams[value] = serviceProperties[value];\r\n        });\r\n    }\r\n    setUrlParameter(propId, parameterName, config, queryParams, endpoint) {\r\n        const value = config.parameters.getProperty(propId, undefined);\r\n        // FIXME: The .search() check will incorrectly match parameter name anywhere in the string\r\n        //        including e.g. the path portion, or even as a substring of other query parameters\r\n        if (value && (!endpoint || endpoint.search(parameterName) === -1)) {\r\n            queryParams[parameterName] = value.toLocaleLowerCase();\r\n        }\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=ConnectionFactoryBase.js.map\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n/**\r\n * Profanity option.\r\n * Added in version 1.7.0.\r\n */\r\nexport var ProfanityOption;\r\n(function (ProfanityOption) {\r\n    ProfanityOption[ProfanityOption[\"Masked\"] = 0] = \"Masked\";\r\n    ProfanityOption[ProfanityOption[\"Removed\"] = 1] = \"Removed\";\r\n    ProfanityOption[ProfanityOption[\"Raw\"] = 2] = \"Raw\";\r\n})(ProfanityOption || (ProfanityOption = {}));\r\n\r\n//# sourceMappingURL=ProfanityOption.js.map\r\n","/* eslint-disable @typescript-eslint/no-empty-function */\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { AutoDetectSourceLanguagesOpenRangeOptionName, CognitiveSubscriptionKeyAuthentication, CognitiveTokenAuthentication, Context, OS, SpeechServiceConfig, SpeechSynthesisConnectionFactory, SynthesisAdapterBase, SynthesisRestAdapter, SynthesizerConfig, } from \"../common.speech/Exports\";\r\nimport { createNoDashGuid, marshalPromiseToCallbacks, Queue } from \"../common/Exports\";\r\nimport { AudioFileWriter } from \"./Audio/AudioFileWriter\";\r\nimport { AudioOutputFormatImpl } from \"./Audio/AudioOutputFormat\";\r\nimport { PushAudioOutputStreamImpl } from \"./Audio/AudioOutputStream\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport { AudioConfig, PropertyId, PullAudioOutputStream, PushAudioOutputStreamCallback, SpeechSynthesisOutputFormat, SynthesisVoicesResult, } from \"./Exports\";\r\n/**\r\n * Defines the class SpeechSynthesizer for text to speech.\r\n * Updated in version 1.16.0\r\n * @class SpeechSynthesizer\r\n */\r\nexport class SpeechSynthesizer {\r\n    /**\r\n     * SpeechSynthesizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the synthesizer.\r\n     */\r\n    constructor(speechConfig, audioConfig) {\r\n        const speechConfigImpl = speechConfig;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n        if (audioConfig !== null) {\r\n            if (audioConfig === undefined) {\r\n                this.audioConfig = (typeof window === \"undefined\") ? undefined : AudioConfig.fromDefaultSpeakerOutput();\r\n            }\r\n            else {\r\n                this.audioConfig = audioConfig;\r\n            }\r\n        }\r\n        this.privProperties = speechConfigImpl.properties.clone();\r\n        this.privDisposed = false;\r\n        this.privSynthesizing = false;\r\n        this.privConnectionFactory = new SpeechSynthesisConnectionFactory();\r\n        this.synthesisRequestQueue = new Queue();\r\n        this.implCommonSynthesizeSetup();\r\n    }\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member SpeechSynthesizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    get authorizationToken() {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member SpeechSynthesizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    set authorizationToken(token) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n    /**\r\n     * The collection of properties and their values defined for this SpeechSynthesizer.\r\n     * @member SpeechSynthesizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechSynthesizer.\r\n     */\r\n    get properties() {\r\n        return this.privProperties;\r\n    }\r\n    /**\r\n     * Indicates if auto detect source language is enabled\r\n     * @member SpeechSynthesizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {boolean} if auto detect source language is enabled\r\n     */\r\n    get autoDetectSourceLanguage() {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages) === AutoDetectSourceLanguagesOpenRangeOptionName;\r\n    }\r\n    /**\r\n     * SpeechSynthesizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this synthesizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the synthesizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the synthesizer\r\n     */\r\n    static FromConfig(speechConfig, autoDetectSourceLanguageConfig, audioConfig) {\r\n        const speechConfigImpl = speechConfig;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\r\n        return new SpeechSynthesizer(speechConfig, audioConfig);\r\n    }\r\n    buildSsml(text) {\r\n        const languageToDefaultVoice = {\r\n            [\"af-ZA\"]: \"af-ZA-AdriNeural\",\r\n            [\"am-ET\"]: \"am-ET-AmehaNeural\",\r\n            [\"ar-AE\"]: \"ar-AE-FatimaNeural\",\r\n            [\"ar-BH\"]: \"ar-BH-AliNeural\",\r\n            [\"ar-DZ\"]: \"ar-DZ-AminaNeural\",\r\n            [\"ar-EG\"]: \"ar-EG-SalmaNeural\",\r\n            [\"ar-IQ\"]: \"ar-IQ-BasselNeural\",\r\n            [\"ar-JO\"]: \"ar-JO-SanaNeural\",\r\n            [\"ar-KW\"]: \"ar-KW-FahedNeural\",\r\n            [\"ar-LY\"]: \"ar-LY-ImanNeural\",\r\n            [\"ar-MA\"]: \"ar-MA-JamalNeural\",\r\n            [\"ar-QA\"]: \"ar-QA-AmalNeural\",\r\n            [\"ar-SA\"]: \"ar-SA-HamedNeural\",\r\n            [\"ar-SY\"]: \"ar-SY-AmanyNeural\",\r\n            [\"ar-TN\"]: \"ar-TN-HediNeural\",\r\n            [\"ar-YE\"]: \"ar-YE-MaryamNeural\",\r\n            [\"bg-BG\"]: \"bg-BG-BorislavNeural\",\r\n            [\"bn-BD\"]: \"bn-BD-NabanitaNeural\",\r\n            [\"bn-IN\"]: \"bn-IN-BashkarNeural\",\r\n            [\"ca-ES\"]: \"ca-ES-JoanaNeural\",\r\n            [\"cs-CZ\"]: \"cs-CZ-AntoninNeural\",\r\n            [\"cy-GB\"]: \"cy-GB-AledNeural\",\r\n            [\"da-DK\"]: \"da-DK-ChristelNeural\",\r\n            [\"de-AT\"]: \"de-AT-IngridNeural\",\r\n            [\"de-CH\"]: \"de-CH-JanNeural\",\r\n            [\"de-DE\"]: \"de-DE-KatjaNeural\",\r\n            [\"el-GR\"]: \"el-GR-AthinaNeural\",\r\n            [\"en-AU\"]: \"en-AU-NatashaNeural\",\r\n            [\"en-CA\"]: \"en-CA-ClaraNeural\",\r\n            [\"en-GB\"]: \"en-GB-LibbyNeural\",\r\n            [\"en-HK\"]: \"en-HK-SamNeural\",\r\n            [\"en-IE\"]: \"en-IE-ConnorNeural\",\r\n            [\"en-IN\"]: \"en-IN-NeerjaNeural\",\r\n            [\"en-KE\"]: \"en-KE-AsiliaNeural\",\r\n            [\"en-NG\"]: \"en-NG-AbeoNeural\",\r\n            [\"en-NZ\"]: \"en-NZ-MitchellNeural\",\r\n            [\"en-PH\"]: \"en-PH-JamesNeural\",\r\n            [\"en-SG\"]: \"en-SG-LunaNeural\",\r\n            [\"en-TZ\"]: \"en-TZ-ElimuNeural\",\r\n            [\"en-US\"]: \"en-US-JennyNeural\",\r\n            [\"en-ZA\"]: \"en-ZA-LeahNeural\",\r\n            [\"es-AR\"]: \"es-AR-ElenaNeural\",\r\n            [\"es-BO\"]: \"es-BO-MarceloNeural\",\r\n            [\"es-CL\"]: \"es-CL-CatalinaNeural\",\r\n            [\"es-CO\"]: \"es-CO-GonzaloNeural\",\r\n            [\"es-CR\"]: \"es-CR-JuanNeural\",\r\n            [\"es-CU\"]: \"es-CU-BelkysNeural\",\r\n            [\"es-DO\"]: \"es-DO-EmilioNeural\",\r\n            [\"es-EC\"]: \"es-EC-AndreaNeural\",\r\n            [\"es-ES\"]: \"es-ES-AlvaroNeural\",\r\n            [\"es-GQ\"]: \"es-GQ-JavierNeural\",\r\n            [\"es-GT\"]: \"es-GT-AndresNeural\",\r\n            [\"es-HN\"]: \"es-HN-CarlosNeural\",\r\n            [\"es-MX\"]: \"es-MX-DaliaNeural\",\r\n            [\"es-NI\"]: \"es-NI-FedericoNeural\",\r\n            [\"es-PA\"]: \"es-PA-MargaritaNeural\",\r\n            [\"es-PE\"]: \"es-PE-AlexNeural\",\r\n            [\"es-PR\"]: \"es-PR-KarinaNeural\",\r\n            [\"es-PY\"]: \"es-PY-MarioNeural\",\r\n            [\"es-SV\"]: \"es-SV-LorenaNeural\",\r\n            [\"es-US\"]: \"es-US-AlonsoNeural\",\r\n            [\"es-UY\"]: \"es-UY-MateoNeural\",\r\n            [\"es-VE\"]: \"es-VE-PaolaNeural\",\r\n            [\"et-EE\"]: \"et-EE-AnuNeural\",\r\n            [\"fa-IR\"]: \"fa-IR-DilaraNeural\",\r\n            [\"fi-FI\"]: \"fi-FI-SelmaNeural\",\r\n            [\"fil-PH\"]: \"fil-PH-AngeloNeural\",\r\n            [\"fr-BE\"]: \"fr-BE-CharlineNeural\",\r\n            [\"fr-CA\"]: \"fr-CA-SylvieNeural\",\r\n            [\"fr-CH\"]: \"fr-CH-ArianeNeural\",\r\n            [\"fr-FR\"]: \"fr-FR-DeniseNeural\",\r\n            [\"ga-IE\"]: \"ga-IE-ColmNeural\",\r\n            [\"gl-ES\"]: \"gl-ES-RoiNeural\",\r\n            [\"gu-IN\"]: \"gu-IN-DhwaniNeural\",\r\n            [\"he-IL\"]: \"he-IL-AvriNeural\",\r\n            [\"hi-IN\"]: \"hi-IN-MadhurNeural\",\r\n            [\"hr-HR\"]: \"hr-HR-GabrijelaNeural\",\r\n            [\"hu-HU\"]: \"hu-HU-NoemiNeural\",\r\n            [\"id-ID\"]: \"id-ID-ArdiNeural\",\r\n            [\"is-IS\"]: \"is-IS-GudrunNeural\",\r\n            [\"it-IT\"]: \"it-IT-IsabellaNeural\",\r\n            [\"ja-JP\"]: \"ja-JP-NanamiNeural\",\r\n            [\"jv-ID\"]: \"jv-ID-DimasNeural\",\r\n            [\"kk-KZ\"]: \"kk-KZ-AigulNeural\",\r\n            [\"km-KH\"]: \"km-KH-PisethNeural\",\r\n            [\"kn-IN\"]: \"kn-IN-GaganNeural\",\r\n            [\"ko-KR\"]: \"ko-KR-SunHiNeural\",\r\n            [\"lo-LA\"]: \"lo-LA-ChanthavongNeural\",\r\n            [\"lt-LT\"]: \"lt-LT-LeonasNeural\",\r\n            [\"lv-LV\"]: \"lv-LV-EveritaNeural\",\r\n            [\"mk-MK\"]: \"mk-MK-AleksandarNeural\",\r\n            [\"ml-IN\"]: \"ml-IN-MidhunNeural\",\r\n            [\"mr-IN\"]: \"mr-IN-AarohiNeural\",\r\n            [\"ms-MY\"]: \"ms-MY-OsmanNeural\",\r\n            [\"mt-MT\"]: \"mt-MT-GraceNeural\",\r\n            [\"my-MM\"]: \"my-MM-NilarNeural\",\r\n            [\"nb-NO\"]: \"nb-NO-PernilleNeural\",\r\n            [\"nl-BE\"]: \"nl-BE-ArnaudNeural\",\r\n            [\"nl-NL\"]: \"nl-NL-ColetteNeural\",\r\n            [\"pl-PL\"]: \"pl-PL-AgnieszkaNeural\",\r\n            [\"ps-AF\"]: \"ps-AF-GulNawazNeural\",\r\n            [\"pt-BR\"]: \"pt-BR-FranciscaNeural\",\r\n            [\"pt-PT\"]: \"pt-PT-DuarteNeural\",\r\n            [\"ro-RO\"]: \"ro-RO-AlinaNeural\",\r\n            [\"ru-RU\"]: \"ru-RU-SvetlanaNeural\",\r\n            [\"si-LK\"]: \"si-LK-SameeraNeural\",\r\n            [\"sk-SK\"]: \"sk-SK-LukasNeural\",\r\n            [\"sl-SI\"]: \"sl-SI-PetraNeural\",\r\n            [\"so-SO\"]: \"so-SO-MuuseNeural\",\r\n            [\"sr-RS\"]: \"sr-RS-NicholasNeural\",\r\n            [\"su-ID\"]: \"su-ID-JajangNeural\",\r\n            [\"sv-SE\"]: \"sv-SE-SofieNeural\",\r\n            [\"sw-KE\"]: \"sw-KE-RafikiNeural\",\r\n            [\"sw-TZ\"]: \"sw-TZ-DaudiNeural\",\r\n            [\"ta-IN\"]: \"ta-IN-PallaviNeural\",\r\n            [\"ta-LK\"]: \"ta-LK-KumarNeural\",\r\n            [\"ta-SG\"]: \"ta-SG-AnbuNeural\",\r\n            [\"te-IN\"]: \"te-IN-MohanNeural\",\r\n            [\"th-TH\"]: \"th-TH-PremwadeeNeural\",\r\n            [\"tr-TR\"]: \"tr-TR-AhmetNeural\",\r\n            [\"uk-UA\"]: \"uk-UA-OstapNeural\",\r\n            [\"ur-IN\"]: \"ur-IN-GulNeural\",\r\n            [\"ur-PK\"]: \"ur-PK-AsadNeural\",\r\n            [\"uz-UZ\"]: \"uz-UZ-MadinaNeural\",\r\n            [\"vi-VN\"]: \"vi-VN-HoaiMyNeural\",\r\n            [\"zh-CN\"]: \"zh-CN-XiaoxiaoNeural\",\r\n            [\"zh-HK\"]: \"zh-HK-HiuMaanNeural\",\r\n            [\"zh-TW\"]: \"zh-TW-HsiaoChenNeural\",\r\n            [\"zu-ZA\"]: \"zu-ZA-ThandoNeural\",\r\n        };\r\n        let language = this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage, \"en-US\");\r\n        let voice = this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice, \"\");\r\n        let ssml = SpeechSynthesizer.XMLEncode(text);\r\n        if (this.autoDetectSourceLanguage) {\r\n            language = \"en-US\";\r\n        }\r\n        else {\r\n            voice = voice || languageToDefaultVoice[language];\r\n        }\r\n        if (voice) {\r\n            ssml = `<voice name='${voice}'>${ssml}</voice>`;\r\n        }\r\n        ssml = `<speak version='1.0' xmlns='http://www.w3.org/2001/10/synthesis' xmlns:mstts='http://www.w3.org/2001/mstts' xmlns:emo='http://www.w3.org/2009/10/emotionml' xml:lang='${language}'>${ssml}</speak>`;\r\n        return ssml;\r\n    }\r\n    /**\r\n     * Executes speech synthesis on plain text.\r\n     * The task returns the synthesis result.\r\n     * @member SpeechSynthesizer.prototype.speakTextAsync\r\n     * @function\r\n     * @public\r\n     * @param text - Text to be synthesized.\r\n     * @param cb - Callback that received the SpeechSynthesisResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     * @param stream - AudioOutputStream to receive the synthesized audio.\r\n     */\r\n    speakTextAsync(text, cb, err, stream) {\r\n        this.speakImpl(text, false, cb, err, stream);\r\n    }\r\n    /**\r\n     * Executes speech synthesis on SSML.\r\n     * The task returns the synthesis result.\r\n     * @member SpeechSynthesizer.prototype.speakSsmlAsync\r\n     * @function\r\n     * @public\r\n     * @param ssml - SSML to be synthesized.\r\n     * @param cb - Callback that received the SpeechSynthesisResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     * @param stream - AudioOutputStream to receive the synthesized audio.\r\n     */\r\n    speakSsmlAsync(ssml, cb, err, stream) {\r\n        this.speakImpl(ssml, true, cb, err, stream);\r\n    }\r\n    /**\r\n     * Get list of synthesis voices available.\r\n     * The task returns the synthesis voice result.\r\n     * @member SpeechSynthesizer.prototype.getVoicesAsync\r\n     * @function\r\n     * @async\r\n     * @public\r\n     * @param locale - Locale of voices in BCP-47 format; if left empty, get all available voices.\r\n     * @return {Promise<SynthesisVoicesResult>} - Promise of a SynthesisVoicesResult.\r\n     */\r\n    getVoicesAsync(locale = \"\") {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return this.getVoices(locale);\r\n        });\r\n    }\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechSynthesizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    close(cb, err) {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, err);\r\n    }\r\n    /**\r\n     * @Internal\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    get internalData() {\r\n        return this.privAdapter;\r\n    }\r\n    /**\r\n     * This method performs cleanup of resources.\r\n     * The Boolean parameter disposing indicates whether the method is called\r\n     * from Dispose (if disposing is true) or from the finalizer (if disposing is false).\r\n     * Derived classes should override this method to dispose resource if needed.\r\n     * @member SpeechSynthesizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - Flag to request disposal.\r\n     */\r\n    dispose(disposing) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (this.privDisposed) {\r\n                return;\r\n            }\r\n            if (disposing) {\r\n                if (this.privAdapter) {\r\n                    yield this.privAdapter.dispose();\r\n                }\r\n            }\r\n            this.privDisposed = true;\r\n        });\r\n    }\r\n    //\r\n    // ################################################################################################################\r\n    // IMPLEMENTATION.\r\n    // Move to independent class\r\n    // ################################################################################################################\r\n    //\r\n    createSynthesizerConfig(speechConfig) {\r\n        return new SynthesizerConfig(speechConfig, this.privProperties);\r\n    }\r\n    // Creates the synthesis adapter\r\n    createSynthesisAdapter(authentication, connectionFactory, audioConfig, synthesizerConfig) {\r\n        return new SynthesisAdapterBase(authentication, connectionFactory, synthesizerConfig, this, this.audioConfig);\r\n    }\r\n    implCommonSynthesizeSetup() {\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n        const synthesizerConfig = this.createSynthesizerConfig(new SpeechServiceConfig(new Context(new OS(osPlatform, osName, osVersion))));\r\n        const subscriptionKey = this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n        const authentication = (subscriptionKey && subscriptionKey !== \"\") ?\r\n            new CognitiveSubscriptionKeyAuthentication(subscriptionKey) :\r\n            new CognitiveTokenAuthentication(() => {\r\n                const authorizationToken = this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                return Promise.resolve(authorizationToken);\r\n            }, () => {\r\n                const authorizationToken = this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                return Promise.resolve(authorizationToken);\r\n            });\r\n        this.privAdapter = this.createSynthesisAdapter(authentication, this.privConnectionFactory, this.audioConfig, synthesizerConfig);\r\n        this.privAdapter.audioOutputFormat = AudioOutputFormatImpl.fromSpeechSynthesisOutputFormat(SpeechSynthesisOutputFormat[this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)]);\r\n        this.privRestAdapter = new SynthesisRestAdapter(synthesizerConfig, authentication);\r\n    }\r\n    speakImpl(text, IsSsml, cb, err, dataStream) {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privDisposed);\r\n            const requestId = createNoDashGuid();\r\n            let audioDestination;\r\n            if (dataStream instanceof PushAudioOutputStreamCallback) {\r\n                audioDestination = new PushAudioOutputStreamImpl(dataStream);\r\n            }\r\n            else if (dataStream instanceof PullAudioOutputStream) {\r\n                audioDestination = dataStream;\r\n            }\r\n            else if (dataStream !== undefined) {\r\n                audioDestination = new AudioFileWriter(dataStream);\r\n            }\r\n            else {\r\n                audioDestination = undefined;\r\n            }\r\n            this.synthesisRequestQueue.enqueue(new SynthesisRequest(requestId, text, IsSsml, (e) => {\r\n                this.privSynthesizing = false;\r\n                if (!!cb) {\r\n                    try {\r\n                        cb(e);\r\n                    }\r\n                    catch (e) {\r\n                        if (!!err) {\r\n                            err(e);\r\n                        }\r\n                    }\r\n                }\r\n                cb = undefined;\r\n                /* eslint-disable no-empty */\r\n                this.adapterSpeak().catch(() => { });\r\n            }, (e) => {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }, audioDestination));\r\n            /* eslint-disable no-empty-function */\r\n            this.adapterSpeak().catch(() => { });\r\n        }\r\n        catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                }\r\n                else {\r\n                    err(error);\r\n                }\r\n            }\r\n            // Destroy the synthesizer.\r\n            /* eslint-disable no-empty */\r\n            this.dispose(true).catch(() => { });\r\n        }\r\n    }\r\n    getVoices(locale) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const requestId = createNoDashGuid();\r\n            const response = yield this.privRestAdapter.getVoicesList(requestId);\r\n            if (response.ok && Array.isArray(response.json)) {\r\n                let json = response.json;\r\n                if (!!locale && locale.length > 0) {\r\n                    json = json.filter((item) => !!item.Locale && item.Locale.toLowerCase() === locale.toLowerCase());\r\n                }\r\n                return new SynthesisVoicesResult(requestId, json, undefined);\r\n            }\r\n            else {\r\n                return new SynthesisVoicesResult(requestId, undefined, `Error: ${response.status}: ${response.statusText}`);\r\n            }\r\n        });\r\n    }\r\n    adapterSpeak() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!this.privDisposed && !this.privSynthesizing) {\r\n                this.privSynthesizing = true;\r\n                const request = yield this.synthesisRequestQueue.dequeue();\r\n                return this.privAdapter.Speak(request.text, request.isSSML, request.requestId, request.cb, request.err, request.dataStream);\r\n            }\r\n        });\r\n    }\r\n    static XMLEncode(text) {\r\n        return text.replace(/&/g, \"&amp;\")\r\n            .replace(/</g, \"&lt;\")\r\n            .replace(/>/g, \"&gt;\")\r\n            .replace(/\"/g, \"&quot;\")\r\n            .replace(/'/g, \"&apos;\");\r\n    }\r\n}\r\nexport class SynthesisRequest {\r\n    constructor(requestId, text, isSSML, cb, err, dataStream) {\r\n        this.requestId = requestId;\r\n        this.text = text;\r\n        this.isSSML = isSSML;\r\n        this.cb = cb;\r\n        this.err = err;\r\n        this.dataStream = dataStream;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=SpeechSynthesizer.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/**\r\n * Base class for synthesis results\r\n * @class SynthesisResult\r\n * Added in version 1.20.0\r\n */\r\nexport class SynthesisResult {\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    constructor(resultId, reason, errorDetails, properties) {\r\n        this.privResultId = resultId;\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privProperties = properties;\r\n    }\r\n    /**\r\n     * Specifies the result identifier.\r\n     * @member SynthesisResult.prototype.resultId\r\n     * @function\r\n     * @public\r\n     * @returns {string} Specifies the result identifier.\r\n     */\r\n    get resultId() {\r\n        return this.privResultId;\r\n    }\r\n    /**\r\n     * Specifies status of the result.\r\n     * @member SynthesisResult.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {ResultReason} Specifies status of the result.\r\n     */\r\n    get reason() {\r\n        return this.privReason;\r\n    }\r\n    /**\r\n     * In case of an unsuccessful synthesis, provides details of the occurred error.\r\n     * @member SynthesisResult.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} a brief description of an error.\r\n     */\r\n    get errorDetails() {\r\n        return this.privErrorDetails;\r\n    }\r\n    /**\r\n     * The set of properties exposed in the result.\r\n     * @member SynthesisResult.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The set of properties exposed in the result.\r\n     */\r\n    get properties() {\r\n        return this.privProperties;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=SynthesisResult.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { SynthesisResult } from \"./Exports\";\r\n/**\r\n * Defines result of speech synthesis.\r\n * @class SpeechSynthesisResult\r\n * Added in version 1.11.0\r\n */\r\nexport class SpeechSynthesisResult extends SynthesisResult {\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {ArrayBuffer} audioData - The synthesized audio binary.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     * @param {number} audioDuration - The audio duration.\r\n     */\r\n    constructor(resultId, reason, audioData, errorDetails, properties, audioDuration) {\r\n        super(resultId, reason, errorDetails, properties);\r\n        this.privAudioData = audioData;\r\n        this.privAudioDuration = audioDuration;\r\n    }\r\n    /**\r\n     * The synthesized audio data\r\n     * @member SpeechSynthesisResult.prototype.audioData\r\n     * @function\r\n     * @public\r\n     * @returns {ArrayBuffer} The synthesized audio data.\r\n     */\r\n    get audioData() {\r\n        return this.privAudioData;\r\n    }\r\n    /**\r\n     * The time duration of synthesized audio, in ticks (100 nanoseconds).\r\n     * @member SpeechSynthesisResult.prototype.audioDuration\r\n     * @function\r\n     * @public\r\n     * @returns {number} The time duration of synthesized audio.\r\n     */\r\n    get audioDuration() {\r\n        return this.privAudioDuration;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=SpeechSynthesisResult.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/**\r\n * Defines contents of speech synthesis events.\r\n * @class SpeechSynthesisEventArgs\r\n * Added in version 1.11.0\r\n */\r\nexport class SpeechSynthesisEventArgs {\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {SpeechSynthesisResult} result - The speech synthesis result.\r\n     */\r\n    constructor(result) {\r\n        this.privResult = result;\r\n    }\r\n    /**\r\n     * Specifies the synthesis result.\r\n     * @member SpeechSynthesisEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechSynthesisResult} the synthesis result.\r\n     */\r\n    get result() {\r\n        return this.privResult;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=SpeechSynthesisEventArgs.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/**\r\n * Defines contents of speech synthesis word boundary event.\r\n * @class SpeechSynthesisWordBoundaryEventArgs\r\n * Added in version 1.11.0\r\n */\r\nexport class SpeechSynthesisWordBoundaryEventArgs {\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} audioOffset - The audio offset.\r\n     * @param {number} duration - The audio duration.\r\n     * @param {string} text - The text.\r\n     * @param {number} wordLength - The length of the word.\r\n     * @param {number} textOffset - The text offset.\r\n     * @param {SpeechSynthesisBoundaryType} boundaryType - The boundary type\r\n     */\r\n    constructor(audioOffset, duration, text, wordLength, textOffset, boundaryType) {\r\n        this.privAudioOffset = audioOffset;\r\n        this.privDuration = duration;\r\n        this.privText = text;\r\n        this.privWordLength = wordLength;\r\n        this.privTextOffset = textOffset;\r\n        this.privBoundaryType = boundaryType;\r\n    }\r\n    /**\r\n     * Specifies the audio offset.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.audioOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the audio offset.\r\n     */\r\n    get audioOffset() {\r\n        return this.privAudioOffset;\r\n    }\r\n    /**\r\n     * Specifies the duration, in ticks (100 nanoseconds).\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.duration\r\n     * @function\r\n     * @public\r\n     * @returns {number} Duration in 100 nanosecond increments.\r\n     */\r\n    get duration() {\r\n        return this.privDuration;\r\n    }\r\n    /**\r\n     * Specifies the text of the word boundary event.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.text\r\n     * @function\r\n     * @public\r\n     * @returns {string} the text.\r\n     */\r\n    get text() {\r\n        return this.privText;\r\n    }\r\n    /**\r\n     * Specifies the word length\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.wordLength\r\n     * @function\r\n     * @public\r\n     * @returns {number} the word length\r\n     */\r\n    get wordLength() {\r\n        return this.privWordLength;\r\n    }\r\n    /**\r\n     * Specifies the text offset.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.textOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the text offset.\r\n     */\r\n    get textOffset() {\r\n        return this.privTextOffset;\r\n    }\r\n    /**\r\n     * Specifies the boundary type.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.boundaryType\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechSynthesisBoundaryType} the boundary type.\r\n     */\r\n    get boundaryType() {\r\n        return this.privBoundaryType;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=SpeechSynthesisWordBoundaryEventArgs.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/**\r\n * Defines contents of speech synthesis bookmark event.\r\n * @class SpeechSynthesisBookmarkEventArgs\r\n * Added in version 1.16.0\r\n */\r\nexport class SpeechSynthesisBookmarkEventArgs {\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} audioOffset - The audio offset.\r\n     * @param {string} text - The bookmark text.\r\n     */\r\n    constructor(audioOffset, text) {\r\n        this.privAudioOffset = audioOffset;\r\n        this.privText = text;\r\n    }\r\n    /**\r\n     * Specifies the audio offset.\r\n     * @member SpeechSynthesisBookmarkEventArgs.prototype.audioOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the audio offset.\r\n     */\r\n    get audioOffset() {\r\n        return this.privAudioOffset;\r\n    }\r\n    /**\r\n     * Specifies the bookmark.\r\n     * @member SpeechSynthesisBookmarkEventArgs.prototype.text\r\n     * @function\r\n     * @public\r\n     * @returns {string} the bookmark text.\r\n     */\r\n    get text() {\r\n        return this.privText;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=SpeechSynthesisBookmarkEventArgs.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/**\r\n * Defines contents of speech synthesis viseme event.\r\n * @class SpeechSynthesisVisemeEventArgs\r\n * Added in version 1.16.0\r\n */\r\nexport class SpeechSynthesisVisemeEventArgs {\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} audioOffset - The audio offset.\r\n     * @param {number} visemeId - The viseme ID.\r\n     * @param {string} animation - The animation, could be in svg or other format.\r\n     */\r\n    constructor(audioOffset, visemeId, animation) {\r\n        this.privAudioOffset = audioOffset;\r\n        this.privVisemeId = visemeId;\r\n        this.privAnimation = animation;\r\n    }\r\n    /**\r\n     * Specifies the audio offset.\r\n     * @member SpeechSynthesisVisemeEventArgs.prototype.audioOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the audio offset.\r\n     */\r\n    get audioOffset() {\r\n        return this.privAudioOffset;\r\n    }\r\n    /**\r\n     * Specifies the viseme ID.\r\n     * @member SpeechSynthesisVisemeEventArgs.prototype.visemeId\r\n     * @function\r\n     * @public\r\n     * @returns {number} the viseme ID.\r\n     */\r\n    get visemeId() {\r\n        return this.privVisemeId;\r\n    }\r\n    /**\r\n     * Specifies the animation.\r\n     * @member SpeechSynthesisVisemeEventArgs.prototype.animation\r\n     * @function\r\n     * @public\r\n     * @returns {string} the animation, could be in svg or other format.\r\n     */\r\n    get animation() {\r\n        return this.privAnimation;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=SpeechSynthesisVisemeEventArgs.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { PropertyCollection, ResultReason, SynthesisResult, VoiceInfo } from \"./Exports\";\r\n/**\r\n * Defines result of speech synthesis.\r\n * @class SynthesisVoicesResult\r\n * Added in version 1.20.0\r\n */\r\nexport class SynthesisVoicesResult extends SynthesisResult {\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param requestId - result id for request.\r\n     * @param json - json payload from endpoint.\r\n     */\r\n    constructor(requestId, json, errorDetails) {\r\n        if (Array.isArray(json)) {\r\n            super(requestId, ResultReason.VoicesListRetrieved, undefined, new PropertyCollection());\r\n            this.privVoices = [];\r\n            for (const item of json) {\r\n                this.privVoices.push(new VoiceInfo(item));\r\n            }\r\n        }\r\n        else {\r\n            super(requestId, ResultReason.Canceled, errorDetails ? errorDetails : \"Error information unavailable\", new PropertyCollection());\r\n        }\r\n    }\r\n    /**\r\n     * The list of voices\r\n     * @member SynthesisVoicesResult.prototype.voices\r\n     * @function\r\n     * @public\r\n     * @returns {VoiceInfo[]} List of synthesized voices.\r\n     */\r\n    get voices() {\r\n        return this.privVoices;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=SynthesisVoicesResult.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/**\r\n * Defines the gender of synthesis voices.\r\n * Added in version 1.20.0.\r\n */\r\nexport var SynthesisVoiceGender;\r\n(function (SynthesisVoiceGender) {\r\n    /** Gender unknown */\r\n    SynthesisVoiceGender[SynthesisVoiceGender[\"Unknown\"] = 0] = \"Unknown\";\r\n    /** Female voice */\r\n    SynthesisVoiceGender[SynthesisVoiceGender[\"Female\"] = 1] = \"Female\";\r\n    /** Male voice */\r\n    SynthesisVoiceGender[SynthesisVoiceGender[\"Male\"] = 2] = \"Male\";\r\n})(SynthesisVoiceGender || (SynthesisVoiceGender = {}));\r\nexport var SynthesisVoiceType;\r\n(function (SynthesisVoiceType) {\r\n    SynthesisVoiceType[SynthesisVoiceType[\"OnlineNeural\"] = 1] = \"OnlineNeural\";\r\n    SynthesisVoiceType[SynthesisVoiceType[\"OnlineStandard\"] = 2] = \"OnlineStandard\";\r\n    SynthesisVoiceType[SynthesisVoiceType[\"OfflineNeural\"] = 3] = \"OfflineNeural\";\r\n    SynthesisVoiceType[SynthesisVoiceType[\"OfflineStandard\"] = 4] = \"OfflineStandard\";\r\n})(SynthesisVoiceType || (SynthesisVoiceType = {}));\r\n/**\r\n * Information about Speech Synthesis voice\r\n * Added in version 1.20.0.\r\n * @class VoiceInfo\r\n */\r\nexport class VoiceInfo {\r\n    constructor(json) {\r\n        this.privStyleList = [];\r\n        this.privVoicePath = \"\";\r\n        if (!!json) {\r\n            this.privName = json.Name;\r\n            this.privLocale = json.Locale;\r\n            this.privShortName = json.ShortName;\r\n            this.privLocalName = json.LocalName;\r\n            this.privVoiceType = json.VoiceType.endsWith(\"Standard\") ? SynthesisVoiceType.OnlineStandard : SynthesisVoiceType.OnlineNeural;\r\n            this.privGender = json.Gender === \"Male\" ? SynthesisVoiceGender.Male : json.Gender === \"Female\" ? SynthesisVoiceGender.Female : SynthesisVoiceGender.Unknown;\r\n            if (!!json.StyleList && Array.isArray(json.StyleList)) {\r\n                for (const style of json.StyleList) {\r\n                    this.privStyleList.push(style);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    get name() {\r\n        return this.privName;\r\n    }\r\n    get locale() {\r\n        return this.privLocale;\r\n    }\r\n    get shortName() {\r\n        return this.privShortName;\r\n    }\r\n    get localName() {\r\n        return this.privLocalName;\r\n    }\r\n    get gender() {\r\n        return this.privGender;\r\n    }\r\n    get voiceType() {\r\n        return this.privVoiceType;\r\n    }\r\n    get styleList() {\r\n        return this.privStyleList;\r\n    }\r\n    get voicePath() {\r\n        return this.privVoicePath;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=VoiceInfo.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { SynthesisAdapterBase } from \"../../common.speech/Exports\";\r\nimport { BackgroundEvent, createNoDashGuid, Events } from \"../../common/Exports\";\r\nimport { PullAudioOutputStreamImpl } from \"./AudioOutputStream\";\r\nimport { AudioFormatTag } from \"./AudioStreamFormat\";\r\nconst MediaDurationPlaceholderSeconds = 60 * 30;\r\nconst AudioFormatToMimeType = {\r\n    [AudioFormatTag.PCM]: \"audio/wav\",\r\n    [AudioFormatTag.MuLaw]: \"audio/x-wav\",\r\n    [AudioFormatTag.MP3]: \"audio/mpeg\",\r\n    [AudioFormatTag.OGG_OPUS]: \"audio/ogg\",\r\n    [AudioFormatTag.WEBM_OPUS]: \"audio/webm; codecs=opus\",\r\n    [AudioFormatTag.ALaw]: \"audio/x-wav\",\r\n    [AudioFormatTag.FLAC]: \"audio/flac\",\r\n};\r\n/**\r\n * Represents the speaker playback audio destination, which only works in browser.\r\n * Note: the SDK will try to use <a href=\"https://www.w3.org/TR/media-source/\">Media Source Extensions</a> to play audio.\r\n * Mp3 format has better supports on Microsoft Edge, Chrome and Safari (desktop), so, it's better to specify mp3 format for playback.\r\n * @class SpeakerAudioDestination\r\n * Updated in version 1.17.0\r\n */\r\nexport class SpeakerAudioDestination {\r\n    constructor(audioDestinationId) {\r\n        this.privPlaybackStarted = false;\r\n        this.privAppendingToBuffer = false;\r\n        this.privMediaSourceOpened = false;\r\n        this.privBytesReceived = 0;\r\n        this.privId = audioDestinationId ? audioDestinationId : createNoDashGuid();\r\n        this.privIsPaused = false;\r\n        this.privIsClosed = false;\r\n    }\r\n    id() {\r\n        return this.privId;\r\n    }\r\n    write(buffer, cb, err) {\r\n        if (this.privAudioBuffer !== undefined) {\r\n            this.privAudioBuffer.push(buffer);\r\n            this.updateSourceBuffer().then(() => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error) => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        }\r\n        else if (this.privAudioOutputStream !== undefined) {\r\n            this.privAudioOutputStream.write(buffer);\r\n            this.privBytesReceived += buffer.byteLength;\r\n        }\r\n    }\r\n    close(cb, err) {\r\n        this.privIsClosed = true;\r\n        if (this.privSourceBuffer !== undefined) {\r\n            this.handleSourceBufferUpdateEnd().then(() => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error) => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        }\r\n        else if (this.privAudioOutputStream !== undefined && typeof window !== \"undefined\") {\r\n            if ((this.privFormat.formatTag === AudioFormatTag.PCM || this.privFormat.formatTag === AudioFormatTag.MuLaw\r\n                || this.privFormat.formatTag === AudioFormatTag.ALaw) && this.privFormat.hasHeader === false) {\r\n                // eslint-disable-next-line no-console\r\n                console.warn(\"Play back is not supported for raw PCM, mulaw or alaw format without header.\");\r\n                if (!!this.onAudioEnd) {\r\n                    this.onAudioEnd(this);\r\n                }\r\n            }\r\n            else {\r\n                let receivedAudio = new ArrayBuffer(this.privBytesReceived);\r\n                this.privAudioOutputStream.read(receivedAudio).then(() => {\r\n                    receivedAudio = SynthesisAdapterBase.addHeader(receivedAudio, this.privFormat);\r\n                    const audioBlob = new Blob([receivedAudio], { type: AudioFormatToMimeType[this.privFormat.formatTag] });\r\n                    this.privAudio.src = window.URL.createObjectURL(audioBlob);\r\n                    this.notifyPlayback().then(() => {\r\n                        if (!!cb) {\r\n                            cb();\r\n                        }\r\n                    }, (error) => {\r\n                        if (!!err) {\r\n                            err(error);\r\n                        }\r\n                    });\r\n                }, (error) => {\r\n                    if (!!err) {\r\n                        err(error);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            // unsupported format, call onAudioEnd directly.\r\n            if (!!this.onAudioEnd) {\r\n                this.onAudioEnd(this);\r\n            }\r\n        }\r\n    }\r\n    set format(format) {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n        if (typeof (AudioContext) !== \"undefined\" || (typeof (window) !== \"undefined\" && typeof (window.webkitAudioContext) !== \"undefined\")) {\r\n            this.privFormat = format;\r\n            const mimeType = AudioFormatToMimeType[this.privFormat.formatTag];\r\n            if (mimeType === undefined) {\r\n                // eslint-disable-next-line no-console\r\n                console.warn(`Unknown mimeType for format ${AudioFormatTag[this.privFormat.formatTag]}; playback is not supported.`);\r\n            }\r\n            else if (typeof (MediaSource) !== \"undefined\" && MediaSource.isTypeSupported(mimeType)) {\r\n                this.privAudio = new Audio();\r\n                this.privAudioBuffer = [];\r\n                this.privMediaSource = new MediaSource();\r\n                this.privAudio.src = URL.createObjectURL(this.privMediaSource);\r\n                this.privAudio.load();\r\n                this.privMediaSource.onsourceopen = () => {\r\n                    this.privMediaSourceOpened = true;\r\n                    this.privMediaSource.duration = MediaDurationPlaceholderSeconds;\r\n                    this.privSourceBuffer = this.privMediaSource.addSourceBuffer(mimeType);\r\n                    this.privSourceBuffer.onupdate = () => {\r\n                        this.updateSourceBuffer().catch((reason) => {\r\n                            Events.instance.onEvent(new BackgroundEvent(reason));\r\n                        });\r\n                    };\r\n                    this.privSourceBuffer.onupdateend = () => {\r\n                        this.handleSourceBufferUpdateEnd().catch((reason) => {\r\n                            Events.instance.onEvent(new BackgroundEvent(reason));\r\n                        });\r\n                    };\r\n                    this.privSourceBuffer.onupdatestart = () => {\r\n                        this.privAppendingToBuffer = false;\r\n                    };\r\n                };\r\n                this.updateSourceBuffer().catch((reason) => {\r\n                    Events.instance.onEvent(new BackgroundEvent(reason));\r\n                });\r\n            }\r\n            else {\r\n                // eslint-disable-next-line no-console\r\n                console.warn(`Format ${AudioFormatTag[this.privFormat.formatTag]} could not be played by MSE, streaming playback is not enabled.`);\r\n                this.privAudioOutputStream = new PullAudioOutputStreamImpl();\r\n                this.privAudioOutputStream.format = this.privFormat;\r\n                this.privAudio = new Audio();\r\n            }\r\n        }\r\n    }\r\n    get volume() {\r\n        var _a, _b;\r\n        return (_b = (_a = this.privAudio) === null || _a === void 0 ? void 0 : _a.volume) !== null && _b !== void 0 ? _b : -1;\r\n    }\r\n    set volume(volume) {\r\n        if (!!this.privAudio) {\r\n            this.privAudio.volume = volume;\r\n        }\r\n    }\r\n    mute() {\r\n        if (!!this.privAudio) {\r\n            this.privAudio.muted = true;\r\n        }\r\n    }\r\n    unmute() {\r\n        if (!!this.privAudio) {\r\n            this.privAudio.muted = false;\r\n        }\r\n    }\r\n    get isClosed() {\r\n        return this.privIsClosed;\r\n    }\r\n    get currentTime() {\r\n        if (this.privAudio !== undefined) {\r\n            return this.privAudio.currentTime;\r\n        }\r\n        return -1;\r\n    }\r\n    pause() {\r\n        if (!this.privIsPaused && this.privAudio !== undefined) {\r\n            this.privAudio.pause();\r\n            this.privIsPaused = true;\r\n        }\r\n    }\r\n    resume(cb, err) {\r\n        if (this.privIsPaused && this.privAudio !== undefined) {\r\n            this.privAudio.play().then(() => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error) => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n            this.privIsPaused = false;\r\n        }\r\n    }\r\n    get internalAudio() {\r\n        return this.privAudio;\r\n    }\r\n    updateSourceBuffer() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (this.privAudioBuffer !== undefined && (this.privAudioBuffer.length > 0) && this.sourceBufferAvailable()) {\r\n                this.privAppendingToBuffer = true;\r\n                const binary = this.privAudioBuffer.shift();\r\n                try {\r\n                    this.privSourceBuffer.appendBuffer(binary);\r\n                }\r\n                catch (error) {\r\n                    this.privAudioBuffer.unshift(binary);\r\n                    // eslint-disable-next-line no-console\r\n                    console.log(\"buffer filled, pausing addition of binaries until space is made\");\r\n                    return;\r\n                }\r\n                yield this.notifyPlayback();\r\n            }\r\n            else if (this.canEndStream()) {\r\n                yield this.handleSourceBufferUpdateEnd();\r\n            }\r\n        });\r\n    }\r\n    handleSourceBufferUpdateEnd() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (this.canEndStream() && this.sourceBufferAvailable()) {\r\n                this.privMediaSource.endOfStream();\r\n                yield this.notifyPlayback();\r\n            }\r\n        });\r\n    }\r\n    notifyPlayback() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!this.privPlaybackStarted && this.privAudio !== undefined) {\r\n                this.privPlaybackStarted = true;\r\n                if (!!this.onAudioStart) {\r\n                    this.onAudioStart(this);\r\n                }\r\n                this.privAudio.onended = () => {\r\n                    if (!!this.onAudioEnd) {\r\n                        this.onAudioEnd(this);\r\n                    }\r\n                };\r\n                if (!this.privIsPaused) {\r\n                    yield this.privAudio.play();\r\n                }\r\n            }\r\n        });\r\n    }\r\n    canEndStream() {\r\n        return (this.isClosed && this.privSourceBuffer !== undefined && (this.privAudioBuffer.length === 0)\r\n            && this.privMediaSourceOpened && !this.privAppendingToBuffer && this.privMediaSource.readyState === \"open\");\r\n    }\r\n    sourceBufferAvailable() {\r\n        return (this.privSourceBuffer !== undefined && !this.privSourceBuffer.updating);\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=SpeakerAudioDestination.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/* eslint-disable max-classes-per-file */\r\nimport { EventType, PlatformEvent } from \"../common/Exports\";\r\nexport class SpeechRecognitionEvent extends PlatformEvent {\r\n    constructor(eventName, requestId, sessionId, eventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n        this.privRequestId = requestId;\r\n        this.privSessionId = sessionId;\r\n    }\r\n    get requestId() {\r\n        return this.privRequestId;\r\n    }\r\n    get sessionId() {\r\n        return this.privSessionId;\r\n    }\r\n}\r\nexport class RecognitionTriggeredEvent extends SpeechRecognitionEvent {\r\n    constructor(requestId, sessionId, audioSourceId, audioNodeId) {\r\n        super(\"RecognitionTriggeredEvent\", requestId, sessionId);\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n    }\r\n    get audioSourceId() {\r\n        return this.privAudioSourceId;\r\n    }\r\n    get audioNodeId() {\r\n        return this.privAudioNodeId;\r\n    }\r\n}\r\nexport class ListeningStartedEvent extends SpeechRecognitionEvent {\r\n    constructor(requestId, sessionId, audioSourceId, audioNodeId) {\r\n        super(\"ListeningStartedEvent\", requestId, sessionId);\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n    }\r\n    get audioSourceId() {\r\n        return this.privAudioSourceId;\r\n    }\r\n    get audioNodeId() {\r\n        return this.privAudioNodeId;\r\n    }\r\n}\r\nexport class ConnectingToServiceEvent extends SpeechRecognitionEvent {\r\n    constructor(requestId, authFetchEventid, sessionId) {\r\n        super(\"ConnectingToServiceEvent\", requestId, sessionId);\r\n        this.privAuthFetchEventid = authFetchEventid;\r\n    }\r\n    get authFetchEventid() {\r\n        return this.privAuthFetchEventid;\r\n    }\r\n}\r\nexport class RecognitionStartedEvent extends SpeechRecognitionEvent {\r\n    constructor(requestId, audioSourceId, audioNodeId, authFetchEventId, sessionId) {\r\n        super(\"RecognitionStartedEvent\", requestId, sessionId);\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n    }\r\n    get audioSourceId() {\r\n        return this.privAudioSourceId;\r\n    }\r\n    get audioNodeId() {\r\n        return this.privAudioNodeId;\r\n    }\r\n    get authFetchEventId() {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n}\r\nexport var RecognitionCompletionStatus;\r\n(function (RecognitionCompletionStatus) {\r\n    RecognitionCompletionStatus[RecognitionCompletionStatus[\"Success\"] = 0] = \"Success\";\r\n    RecognitionCompletionStatus[RecognitionCompletionStatus[\"AudioSourceError\"] = 1] = \"AudioSourceError\";\r\n    RecognitionCompletionStatus[RecognitionCompletionStatus[\"AudioSourceTimeout\"] = 2] = \"AudioSourceTimeout\";\r\n    RecognitionCompletionStatus[RecognitionCompletionStatus[\"AuthTokenFetchError\"] = 3] = \"AuthTokenFetchError\";\r\n    RecognitionCompletionStatus[RecognitionCompletionStatus[\"AuthTokenFetchTimeout\"] = 4] = \"AuthTokenFetchTimeout\";\r\n    RecognitionCompletionStatus[RecognitionCompletionStatus[\"UnAuthorized\"] = 5] = \"UnAuthorized\";\r\n    RecognitionCompletionStatus[RecognitionCompletionStatus[\"ConnectTimeout\"] = 6] = \"ConnectTimeout\";\r\n    RecognitionCompletionStatus[RecognitionCompletionStatus[\"ConnectError\"] = 7] = \"ConnectError\";\r\n    RecognitionCompletionStatus[RecognitionCompletionStatus[\"ClientRecognitionActivityTimeout\"] = 8] = \"ClientRecognitionActivityTimeout\";\r\n    RecognitionCompletionStatus[RecognitionCompletionStatus[\"UnknownError\"] = 9] = \"UnknownError\";\r\n})(RecognitionCompletionStatus || (RecognitionCompletionStatus = {}));\r\nexport class RecognitionEndedEvent extends SpeechRecognitionEvent {\r\n    constructor(requestId, audioSourceId, audioNodeId, authFetchEventId, sessionId, serviceTag, status, error) {\r\n        super(\"RecognitionEndedEvent\", requestId, sessionId, status === RecognitionCompletionStatus.Success ? EventType.Info : EventType.Error);\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n        this.privStatus = status;\r\n        this.privError = error;\r\n        this.privServiceTag = serviceTag;\r\n    }\r\n    get audioSourceId() {\r\n        return this.privAudioSourceId;\r\n    }\r\n    get audioNodeId() {\r\n        return this.privAudioNodeId;\r\n    }\r\n    get authFetchEventId() {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n    get serviceTag() {\r\n        return this.privServiceTag;\r\n    }\r\n    get status() {\r\n        return this.privStatus;\r\n    }\r\n    get error() {\r\n        return this.privError;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=RecognitionEvents.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { ArgumentNullError, ConnectionMessage } from \"../common/Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nexport class SpeechConnectionMessage extends ConnectionMessage {\r\n    constructor(messageType, path, requestId, contentType, body, streamId, additionalHeaders, id) {\r\n        if (!path) {\r\n            throw new ArgumentNullError(\"path\");\r\n        }\r\n        if (!requestId) {\r\n            throw new ArgumentNullError(\"requestId\");\r\n        }\r\n        const headers = {};\r\n        headers[HeaderNames.Path] = path;\r\n        headers[HeaderNames.RequestId] = requestId;\r\n        headers[HeaderNames.RequestTimestamp] = new Date().toISOString();\r\n        if (contentType) {\r\n            headers[HeaderNames.ContentType] = contentType;\r\n        }\r\n        if (streamId) {\r\n            headers[HeaderNames.RequestStreamId] = streamId;\r\n        }\r\n        if (additionalHeaders) {\r\n            for (const headerName in additionalHeaders) {\r\n                if (headerName) {\r\n                    headers[headerName] = additionalHeaders[headerName];\r\n                }\r\n            }\r\n        }\r\n        if (id) {\r\n            super(messageType, body, headers, id);\r\n        }\r\n        else {\r\n            super(messageType, body, headers);\r\n        }\r\n        this.privPath = path;\r\n        this.privRequestId = requestId;\r\n        this.privContentType = contentType;\r\n        this.privStreamId = streamId;\r\n        this.privAdditionalHeaders = additionalHeaders;\r\n    }\r\n    get path() {\r\n        return this.privPath;\r\n    }\r\n    get requestId() {\r\n        return this.privRequestId;\r\n    }\r\n    get contentType() {\r\n        return this.privContentType;\r\n    }\r\n    get streamId() {\r\n        return this.privStreamId;\r\n    }\r\n    get additionalHeaders() {\r\n        return this.privAdditionalHeaders;\r\n    }\r\n    static fromConnectionMessage(message) {\r\n        let path = null;\r\n        let requestId = null;\r\n        let contentType = null;\r\n        // let requestTimestamp = null;\r\n        let streamId = null;\r\n        const additionalHeaders = {};\r\n        if (message.headers) {\r\n            for (const headerName in message.headers) {\r\n                if (headerName) {\r\n                    if (headerName.toLowerCase() === HeaderNames.Path.toLowerCase()) {\r\n                        path = message.headers[headerName];\r\n                    }\r\n                    else if (headerName.toLowerCase() === HeaderNames.RequestId.toLowerCase()) {\r\n                        requestId = message.headers[headerName];\r\n                        // } else if (headerName.toLowerCase() === HeaderNames.RequestTimestamp.toLowerCase()) {\r\n                        //  requestTimestamp = message.headers[headerName];\r\n                    }\r\n                    else if (headerName.toLowerCase() === HeaderNames.ContentType.toLowerCase()) {\r\n                        contentType = message.headers[headerName];\r\n                    }\r\n                    else if (headerName.toLowerCase() === HeaderNames.RequestStreamId.toLowerCase()) {\r\n                        streamId = message.headers[headerName];\r\n                    }\r\n                    else {\r\n                        additionalHeaders[headerName] = message.headers[headerName];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return new SpeechConnectionMessage(message.messageType, path, requestId, contentType, message.body, streamId, additionalHeaders, message.id);\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=SpeechConnectionMessage.Internal.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports\";\r\nimport { ArgumentNullError, ConnectionState, createNoDashGuid, EventSource, MessageType, ServiceEvent, Timeout } from \"../common/Exports\";\r\nimport { CancellationErrorCode, CancellationReason, PropertyId, RecognitionEventArgs, SessionEventArgs, } from \"../sdk/Exports\";\r\nimport { AgentConfig, DynamicGrammarBuilder, RequestSession, SpeechContext, SpeechDetected, type } from \"./Exports\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\nexport class ServiceRecognizerBase {\r\n    constructor(authentication, connectionFactory, audioSource, recognizerConfig, recognizer) {\r\n        // A promise for a configured connection.\r\n        // Do not consume directly, call fetchConnection instead.\r\n        this.privConnectionConfigurationPromise = undefined;\r\n        // A promise for a connection, but one that has not had the speech context sent yet.\r\n        // Do not consume directly, call fetchConnection instead.\r\n        this.privConnectionPromise = undefined;\r\n        this.privSetTimeout = setTimeout;\r\n        this.privIsLiveAudio = false;\r\n        this.recognizeOverride = undefined;\r\n        this.disconnectOverride = undefined;\r\n        this.receiveMessageOverride = undefined;\r\n        this.sendPrePayloadJSONOverride = undefined;\r\n        this.postConnectImplOverride = undefined;\r\n        this.configConnectionOverride = undefined;\r\n        this.handleSpeechPhraseMessage = undefined;\r\n        this.handleSpeechHypothesisMessage = undefined;\r\n        if (!authentication) {\r\n            throw new ArgumentNullError(\"authentication\");\r\n        }\r\n        if (!connectionFactory) {\r\n            throw new ArgumentNullError(\"connectionFactory\");\r\n        }\r\n        if (!audioSource) {\r\n            throw new ArgumentNullError(\"audioSource\");\r\n        }\r\n        if (!recognizerConfig) {\r\n            throw new ArgumentNullError(\"recognizerConfig\");\r\n        }\r\n        this.privMustReportEndOfStream = false;\r\n        this.privAuthentication = authentication;\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.privAudioSource = audioSource;\r\n        this.privRecognizerConfig = recognizerConfig;\r\n        this.privIsDisposed = false;\r\n        this.privRecognizer = recognizer;\r\n        this.privRequestSession = new RequestSession(this.privAudioSource.id());\r\n        this.privConnectionEvents = new EventSource();\r\n        this.privServiceEvents = new EventSource();\r\n        this.privDynamicGrammar = new DynamicGrammarBuilder();\r\n        this.privSpeechContext = new SpeechContext(this.privDynamicGrammar);\r\n        this.privAgentConfig = new AgentConfig();\r\n        if (typeof (Blob) !== \"undefined\" && typeof (Worker) !== \"undefined\") {\r\n            this.privSetTimeout = Timeout.setTimeout;\r\n        }\r\n        this.connectionEvents.attach((connectionEvent) => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                const connectionClosedEvent = connectionEvent;\r\n                if (connectionClosedEvent.statusCode === 1003 ||\r\n                    connectionClosedEvent.statusCode === 1007 ||\r\n                    connectionClosedEvent.statusCode === 1002 ||\r\n                    connectionClosedEvent.statusCode === 4000 ||\r\n                    this.privRequestSession.numConnectionAttempts > this.privRecognizerConfig.maxRetryCount) {\r\n                    void this.cancelRecognitionLocal(CancellationReason.Error, connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure, `${connectionClosedEvent.reason} websocket error code: ${connectionClosedEvent.statusCode}`);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    get audioSource() {\r\n        return this.privAudioSource;\r\n    }\r\n    get speechContext() {\r\n        return this.privSpeechContext;\r\n    }\r\n    get dynamicGrammar() {\r\n        return this.privDynamicGrammar;\r\n    }\r\n    get agentConfig() {\r\n        return this.privAgentConfig;\r\n    }\r\n    set conversationTranslatorToken(token) {\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.ConversationTranslator_Token, token);\r\n    }\r\n    set authentication(auth) {\r\n        this.privAuthentication = this.authentication;\r\n    }\r\n    isDisposed() {\r\n        return this.privIsDisposed;\r\n    }\r\n    dispose(reason) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.privIsDisposed = true;\r\n            if (this.privConnectionConfigurationPromise !== undefined) {\r\n                try {\r\n                    const connection = yield this.privConnectionConfigurationPromise;\r\n                    yield connection.dispose(reason);\r\n                }\r\n                catch (error) {\r\n                    // The connection is in a bad state. But we're trying to kill it, so...\r\n                    return;\r\n                }\r\n            }\r\n        });\r\n    }\r\n    get connectionEvents() {\r\n        return this.privConnectionEvents;\r\n    }\r\n    get serviceEvents() {\r\n        return this.privServiceEvents;\r\n    }\r\n    get recognitionMode() {\r\n        return this.privRecognizerConfig.recognitionMode;\r\n    }\r\n    recognize(recoMode, successCallback, errorCallBack) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (this.recognizeOverride !== undefined) {\r\n                yield this.recognizeOverride(recoMode, successCallback, errorCallBack);\r\n                return;\r\n            }\r\n            // Clear the existing configuration promise to force a re-transmission of config and context.\r\n            this.privConnectionConfigurationPromise = undefined;\r\n            this.privRecognizerConfig.recognitionMode = recoMode;\r\n            this.setSpeechSegmentationTimeout();\r\n            this.privSuccessCallback = successCallback;\r\n            this.privErrorCallback = errorCallBack;\r\n            this.privRequestSession.startNewRecognition();\r\n            this.privRequestSession.listenForServiceTelemetry(this.privAudioSource.events);\r\n            // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n            const conPromise = this.connectImpl();\r\n            let audioNode;\r\n            try {\r\n                const audioStreamNode = yield this.audioSource.attach(this.privRequestSession.audioNodeId);\r\n                const format = yield this.audioSource.format;\r\n                const deviceInfo = yield this.audioSource.deviceInfo;\r\n                this.privIsLiveAudio = deviceInfo.type && deviceInfo.type === type.Microphones;\r\n                audioNode = new ReplayableAudioNode(audioStreamNode, format.avgBytesPerSec);\r\n                yield this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n                this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n            }\r\n            catch (error) {\r\n                yield this.privRequestSession.onStopRecognizing();\r\n                throw error;\r\n            }\r\n            try {\r\n                yield conPromise;\r\n            }\r\n            catch (error) {\r\n                yield this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, error);\r\n                return;\r\n            }\r\n            const sessionStartEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n            if (!!this.privRecognizer.sessionStarted) {\r\n                this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n            }\r\n            void this.receiveMessage();\r\n            const audioSendPromise = this.sendAudio(audioNode);\r\n            audioSendPromise.catch((error) => __awaiter(this, void 0, void 0, function* () {\r\n                yield this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n            }));\r\n            return;\r\n        });\r\n    }\r\n    stopRecognizing() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (this.privRequestSession.isRecognizing) {\r\n                try {\r\n                    yield this.audioSource.turnOff();\r\n                    yield this.sendFinalAudio();\r\n                    yield this.privRequestSession.onStopRecognizing();\r\n                    yield this.privRequestSession.turnCompletionPromise;\r\n                }\r\n                finally {\r\n                    yield this.privRequestSession.dispose();\r\n                }\r\n            }\r\n            return;\r\n        });\r\n    }\r\n    connect() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            yield this.connectImpl();\r\n            return Promise.resolve();\r\n        });\r\n    }\r\n    connectAsync(cb, err) {\r\n        this.connectImpl().then(() => {\r\n            try {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }\r\n            catch (e) {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }\r\n        }, (reason) => {\r\n            try {\r\n                if (!!err) {\r\n                    err(reason);\r\n                }\r\n                /* eslint-disable no-empty */\r\n            }\r\n            catch (error) {\r\n            }\r\n        });\r\n    }\r\n    disconnect() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            yield this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.NoError, \"Disconnecting\");\r\n            if (this.disconnectOverride !== undefined) {\r\n                yield this.disconnectOverride();\r\n            }\r\n            if (this.privConnectionPromise !== undefined) {\r\n                try {\r\n                    yield (yield this.privConnectionPromise).dispose();\r\n                }\r\n                catch (error) {\r\n                }\r\n            }\r\n            this.privConnectionPromise = undefined;\r\n        });\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    sendMessage(message) {\r\n        return;\r\n    }\r\n    sendNetworkMessage(path, payload) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const type = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\r\n            const contentType = typeof payload === \"string\" ? \"application/json\" : \"\";\r\n            const connection = yield this.fetchConnection();\r\n            return connection.send(new SpeechConnectionMessage(type, path, this.privRequestSession.requestId, contentType, payload));\r\n        });\r\n    }\r\n    set activityTemplate(messagePayload) {\r\n        this.privActivityTemplate = messagePayload;\r\n    }\r\n    get activityTemplate() {\r\n        return this.privActivityTemplate;\r\n    }\r\n    sendTelemetryData() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const telemetryData = this.privRequestSession.getTelemetry();\r\n            if (ServiceRecognizerBase.telemetryDataEnabled !== true ||\r\n                this.privIsDisposed ||\r\n                null === telemetryData) {\r\n                return;\r\n            }\r\n            if (!!ServiceRecognizerBase.telemetryData) {\r\n                try {\r\n                    ServiceRecognizerBase.telemetryData(telemetryData);\r\n                    /* eslint-disable no-empty */\r\n                }\r\n                catch (_a) { }\r\n            }\r\n            const connection = yield this.fetchConnection();\r\n            yield connection.send(new SpeechConnectionMessage(MessageType.Text, \"telemetry\", this.privRequestSession.requestId, \"application/json\", telemetryData));\r\n        });\r\n    }\r\n    // Cancels recognition.\r\n    cancelRecognitionLocal(cancellationReason, errorCode, error) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!!this.privRequestSession.isRecognizing) {\r\n                yield this.privRequestSession.onStopRecognizing();\r\n                this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, cancellationReason, errorCode, error);\r\n            }\r\n        });\r\n    }\r\n    receiveMessage() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                if (this.privIsDisposed) {\r\n                    // We're done.\r\n                    return;\r\n                }\r\n                let connection = yield this.fetchConnection();\r\n                const message = yield connection.read();\r\n                if (this.receiveMessageOverride !== undefined) {\r\n                    return this.receiveMessageOverride();\r\n                }\r\n                // indicates we are draining the queue and it came with no message;\r\n                if (!message) {\r\n                    if (!this.privRequestSession.isRecognizing) {\r\n                        return;\r\n                    }\r\n                    else {\r\n                        return this.receiveMessage();\r\n                    }\r\n                }\r\n                this.privServiceHasSentMessage = true;\r\n                const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n                if (connectionMessage.requestId.toLowerCase() === this.privRequestSession.requestId.toLowerCase()) {\r\n                    switch (connectionMessage.path.toLowerCase()) {\r\n                        case \"turn.start\":\r\n                            this.privMustReportEndOfStream = true;\r\n                            this.privRequestSession.onServiceTurnStartResponse();\r\n                            break;\r\n                        case \"speech.startdetected\":\r\n                            const speechStartDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\r\n                            const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);\r\n                            if (!!this.privRecognizer.speechStartDetected) {\r\n                                this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\r\n                            }\r\n                            break;\r\n                        case \"speech.enddetected\":\r\n                            let json;\r\n                            if (connectionMessage.textBody.length > 0) {\r\n                                json = connectionMessage.textBody;\r\n                            }\r\n                            else {\r\n                                // If the request was empty, the JSON returned is empty.\r\n                                json = \"{ Offset: 0 }\";\r\n                            }\r\n                            const speechStopDetected = SpeechDetected.fromJSON(json);\r\n                            // Only shrink the buffers for continuous recognition.\r\n                            // For single shot, the speech.phrase message will come after the speech.end and it should own buffer shrink.\r\n                            if (this.privRecognizerConfig.isContinuousRecognition) {\r\n                                this.privRequestSession.onServiceRecognized(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset);\r\n                            }\r\n                            const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\r\n                            if (!!this.privRecognizer.speechEndDetected) {\r\n                                this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\r\n                            }\r\n                            break;\r\n                        case \"turn.end\":\r\n                            yield this.sendTelemetryData();\r\n                            if (this.privRequestSession.isSpeechEnded && this.privMustReportEndOfStream) {\r\n                                this.privMustReportEndOfStream = false;\r\n                                yield this.cancelRecognitionLocal(CancellationReason.EndOfStream, CancellationErrorCode.NoError, undefined);\r\n                            }\r\n                            const sessionStopEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n                            yield this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition);\r\n                            if (!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded || !this.privRequestSession.isRecognizing) {\r\n                                if (!!this.privRecognizer.sessionStopped) {\r\n                                    this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\r\n                                }\r\n                                return;\r\n                            }\r\n                            else {\r\n                                connection = yield this.fetchConnection();\r\n                                yield this.sendPrePayloadJSON(connection);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            if (!(yield this.processTypeSpecificMessages(connectionMessage))) {\r\n                                // here are some messages that the derived class has not processed, dispatch them to connect class\r\n                                if (!!this.privServiceEvents) {\r\n                                    this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                                }\r\n                            }\r\n                    }\r\n                }\r\n                return this.receiveMessage();\r\n            }\r\n            catch (error) {\r\n                return null;\r\n            }\r\n        });\r\n    }\r\n    setSpeechSegmentationTimeout() {\r\n        return;\r\n    }\r\n    sendSpeechContext(connection, generateNewRequestId) {\r\n        const speechContextJson = this.speechContext.toJSON();\r\n        if (generateNewRequestId) {\r\n            this.privRequestSession.onSpeechContext();\r\n        }\r\n        if (speechContextJson) {\r\n            return connection.send(new SpeechConnectionMessage(MessageType.Text, \"speech.context\", this.privRequestSession.requestId, \"application/json\", speechContextJson));\r\n        }\r\n        return;\r\n    }\r\n    // Encapsulated for derived service recognizers that need to send additional JSON\r\n    sendPrePayloadJSON(connection, generateNewRequestId = true) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (this.sendPrePayloadJSONOverride !== undefined) {\r\n                return this.sendPrePayloadJSONOverride(connection);\r\n            }\r\n            yield this.sendSpeechContext(connection, generateNewRequestId);\r\n            yield this.sendWaveHeader(connection);\r\n            return;\r\n        });\r\n    }\r\n    sendWaveHeader(connection) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const format = yield this.audioSource.format;\r\n            // this.writeBufferToConsole(format.header);\r\n            return connection.send(new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, \"audio/x-wav\", format.header));\r\n        });\r\n    }\r\n    // Establishes a websocket connection to the end point.\r\n    connectImpl() {\r\n        if (this.privConnectionPromise !== undefined) {\r\n            return this.privConnectionPromise.then((connection) => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionPromise = undefined;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.connectImpl();\r\n                }\r\n                return this.privConnectionPromise;\r\n            }, () => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionPromise = undefined;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.connectImpl();\r\n            });\r\n        }\r\n        this.privConnectionPromise = this.retryableConnect();\r\n        // Attach an empty handler to allow the promise to run in the background while\r\n        // other startup events happen. It'll eventually be awaited on.\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        this.privConnectionPromise.catch(() => { });\r\n        if (this.postConnectImplOverride !== undefined) {\r\n            return this.postConnectImplOverride(this.privConnectionPromise);\r\n        }\r\n        return this.privConnectionPromise;\r\n    }\r\n    sendSpeechServiceConfig(connection, requestSession, SpeechServiceConfigJson) {\r\n        requestSession.onSpeechContext();\r\n        // filter out anything that is not required for the service to work.\r\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true) {\r\n            const withTelemetry = JSON.parse(SpeechServiceConfigJson);\r\n            const replacement = {\r\n                context: {\r\n                    system: withTelemetry.context.system,\r\n                },\r\n            };\r\n            SpeechServiceConfigJson = JSON.stringify(replacement);\r\n        }\r\n        if (this.privRecognizerConfig.parameters.getProperty(\"f0f5debc-f8c9-4892-ac4b-90a7ab359fd2\", \"false\").toLowerCase() === \"true\") {\r\n            const json = JSON.parse(SpeechServiceConfigJson);\r\n            json.context.DisableReferenceChannel = \"True\";\r\n            json.context.MicSpec = \"1_0_0\";\r\n            SpeechServiceConfigJson = JSON.stringify(json);\r\n        }\r\n        if (SpeechServiceConfigJson) {\r\n            return connection.send(new SpeechConnectionMessage(MessageType.Text, \"speech.config\", requestSession.requestId, \"application/json\", SpeechServiceConfigJson));\r\n        }\r\n        return;\r\n    }\r\n    fetchConnection() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (this.privConnectionConfigurationPromise !== undefined) {\r\n                return this.privConnectionConfigurationPromise.then((connection) => {\r\n                    if (connection.state() === ConnectionState.Disconnected) {\r\n                        this.privConnectionId = null;\r\n                        this.privConnectionConfigurationPromise = undefined;\r\n                        this.privServiceHasSentMessage = false;\r\n                        return this.fetchConnection();\r\n                    }\r\n                    return this.privConnectionConfigurationPromise;\r\n                }, () => {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionConfigurationPromise = undefined;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.fetchConnection();\r\n                });\r\n            }\r\n            this.privConnectionConfigurationPromise = this.configureConnection();\r\n            return yield this.privConnectionConfigurationPromise;\r\n        });\r\n    }\r\n    sendAudio(audioStreamNode) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const audioFormat = yield this.audioSource.format;\r\n            // The time we last sent data to the service.\r\n            let nextSendTime = Date.now();\r\n            // Max amount to send before we start to throttle\r\n            const fastLaneSizeMs = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-TransmitLengthBeforThrottleMs\", \"5000\");\r\n            const maxSendUnthrottledBytes = audioFormat.avgBytesPerSec / 1000 * parseInt(fastLaneSizeMs, 10);\r\n            const startRecogNumber = this.privRequestSession.recogNumber;\r\n            const readAndUploadCycle = () => __awaiter(this, void 0, void 0, function* () {\r\n                // If speech is done, stop sending audio.\r\n                if (!this.privIsDisposed &&\r\n                    !this.privRequestSession.isSpeechEnded &&\r\n                    this.privRequestSession.isRecognizing &&\r\n                    this.privRequestSession.recogNumber === startRecogNumber) {\r\n                    const connection = yield this.fetchConnection();\r\n                    const audioStreamChunk = yield audioStreamNode.read();\r\n                    // we have a new audio chunk to upload.\r\n                    if (this.privRequestSession.isSpeechEnded) {\r\n                        // If service already recognized audio end then don't send any more audio\r\n                        return;\r\n                    }\r\n                    let payload;\r\n                    let sendDelay;\r\n                    if (!audioStreamChunk || audioStreamChunk.isEnd) {\r\n                        payload = null;\r\n                        sendDelay = 0;\r\n                    }\r\n                    else {\r\n                        payload = audioStreamChunk.buffer;\r\n                        this.privRequestSession.onAudioSent(payload.byteLength);\r\n                        if (maxSendUnthrottledBytes >= this.privRequestSession.bytesSent) {\r\n                            sendDelay = 0;\r\n                        }\r\n                        else {\r\n                            sendDelay = Math.max(0, nextSendTime - Date.now());\r\n                        }\r\n                    }\r\n                    if (0 !== sendDelay) {\r\n                        yield this.delay(sendDelay);\r\n                    }\r\n                    if (payload !== null) {\r\n                        nextSendTime = Date.now() + (payload.byteLength * 1000 / (audioFormat.avgBytesPerSec * 2));\r\n                    }\r\n                    // Are we still alive?\r\n                    if (!this.privIsDisposed &&\r\n                        !this.privRequestSession.isSpeechEnded &&\r\n                        this.privRequestSession.isRecognizing &&\r\n                        this.privRequestSession.recogNumber === startRecogNumber) {\r\n                        connection.send(new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, payload)).catch(() => {\r\n                            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                            this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition).catch(() => { });\r\n                        });\r\n                        if (!(audioStreamChunk === null || audioStreamChunk === void 0 ? void 0 : audioStreamChunk.isEnd)) {\r\n                            // this.writeBufferToConsole(payload);\r\n                            // Regardless of success or failure, schedule the next upload.\r\n                            // If the underlying connection was broken, the next cycle will\r\n                            // get a new connection and re-transmit missing audio automatically.\r\n                            return readAndUploadCycle();\r\n                        }\r\n                        else {\r\n                            // the audio stream has been closed, no need to schedule next\r\n                            // read-upload cycle.\r\n                            if (!this.privIsLiveAudio) {\r\n                                this.privRequestSession.onSpeechEnded();\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            return readAndUploadCycle();\r\n        });\r\n    }\r\n    retryableConnect() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let isUnAuthorized = false;\r\n            this.privAuthFetchEventId = createNoDashGuid();\r\n            const sessionId = this.privRequestSession.sessionId;\r\n            this.privConnectionId = (sessionId !== undefined) ? sessionId : createNoDashGuid();\r\n            this.privRequestSession.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\r\n            let lastStatusCode = 0;\r\n            let lastReason = \"\";\r\n            while (this.privRequestSession.numConnectionAttempts <= this.privRecognizerConfig.maxRetryCount) {\r\n                // Get the auth information for the connection. This is a bit of overkill for the current API surface, but leaving the plumbing in place to be able to raise a developer-customer\r\n                // facing event when a connection fails to let them try and provide new auth information.\r\n                const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\r\n                const auth = yield authPromise;\r\n                yield this.privRequestSession.onAuthCompleted(false);\r\n                // Create the connection\r\n                const connection = this.privConnectionFactory.create(this.privRecognizerConfig, auth, this.privConnectionId);\r\n                // Attach the telemetry handlers.\r\n                this.privRequestSession.listenForServiceTelemetry(connection.events);\r\n                // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\r\n                // it'll stop sending events.\r\n                connection.events.attach((event) => {\r\n                    this.connectionEvents.onEvent(event);\r\n                });\r\n                const response = yield connection.open();\r\n                // 200 == everything is fine.\r\n                if (response.statusCode === 200) {\r\n                    yield this.privRequestSession.onConnectionEstablishCompleted(response.statusCode);\r\n                    return Promise.resolve(connection);\r\n                }\r\n                else if (response.statusCode === 1006) {\r\n                    isUnAuthorized = true;\r\n                }\r\n                lastStatusCode = response.statusCode;\r\n                lastReason = response.reason;\r\n                this.privRequestSession.onRetryConnection();\r\n            }\r\n            yield this.privRequestSession.onConnectionEstablishCompleted(lastStatusCode, lastReason);\r\n            return Promise.reject(`Unable to contact server. StatusCode: ${lastStatusCode}, ${this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${lastReason}`);\r\n        });\r\n    }\r\n    delay(delayMs) {\r\n        return new Promise((resolve) => this.privSetTimeout(resolve, delayMs));\r\n    }\r\n    writeBufferToConsole(buffer) {\r\n        let out = \"Buffer Size: \";\r\n        if (null === buffer) {\r\n            out += \"null\";\r\n        }\r\n        else {\r\n            const readView = new Uint8Array(buffer);\r\n            out += `${buffer.byteLength}\\r\\n`;\r\n            for (let i = 0; i < buffer.byteLength; i++) {\r\n                out += readView[i].toString(16).padStart(2, \"0\") + \" \";\r\n                if (((i + 1) % 16) === 0) {\r\n                    // eslint-disable-next-line no-console\r\n                    console.info(out);\r\n                    out = \"\";\r\n                }\r\n            }\r\n        }\r\n        // eslint-disable-next-line no-console\r\n        console.info(out);\r\n    }\r\n    sendFinalAudio() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const connection = yield this.fetchConnection();\r\n            yield connection.send(new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, null));\r\n            return;\r\n        });\r\n    }\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    configureConnection() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const connection = yield this.connectImpl();\r\n            if (this.configConnectionOverride !== undefined) {\r\n                return this.configConnectionOverride(connection);\r\n            }\r\n            yield this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize());\r\n            yield this.sendPrePayloadJSON(connection, false);\r\n            return connection;\r\n        });\r\n    }\r\n}\r\nServiceRecognizerBase.telemetryDataEnabled = true;\r\n\r\n//# sourceMappingURL=ServiceRecognizerBase.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/* eslint-disable max-classes-per-file */\r\nimport { PropertyId } from \"../sdk/Exports\";\r\nexport var RecognitionMode;\r\n(function (RecognitionMode) {\r\n    RecognitionMode[RecognitionMode[\"Interactive\"] = 0] = \"Interactive\";\r\n    RecognitionMode[RecognitionMode[\"Conversation\"] = 1] = \"Conversation\";\r\n    RecognitionMode[RecognitionMode[\"Dictation\"] = 2] = \"Dictation\";\r\n})(RecognitionMode || (RecognitionMode = {}));\r\nexport var SpeechResultFormat;\r\n(function (SpeechResultFormat) {\r\n    SpeechResultFormat[SpeechResultFormat[\"Simple\"] = 0] = \"Simple\";\r\n    SpeechResultFormat[SpeechResultFormat[\"Detailed\"] = 1] = \"Detailed\";\r\n})(SpeechResultFormat || (SpeechResultFormat = {}));\r\nexport class RecognizerConfig {\r\n    constructor(speechServiceConfig, parameters) {\r\n        this.privSpeechServiceConfig = speechServiceConfig ? speechServiceConfig : new SpeechServiceConfig(new Context(null));\r\n        this.privParameters = parameters;\r\n        this.privMaxRetryCount = parseInt(parameters.getProperty(\"SPEECH-Error-MaxRetryCount\", \"4\"), 10);\r\n        this.privLanguageIdMode = parameters.getProperty(PropertyId.SpeechServiceConnection_LanguageIdMode, undefined);\r\n    }\r\n    get parameters() {\r\n        return this.privParameters;\r\n    }\r\n    get recognitionMode() {\r\n        return this.privRecognitionMode;\r\n    }\r\n    set recognitionMode(value) {\r\n        this.privRecognitionMode = value;\r\n        this.privRecognitionActivityTimeout = value === RecognitionMode.Interactive ? 8000 : 25000;\r\n        this.privSpeechServiceConfig.Recognition = RecognitionMode[value];\r\n    }\r\n    get SpeechServiceConfig() {\r\n        return this.privSpeechServiceConfig;\r\n    }\r\n    get recognitionActivityTimeout() {\r\n        return this.privRecognitionActivityTimeout;\r\n    }\r\n    get isContinuousRecognition() {\r\n        return this.privRecognitionMode !== RecognitionMode.Interactive;\r\n    }\r\n    get languageIdMode() {\r\n        return this.privLanguageIdMode;\r\n    }\r\n    get autoDetectSourceLanguages() {\r\n        return this.parameters.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, undefined);\r\n    }\r\n    get recognitionEndpointVersion() {\r\n        return this.parameters.getProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, undefined);\r\n    }\r\n    get sourceLanguageModels() {\r\n        const models = [];\r\n        let modelsExist = false;\r\n        if (this.autoDetectSourceLanguages !== undefined) {\r\n            for (const language of this.autoDetectSourceLanguages.split(\",\")) {\r\n                const customProperty = language + PropertyId.SpeechServiceConnection_EndpointId.toString();\r\n                const modelId = this.parameters.getProperty(customProperty, undefined);\r\n                if (modelId !== undefined) {\r\n                    models.push({ language, endpoint: modelId });\r\n                    modelsExist = true;\r\n                }\r\n                else {\r\n                    models.push({ language, endpoint: \"\" });\r\n                }\r\n            }\r\n        }\r\n        return modelsExist ? models : undefined;\r\n    }\r\n    get maxRetryCount() {\r\n        return this.privMaxRetryCount;\r\n    }\r\n}\r\n// The config is serialized and sent as the Speech.Config\r\nexport class SpeechServiceConfig {\r\n    constructor(context) {\r\n        this.context = context;\r\n    }\r\n    serialize() {\r\n        return JSON.stringify(this, (key, value) => {\r\n            if (value && typeof value === \"object\") {\r\n                const replacement = {};\r\n                for (const k in value) {\r\n                    if (Object.hasOwnProperty.call(value, k)) {\r\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                        replacement[k && k.charAt(0).toLowerCase() + k.substring(1)] = value[k];\r\n                    }\r\n                }\r\n                return replacement;\r\n            }\r\n            return value;\r\n        });\r\n    }\r\n    get Context() {\r\n        return this.context;\r\n    }\r\n    get Recognition() {\r\n        return this.recognition;\r\n    }\r\n    set Recognition(value) {\r\n        this.recognition = value.toLowerCase();\r\n    }\r\n}\r\nexport class Context {\r\n    constructor(os) {\r\n        this.system = new System();\r\n        this.os = os;\r\n    }\r\n}\r\nexport class System {\r\n    constructor() {\r\n        // Note: below will be patched for official builds.\r\n        const SPEECHSDK_CLIENTSDK_VERSION = \"1.26.0\";\r\n        this.name = \"SpeechSDK\";\r\n        this.version = SPEECHSDK_CLIENTSDK_VERSION;\r\n        this.build = \"JavaScript\";\r\n        this.lang = \"JavaScript\";\r\n    }\r\n}\r\nexport class OS {\r\n    constructor(platform, name, version) {\r\n        this.platform = platform;\r\n        this.name = name;\r\n        this.version = version;\r\n    }\r\n}\r\nexport class Device {\r\n    constructor(manufacturer, model, version) {\r\n        this.manufacturer = manufacturer;\r\n        this.model = model;\r\n        this.version = version;\r\n    }\r\n}\r\nexport var connectivity;\r\n(function (connectivity) {\r\n    connectivity[\"Bluetooth\"] = \"Bluetooth\";\r\n    connectivity[\"Wired\"] = \"Wired\";\r\n    connectivity[\"WiFi\"] = \"WiFi\";\r\n    connectivity[\"Cellular\"] = \"Cellular\";\r\n    connectivity[\"InBuilt\"] = \"InBuilt\";\r\n    connectivity[\"Unknown\"] = \"Unknown\";\r\n})(connectivity || (connectivity = {}));\r\nexport var type;\r\n(function (type) {\r\n    type[\"Phone\"] = \"Phone\";\r\n    type[\"Speaker\"] = \"Speaker\";\r\n    type[\"Car\"] = \"Car\";\r\n    type[\"Headset\"] = \"Headset\";\r\n    type[\"Thermostat\"] = \"Thermostat\";\r\n    type[\"Microphones\"] = \"Microphones\";\r\n    type[\"Deskphone\"] = \"Deskphone\";\r\n    type[\"RemoteControl\"] = \"RemoteControl\";\r\n    type[\"Unknown\"] = \"Unknown\";\r\n    type[\"File\"] = \"File\";\r\n    type[\"Stream\"] = \"Stream\";\r\n})(type || (type = {}));\r\n\r\n//# sourceMappingURL=RecognizerConfig.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { ConnectionMessage, Deferred, MessageType, RawWebsocketMessage, } from \"../common/Exports\";\r\nconst CRLF = \"\\r\\n\";\r\nexport class WebsocketMessageFormatter {\r\n    toConnectionMessage(message) {\r\n        const deferral = new Deferred();\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const textMessage = message.textContent;\r\n                let headers = {};\r\n                let body = null;\r\n                if (textMessage) {\r\n                    const headerBodySplit = textMessage.split(\"\\r\\n\\r\\n\");\r\n                    if (headerBodySplit && headerBodySplit.length > 0) {\r\n                        headers = this.parseHeaders(headerBodySplit[0]);\r\n                        if (headerBodySplit.length > 1) {\r\n                            body = headerBodySplit[1];\r\n                        }\r\n                    }\r\n                }\r\n                deferral.resolve(new ConnectionMessage(message.messageType, body, headers, message.id));\r\n            }\r\n            else if (message.messageType === MessageType.Binary) {\r\n                const binaryMessage = message.binaryContent;\r\n                let headers = {};\r\n                let body = null;\r\n                if (!binaryMessage || binaryMessage.byteLength < 2) {\r\n                    throw new Error(\"Invalid binary message format. Header length missing.\");\r\n                }\r\n                const dataView = new DataView(binaryMessage);\r\n                const headerLength = dataView.getInt16(0);\r\n                if (binaryMessage.byteLength < headerLength + 2) {\r\n                    throw new Error(\"Invalid binary message format. Header content missing.\");\r\n                }\r\n                let headersString = \"\";\r\n                for (let i = 0; i < headerLength; i++) {\r\n                    headersString += String.fromCharCode((dataView).getInt8(i + 2));\r\n                }\r\n                headers = this.parseHeaders(headersString);\r\n                if (binaryMessage.byteLength > headerLength + 2) {\r\n                    body = binaryMessage.slice(2 + headerLength);\r\n                }\r\n                deferral.resolve(new ConnectionMessage(message.messageType, body, headers, message.id));\r\n            }\r\n        }\r\n        catch (e) {\r\n            deferral.reject(`Error formatting the message. Error: ${e}`);\r\n        }\r\n        return deferral.promise;\r\n    }\r\n    fromConnectionMessage(message) {\r\n        const deferral = new Deferred();\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const payload = `${this.makeHeaders(message)}${CRLF}${message.textBody ? message.textBody : \"\"}`;\r\n                deferral.resolve(new RawWebsocketMessage(MessageType.Text, payload, message.id));\r\n            }\r\n            else if (message.messageType === MessageType.Binary) {\r\n                const headersString = this.makeHeaders(message);\r\n                const content = message.binaryBody;\r\n                const headerBuffer = this.stringToArrayBuffer(headersString);\r\n                const headerInt8Array = new Int8Array(headerBuffer);\r\n                const headerLength = headerInt8Array.byteLength;\r\n                const payloadInt8Array = new Int8Array(2 + headerLength + (content ? content.byteLength : 0));\r\n                payloadInt8Array[0] = ((headerLength >> 8) & 0xff);\r\n                payloadInt8Array[1] = headerLength & 0xff;\r\n                payloadInt8Array.set(headerInt8Array, 2);\r\n                if (content) {\r\n                    const bodyInt8Array = new Int8Array(content);\r\n                    payloadInt8Array.set(bodyInt8Array, 2 + headerLength);\r\n                }\r\n                const payload = payloadInt8Array.buffer;\r\n                deferral.resolve(new RawWebsocketMessage(MessageType.Binary, payload, message.id));\r\n            }\r\n        }\r\n        catch (e) {\r\n            deferral.reject(`Error formatting the message. ${e}`);\r\n        }\r\n        return deferral.promise;\r\n    }\r\n    makeHeaders(message) {\r\n        let headersString = \"\";\r\n        if (message.headers) {\r\n            for (const header in message.headers) {\r\n                if (header) {\r\n                    headersString += `${header}: ${message.headers[header]}${CRLF}`;\r\n                }\r\n            }\r\n        }\r\n        return headersString;\r\n    }\r\n    parseHeaders(headersString) {\r\n        const headers = {};\r\n        if (headersString) {\r\n            const headerMatches = headersString.match(/[^\\r\\n]+/g);\r\n            if (headers) {\r\n                for (const header of headerMatches) {\r\n                    if (header) {\r\n                        const separatorIndex = header.indexOf(\":\");\r\n                        const headerName = separatorIndex > 0 ? header.substr(0, separatorIndex).trim().toLowerCase() : header;\r\n                        const headerValue = separatorIndex > 0 && header.length > (separatorIndex + 1) ?\r\n                            header.substr(separatorIndex + 1).trim() :\r\n                            \"\";\r\n                        headers[headerName] = headerValue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return headers;\r\n    }\r\n    stringToArrayBuffer(str) {\r\n        const buffer = new ArrayBuffer(str.length);\r\n        const view = new DataView(buffer);\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(i, str.charCodeAt(i));\r\n        }\r\n        return buffer;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=WebsocketMessageFormatter.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { ProxyInfo, WebsocketConnection, } from \"../common.browser/Exports\";\r\nimport { ForceDictationPropertyName, OutputFormatPropertyName, } from \"../common.speech/Exports\";\r\nimport { OutputFormat, PropertyId } from \"../sdk/Exports\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\r\nimport { RecognitionMode, WebsocketMessageFormatter } from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames\";\r\nexport class SpeechConnectionFactory extends ConnectionFactoryBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.interactiveRelativeUri = \"/speech/recognition/interactive/cognitiveservices/v1\";\r\n        this.conversationRelativeUri = \"/speech/recognition/conversation/cognitiveservices/v1\";\r\n        this.dictationRelativeUri = \"/speech/recognition/dictation/cognitiveservices/v1\";\r\n        this.universalUri = \"/speech/universal/v\";\r\n    }\r\n    create(config, authInfo, connectionId) {\r\n        let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix = ConnectionFactoryBase.getHostSuffix(region);\r\n        const host = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".stt.speech\" + hostSuffix);\r\n        const queryParams = {};\r\n        const endpointId = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const language = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\r\n        if (endpointId) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.CustomSpeechDeploymentId) === -1) {\r\n                queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\r\n            }\r\n        }\r\n        else if (language) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.Language) === -1) {\r\n                queryParams[QueryParameterNames.Language] = language;\r\n            }\r\n        }\r\n        if (!endpoint || endpoint.search(QueryParameterNames.Format) === -1) {\r\n            queryParams[QueryParameterNames.Format] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n        }\r\n        if (config.autoDetectSourceLanguages !== undefined) {\r\n            queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\r\n        }\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n        if (!endpoint) {\r\n            switch (config.recognitionMode) {\r\n                case RecognitionMode.Conversation:\r\n                    if (config.parameters.getProperty(ForceDictationPropertyName, \"false\") === \"true\") {\r\n                        endpoint = host + this.dictationRelativeUri;\r\n                    }\r\n                    else {\r\n                        if (config.recognitionEndpointVersion !== undefined && parseInt(config.recognitionEndpointVersion, 10) > 1) {\r\n                            endpoint = `${host}${this.universalUri}${config.recognitionEndpointVersion}`;\r\n                        }\r\n                        else {\r\n                            endpoint = host + this.conversationRelativeUri;\r\n                        }\r\n                    }\r\n                    break;\r\n                case RecognitionMode.Dictation:\r\n                    endpoint = host + this.dictationRelativeUri;\r\n                    break;\r\n                default:\r\n                    if (config.recognitionEndpointVersion !== undefined && parseInt(config.recognitionEndpointVersion, 10) > 1) {\r\n                        endpoint = `${host}${this.universalUri}${config.recognitionEndpointVersion}`;\r\n                    }\r\n                    else {\r\n                        endpoint = host + this.interactiveRelativeUri; // default is interactive\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        const headers = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n        const enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        const webSocketConnection = new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n        // Set the value of SpeechServiceConnection_Url to webSocketConnection.uri (and not to `endpoint`), since this value is the final\r\n        // URI that was used to make the connection (including query parameters).\r\n        const uri = webSocketConnection.uri;\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, uri);\r\n        return webSocketConnection;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=SpeechConnectionFactory.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { ProxyInfo, WebsocketConnection } from \"../common.browser/Exports\";\r\nimport { PropertyId } from \"../sdk/Exports\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\r\nimport { WebsocketMessageFormatter } from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames\";\r\nexport class SpeechSynthesisConnectionFactory {\r\n    constructor() {\r\n        this.synthesisUri = \"/cognitiveservices/websocket/v1\";\r\n    }\r\n    create(config, authInfo, connectionId) {\r\n        let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix = ConnectionFactoryBase.getHostSuffix(region);\r\n        const endpointId = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const hostPrefix = (endpointId === undefined) ? \"tts\" : \"voice\";\r\n        const host = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".\" + hostPrefix + \".speech\" + hostSuffix);\r\n        const queryParams = {};\r\n        if (!endpoint) {\r\n            endpoint = host + this.synthesisUri;\r\n        }\r\n        const headers = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n        if (endpointId !== undefined) {\r\n            headers[QueryParameterNames.CustomVoiceDeploymentId] = endpointId;\r\n        }\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n        const enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromParameters(config.parameters), enableCompression, connectionId);\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=SpeechSynthesisConnectionFactory.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { CancellationErrorCode, CancellationReason, ResultReason } from \"../sdk/Exports\";\r\nimport { RecognitionStatus } from \"./Exports\";\r\nexport class EnumTranslation {\r\n    static implTranslateRecognitionResult(recognitionStatus) {\r\n        let reason = ResultReason.Canceled;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Success:\r\n                reason = ResultReason.RecognizedSpeech;\r\n                break;\r\n            case RecognitionStatus.NoMatch:\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n            case RecognitionStatus.BabbleTimeout:\r\n            case RecognitionStatus.EndOfDictation:\r\n                reason = ResultReason.NoMatch;\r\n                break;\r\n            case RecognitionStatus.Error:\r\n            case RecognitionStatus.BadRequest:\r\n            case RecognitionStatus.Forbidden:\r\n            default:\r\n                reason = ResultReason.Canceled;\r\n                break;\r\n        }\r\n        return reason;\r\n    }\r\n    static implTranslateCancelResult(recognitionStatus) {\r\n        let reason = CancellationReason.EndOfStream;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Success:\r\n            case RecognitionStatus.EndOfDictation:\r\n            case RecognitionStatus.NoMatch:\r\n                reason = CancellationReason.EndOfStream;\r\n                break;\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n            case RecognitionStatus.BabbleTimeout:\r\n            case RecognitionStatus.Error:\r\n            case RecognitionStatus.BadRequest:\r\n            case RecognitionStatus.Forbidden:\r\n            default:\r\n                reason = CancellationReason.Error;\r\n                break;\r\n        }\r\n        return reason;\r\n    }\r\n    static implTranslateCancelErrorCode(recognitionStatus) {\r\n        let reason = CancellationErrorCode.NoError;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Error:\r\n                reason = CancellationErrorCode.ServiceError;\r\n                break;\r\n            case RecognitionStatus.TooManyRequests:\r\n                reason = CancellationErrorCode.TooManyRequests;\r\n                break;\r\n            case RecognitionStatus.BadRequest:\r\n                reason = CancellationErrorCode.BadRequestParameters;\r\n                break;\r\n            case RecognitionStatus.Forbidden:\r\n                reason = CancellationErrorCode.Forbidden;\r\n                break;\r\n            default:\r\n                reason = CancellationErrorCode.NoError;\r\n                break;\r\n        }\r\n        return reason;\r\n    }\r\n    static implTranslateErrorDetails(cancellationErrorCode) {\r\n        let errorDetails = \"The speech service encountered an internal error and could not continue.\";\r\n        switch (cancellationErrorCode) {\r\n            case CancellationErrorCode.Forbidden:\r\n                errorDetails = \"The recognizer is using a free subscription that ran out of quota.\";\r\n                break;\r\n            case CancellationErrorCode.BadRequestParameters:\r\n                errorDetails = \"Invalid parameter or unsupported audio format in the request.\";\r\n                break;\r\n            case CancellationErrorCode.TooManyRequests:\r\n                errorDetails = \"The number of parallel requests exceeded the number of allowed concurrent transcriptions.\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return errorDetails;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=EnumTranslation.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/**\r\n * @class SynthesisStatus\r\n * @private\r\n */\r\nexport var SynthesisStatus;\r\n(function (SynthesisStatus) {\r\n    /**\r\n     * The response contains valid audio data.\r\n     * @member SynthesisStatus.Success\r\n     */\r\n    SynthesisStatus[SynthesisStatus[\"Success\"] = 0] = \"Success\";\r\n    /**\r\n     * Indicates the end of audio data. No valid audio data is included in the message.\r\n     * @member SynthesisStatus.SynthesisEnd\r\n     */\r\n    SynthesisStatus[SynthesisStatus[\"SynthesisEnd\"] = 1] = \"SynthesisEnd\";\r\n    /**\r\n     * Indicates an error occurred during synthesis data processing.\r\n     * @member SynthesisStatus.Error\r\n     */\r\n    SynthesisStatus[SynthesisStatus[\"Error\"] = 2] = \"Error\";\r\n})(SynthesisStatus || (SynthesisStatus = {}));\r\nexport var RecognitionStatus;\r\n(function (RecognitionStatus) {\r\n    RecognitionStatus[RecognitionStatus[\"Success\"] = 0] = \"Success\";\r\n    RecognitionStatus[RecognitionStatus[\"NoMatch\"] = 1] = \"NoMatch\";\r\n    RecognitionStatus[RecognitionStatus[\"InitialSilenceTimeout\"] = 2] = \"InitialSilenceTimeout\";\r\n    RecognitionStatus[RecognitionStatus[\"BabbleTimeout\"] = 3] = \"BabbleTimeout\";\r\n    RecognitionStatus[RecognitionStatus[\"Error\"] = 4] = \"Error\";\r\n    RecognitionStatus[RecognitionStatus[\"EndOfDictation\"] = 5] = \"EndOfDictation\";\r\n    RecognitionStatus[RecognitionStatus[\"TooManyRequests\"] = 6] = \"TooManyRequests\";\r\n    RecognitionStatus[RecognitionStatus[\"BadRequest\"] = 7] = \"BadRequest\";\r\n    RecognitionStatus[RecognitionStatus[\"Forbidden\"] = 8] = \"Forbidden\";\r\n})(RecognitionStatus || (RecognitionStatus = {}));\r\n\r\n//# sourceMappingURL=Enums.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nexport class SpeechDetected {\r\n    constructor(json) {\r\n        this.privSpeechStartDetected = JSON.parse(json);\r\n    }\r\n    static fromJSON(json) {\r\n        return new SpeechDetected(json);\r\n    }\r\n    get Offset() {\r\n        return this.privSpeechStartDetected.Offset;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=SpeechDetected.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nexport class SpeechHypothesis {\r\n    constructor(json) {\r\n        this.privSpeechHypothesis = JSON.parse(json);\r\n    }\r\n    static fromJSON(json) {\r\n        return new SpeechHypothesis(json);\r\n    }\r\n    get Text() {\r\n        return this.privSpeechHypothesis.Text;\r\n    }\r\n    get Offset() {\r\n        return this.privSpeechHypothesis.Offset;\r\n    }\r\n    get Duration() {\r\n        return this.privSpeechHypothesis.Duration;\r\n    }\r\n    get Language() {\r\n        return this.privSpeechHypothesis.PrimaryLanguage === undefined ? undefined : this.privSpeechHypothesis.PrimaryLanguage.Language;\r\n    }\r\n    get LanguageDetectionConfidence() {\r\n        return this.privSpeechHypothesis.PrimaryLanguage === undefined ? undefined : this.privSpeechHypothesis.PrimaryLanguage.Confidence;\r\n    }\r\n    get SpeakerId() {\r\n        return this.privSpeechHypothesis.SpeakerId;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=SpeechHypothesis.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { CancellationErrorCode, OutputFormat, PropertyCollection, PropertyId, ResultReason, SpeechRecognitionCanceledEventArgs, SpeechRecognitionEventArgs, SpeechRecognitionResult, } from \"../sdk/Exports\";\r\nimport { CancellationErrorCodePropertyName, DetailedSpeechPhrase, EnumTranslation, OutputFormatPropertyName, RecognitionStatus, ServiceRecognizerBase, SimpleSpeechPhrase, SpeechHypothesis, } from \"./Exports\";\r\nimport { RecognitionMode } from \"./RecognizerConfig\";\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class SpeechServiceRecognizer extends ServiceRecognizerBase {\r\n    constructor(authentication, connectionFactory, audioSource, recognizerConfig, speechRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, speechRecognizer);\r\n        this.privSpeechRecognizer = speechRecognizer;\r\n        const phraseDetection = {};\r\n        if (recognizerConfig.autoDetectSourceLanguages !== undefined) {\r\n            const sourceLanguages = recognizerConfig.autoDetectSourceLanguages.split(\",\");\r\n            let speechContextLidMode;\r\n            if (recognizerConfig.languageIdMode === \"Continuous\") {\r\n                speechContextLidMode = \"DetectContinuous\";\r\n            }\r\n            else { // recognizerConfig.languageIdMode === \"AtStart\"\r\n                speechContextLidMode = \"DetectAtAudioStart\";\r\n            }\r\n            this.privSpeechContext.setSection(\"languageId\", {\r\n                Priority: \"PrioritizeLatency\",\r\n                languages: sourceLanguages,\r\n                mode: speechContextLidMode,\r\n                onSuccess: { action: \"Recognize\" },\r\n                onUnknown: { action: \"None\" }\r\n            });\r\n            this.privSpeechContext.setSection(\"phraseOutput\", {\r\n                interimResults: {\r\n                    resultType: \"Auto\"\r\n                },\r\n                phraseResults: {\r\n                    resultType: \"Always\"\r\n                }\r\n            });\r\n            const customModels = recognizerConfig.sourceLanguageModels;\r\n            if (customModels !== undefined) {\r\n                phraseDetection.customModels = customModels;\r\n                phraseDetection.onInterim = { action: \"None\" };\r\n                phraseDetection.onSuccess = { action: \"None\" };\r\n            }\r\n        }\r\n        const isEmpty = (obj) => {\r\n            // eslint-disable-next-line guard-for-in, brace-style\r\n            for (const x in obj) {\r\n                return false;\r\n            }\r\n            return true;\r\n        };\r\n        if (!isEmpty(phraseDetection)) {\r\n            this.privSpeechContext.setSection(\"phraseDetection\", phraseDetection);\r\n        }\r\n    }\r\n    setSpeechSegmentationTimeout() {\r\n        const speechSegmentationTimeout = this.privRecognizerConfig.parameters.getProperty(PropertyId.Speech_SegmentationSilenceTimeoutMs, undefined);\r\n        if (speechSegmentationTimeout !== undefined) {\r\n            const mode = this.recognitionMode === RecognitionMode.Conversation ? \"CONVERSATION\" :\r\n                this.recognitionMode === RecognitionMode.Dictation ? \"DICTATION\" : \"INTERACTIVE\";\r\n            const segmentationSilenceTimeoutMs = parseInt(speechSegmentationTimeout, 10);\r\n            const phraseDetection = this.privSpeechContext.getSection(\"phraseDetection\");\r\n            phraseDetection.mode = mode;\r\n            phraseDetection[mode] = {\r\n                segmentation: {\r\n                    mode: \"Custom\",\r\n                    segmentationSilenceTimeoutMs\r\n                }\r\n            };\r\n            this.privSpeechContext.setSection(\"phraseDetection\", phraseDetection);\r\n        }\r\n    }\r\n    processTypeSpecificMessages(connectionMessage) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let result;\r\n            const resultProps = new PropertyCollection();\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n            let processed = false;\r\n            switch (connectionMessage.path.toLowerCase()) {\r\n                case \"speech.hypothesis\":\r\n                case \"speech.fragment\":\r\n                    const hypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n                    const offset = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n                    result = new SpeechRecognitionResult(this.privRequestSession.requestId, ResultReason.RecognizingSpeech, hypothesis.Text, hypothesis.Duration, offset, hypothesis.Language, hypothesis.LanguageDetectionConfidence, undefined, // Speaker Id\r\n                    undefined, connectionMessage.textBody, resultProps);\r\n                    this.privRequestSession.onHypothesis(offset);\r\n                    const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n                    if (!!this.privSpeechRecognizer.recognizing) {\r\n                        try {\r\n                            this.privSpeechRecognizer.recognizing(this.privSpeechRecognizer, ev);\r\n                            /* eslint-disable no-empty */\r\n                        }\r\n                        catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n                    processed = true;\r\n                    break;\r\n                case \"speech.phrase\":\r\n                    const simple = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                    const resultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\r\n                    this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\r\n                    if (ResultReason.Canceled === resultReason) {\r\n                        const cancelReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\r\n                        const cancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus);\r\n                        yield this.cancelRecognitionLocal(cancelReason, cancellationErrorCode, EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n                    }\r\n                    else {\r\n                        if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                            if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                                result = new SpeechRecognitionResult(this.privRequestSession.requestId, resultReason, simple.DisplayText, simple.Duration, simple.Offset + this.privRequestSession.currentTurnAudioOffset, simple.Language, simple.LanguageDetectionConfidence, undefined, // Speaker Id\r\n                                undefined, connectionMessage.textBody, resultProps);\r\n                            }\r\n                            else {\r\n                                const detailed = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                                const totalOffset = detailed.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n                                const offsetCorrectedJson = detailed.getJsonWithCorrectedOffsets(totalOffset);\r\n                                result = new SpeechRecognitionResult(this.privRequestSession.requestId, resultReason, detailed.RecognitionStatus === RecognitionStatus.Success ? detailed.NBest[0].Display : undefined, detailed.Duration, totalOffset, detailed.Language, detailed.LanguageDetectionConfidence, undefined, // Speaker Id\r\n                                undefined, offsetCorrectedJson, resultProps);\r\n                            }\r\n                            const event = new SpeechRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n                            if (!!this.privSpeechRecognizer.recognized) {\r\n                                try {\r\n                                    this.privSpeechRecognizer.recognized(this.privSpeechRecognizer, event);\r\n                                    /* eslint-disable no-empty */\r\n                                }\r\n                                catch (error) {\r\n                                    // Not going to let errors in the event handler\r\n                                    // trip things up.\r\n                                }\r\n                            }\r\n                        }\r\n                        if (!!this.privSuccessCallback) {\r\n                            try {\r\n                                this.privSuccessCallback(result);\r\n                            }\r\n                            catch (e) {\r\n                                if (!!this.privErrorCallback) {\r\n                                    this.privErrorCallback(e);\r\n                                }\r\n                            }\r\n                            // Only invoke the call back once.\r\n                            // and if it's successful don't invoke the\r\n                            // error after that.\r\n                            this.privSuccessCallback = undefined;\r\n                            this.privErrorCallback = undefined;\r\n                        }\r\n                    }\r\n                    processed = true;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            return processed;\r\n        });\r\n    }\r\n    // Cancels recognition.\r\n    cancelRecognition(sessionId, requestId, cancellationReason, errorCode, error) {\r\n        const properties = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n        if (!!this.privSpeechRecognizer.canceled) {\r\n            const cancelEvent = new SpeechRecognitionCanceledEventArgs(cancellationReason, error, errorCode, undefined, sessionId);\r\n            try {\r\n                this.privSpeechRecognizer.canceled(this.privSpeechRecognizer, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            }\r\n            catch (_a) { }\r\n        }\r\n        if (!!this.privSuccessCallback) {\r\n            const result = new SpeechRecognitionResult(requestId, ResultReason.Canceled, undefined, // Text\r\n            undefined, // Duration\r\n            undefined, // Offset\r\n            undefined, // Language\r\n            undefined, // Language Detection Confidence\r\n            undefined, // Speaker Id\r\n            error, undefined, // Json\r\n            properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* eslint-disable no-empty */\r\n            }\r\n            catch (_b) { }\r\n        }\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=SpeechServiceRecognizer.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { RecognitionStatus } from \"../Exports\";\r\nexport class DetailedSpeechPhrase {\r\n    constructor(json) {\r\n        this.privDetailedSpeechPhrase = JSON.parse(json);\r\n        this.privDetailedSpeechPhrase.RecognitionStatus = RecognitionStatus[this.privDetailedSpeechPhrase.RecognitionStatus];\r\n    }\r\n    static fromJSON(json) {\r\n        return new DetailedSpeechPhrase(json);\r\n    }\r\n    getJsonWithCorrectedOffsets(baseOffset) {\r\n        if (!!this.privDetailedSpeechPhrase.NBest) {\r\n            let firstWordOffset;\r\n            for (const phrase of this.privDetailedSpeechPhrase.NBest) {\r\n                if (!!phrase.Words && !!phrase.Words[0]) {\r\n                    firstWordOffset = phrase.Words[0].Offset;\r\n                    break;\r\n                }\r\n            }\r\n            if (!!firstWordOffset && firstWordOffset < baseOffset) {\r\n                const offset = baseOffset - firstWordOffset;\r\n                for (const details of this.privDetailedSpeechPhrase.NBest) {\r\n                    if (!!details.Words) {\r\n                        for (const word of details.Words) {\r\n                            word.Offset += offset;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return JSON.stringify(this.privDetailedSpeechPhrase);\r\n    }\r\n    get RecognitionStatus() {\r\n        return this.privDetailedSpeechPhrase.RecognitionStatus;\r\n    }\r\n    get NBest() {\r\n        return this.privDetailedSpeechPhrase.NBest;\r\n    }\r\n    get Duration() {\r\n        return this.privDetailedSpeechPhrase.Duration;\r\n    }\r\n    get Offset() {\r\n        return this.privDetailedSpeechPhrase.Offset;\r\n    }\r\n    get Language() {\r\n        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Language;\r\n    }\r\n    get LanguageDetectionConfidence() {\r\n        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Confidence;\r\n    }\r\n    get Text() {\r\n        if (!!this.privDetailedSpeechPhrase.NBest && this.privDetailedSpeechPhrase.NBest[0]) {\r\n            return this.privDetailedSpeechPhrase.NBest[0].Display || this.privDetailedSpeechPhrase.NBest[0].DisplayText;\r\n        }\r\n        return this.privDetailedSpeechPhrase.DisplayText;\r\n    }\r\n    get SpeakerId() {\r\n        return this.privDetailedSpeechPhrase.SpeakerId;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=DetailedSpeechPhrase.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { RecognitionStatus } from \"../Exports\";\r\nexport class SimpleSpeechPhrase {\r\n    constructor(json) {\r\n        this.privSimpleSpeechPhrase = JSON.parse(json);\r\n        this.privSimpleSpeechPhrase.RecognitionStatus = RecognitionStatus[this.privSimpleSpeechPhrase.RecognitionStatus];\r\n    }\r\n    static fromJSON(json) {\r\n        return new SimpleSpeechPhrase(json);\r\n    }\r\n    get RecognitionStatus() {\r\n        return this.privSimpleSpeechPhrase.RecognitionStatus;\r\n    }\r\n    get DisplayText() {\r\n        return this.privSimpleSpeechPhrase.DisplayText;\r\n    }\r\n    get Offset() {\r\n        return this.privSimpleSpeechPhrase.Offset;\r\n    }\r\n    get Duration() {\r\n        return this.privSimpleSpeechPhrase.Duration;\r\n    }\r\n    get Language() {\r\n        return this.privSimpleSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privSimpleSpeechPhrase.PrimaryLanguage.Language;\r\n    }\r\n    get LanguageDetectionConfidence() {\r\n        return this.privSimpleSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privSimpleSpeechPhrase.PrimaryLanguage.Confidence;\r\n    }\r\n    get SpeakerId() {\r\n        return this.privSimpleSpeechPhrase.SpeakerId;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=SimpleSpeechPhrase.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/* eslint-disable max-classes-per-file */\r\nimport { AudioSourceErrorEvent, AudioStreamNodeAttachedEvent, AudioStreamNodeAttachingEvent, AudioStreamNodeDetachedEvent, AudioStreamNodeErrorEvent, ConnectionEstablishedEvent, ConnectionEstablishErrorEvent, ConnectionMessageReceivedEvent, ConnectionStartEvent, } from \"../common/Exports\";\r\nimport { ConnectingToServiceEvent, RecognitionTriggeredEvent } from \"./RecognitionEvents\";\r\nexport class ServiceTelemetryListener {\r\n    constructor(requestId, audioSourceId, audioNodeId) {\r\n        this.privIsDisposed = false;\r\n        this.privListeningTriggerMetric = null;\r\n        this.privMicMetric = null;\r\n        this.privConnectionEstablishMetric = null;\r\n        this.privRequestId = requestId;\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n        this.privReceivedMessages = {};\r\n        this.privPhraseLatencies = [];\r\n        this.privHypothesisLatencies = [];\r\n    }\r\n    phraseReceived(audioReceivedTime) {\r\n        if (audioReceivedTime > 0) { // 0 indicates the time is unknown. Drop it.\r\n            this.privPhraseLatencies.push(Date.now() - audioReceivedTime);\r\n        }\r\n    }\r\n    hypothesisReceived(audioReceivedTime) {\r\n        if (audioReceivedTime > 0) { // 0 indicates the time is unknown. Drop it.\r\n            this.privHypothesisLatencies.push(Date.now() - audioReceivedTime);\r\n        }\r\n    }\r\n    onEvent(e) {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n        if (e instanceof RecognitionTriggeredEvent && e.requestId === this.privRequestId) {\r\n            this.privListeningTriggerMetric = {\r\n                End: e.eventTime,\r\n                Name: \"ListeningTrigger\",\r\n                Start: e.eventTime,\r\n            };\r\n        }\r\n        if (e instanceof AudioStreamNodeAttachingEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            this.privMicStartTime = e.eventTime;\r\n        }\r\n        if (e instanceof AudioStreamNodeAttachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            this.privMicStartTime = e.eventTime;\r\n        }\r\n        if (e instanceof AudioSourceErrorEvent && e.audioSourceId === this.privAudioSourceId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Error: e.error,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n        if (e instanceof AudioStreamNodeErrorEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Error: e.error,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n        if (e instanceof AudioStreamNodeDetachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n        if (e instanceof ConnectingToServiceEvent && e.requestId === this.privRequestId) {\r\n            this.privConnectionId = e.sessionId;\r\n        }\r\n        if (e instanceof ConnectionStartEvent && e.connectionId === this.privConnectionId) {\r\n            this.privConnectionStartTime = e.eventTime;\r\n        }\r\n        if (e instanceof ConnectionEstablishedEvent && e.connectionId === this.privConnectionId) {\r\n            if (!this.privConnectionEstablishMetric) {\r\n                this.privConnectionEstablishMetric = {\r\n                    End: e.eventTime,\r\n                    Id: this.privConnectionId,\r\n                    Name: \"Connection\",\r\n                    Start: this.privConnectionStartTime,\r\n                };\r\n            }\r\n        }\r\n        if (e instanceof ConnectionEstablishErrorEvent && e.connectionId === this.privConnectionId) {\r\n            if (!this.privConnectionEstablishMetric) {\r\n                this.privConnectionEstablishMetric = {\r\n                    End: e.eventTime,\r\n                    Error: this.getConnectionError(e.statusCode),\r\n                    Id: this.privConnectionId,\r\n                    Name: \"Connection\",\r\n                    Start: this.privConnectionStartTime,\r\n                };\r\n            }\r\n        }\r\n        if (e instanceof ConnectionMessageReceivedEvent && e.connectionId === this.privConnectionId) {\r\n            if (e.message && e.message.headers && e.message.headers.path) {\r\n                if (!this.privReceivedMessages[e.message.headers.path]) {\r\n                    this.privReceivedMessages[e.message.headers.path] = new Array();\r\n                }\r\n                const maxMessagesToSend = 50;\r\n                if (this.privReceivedMessages[e.message.headers.path].length < maxMessagesToSend) {\r\n                    this.privReceivedMessages[e.message.headers.path].push(e.networkReceivedTime);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getTelemetry() {\r\n        const metrics = new Array();\r\n        if (this.privListeningTriggerMetric) {\r\n            metrics.push(this.privListeningTriggerMetric);\r\n        }\r\n        if (this.privMicMetric) {\r\n            metrics.push(this.privMicMetric);\r\n        }\r\n        if (this.privConnectionEstablishMetric) {\r\n            metrics.push(this.privConnectionEstablishMetric);\r\n        }\r\n        if (this.privPhraseLatencies.length > 0) {\r\n            metrics.push({\r\n                PhraseLatencyMs: this.privPhraseLatencies,\r\n            });\r\n        }\r\n        if (this.privHypothesisLatencies.length > 0) {\r\n            metrics.push({\r\n                FirstHypothesisLatencyMs: this.privHypothesisLatencies,\r\n            });\r\n        }\r\n        const telemetry = {\r\n            Metrics: metrics,\r\n            ReceivedMessages: this.privReceivedMessages,\r\n        };\r\n        const json = JSON.stringify(telemetry);\r\n        // We dont want to send the same telemetry again. So clean those out.\r\n        this.privReceivedMessages = {};\r\n        this.privListeningTriggerMetric = null;\r\n        this.privMicMetric = null;\r\n        this.privConnectionEstablishMetric = null;\r\n        this.privPhraseLatencies = [];\r\n        this.privHypothesisLatencies = [];\r\n        return json;\r\n    }\r\n    // Determines if there are any telemetry events to send to the service.\r\n    get hasTelemetry() {\r\n        return (Object.keys(this.privReceivedMessages).length !== 0 ||\r\n            this.privListeningTriggerMetric !== null ||\r\n            this.privMicMetric !== null ||\r\n            this.privConnectionEstablishMetric !== null ||\r\n            this.privPhraseLatencies.length !== 0 ||\r\n            this.privHypothesisLatencies.length !== 0);\r\n    }\r\n    dispose() {\r\n        this.privIsDisposed = true;\r\n    }\r\n    getConnectionError(statusCode) {\r\n        /*\r\n        -- Websocket status codes --\r\n        NormalClosure = 1000,\r\n        EndpointUnavailable = 1001,\r\n        ProtocolError = 1002,\r\n        InvalidMessageType = 1003,\r\n        Empty = 1005,\r\n        InvalidPayloadData = 1007,\r\n        PolicyViolation = 1008,\r\n        MessageTooBig = 1009,\r\n        MandatoryExtension = 1010,\r\n        InternalServerError = 1011\r\n        */\r\n        switch (statusCode) {\r\n            case 400:\r\n            case 1002:\r\n            case 1003:\r\n            case 1005:\r\n            case 1007:\r\n            case 1008:\r\n            case 1009: return \"BadRequest\";\r\n            case 401: return \"Unauthorized\";\r\n            case 403: return \"Forbidden\";\r\n            case 503:\r\n            case 1001: return \"ServerUnavailable\";\r\n            case 500:\r\n            case 1011: return \"ServerError\";\r\n            case 408:\r\n            case 504: return \"Timeout\";\r\n            default: return \"statuscode:\" + statusCode.toString();\r\n        }\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=ServiceTelemetryListener.Internal.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { createNoDashGuid, Deferred, Events } from \"../common/Exports\";\r\nimport { ConnectingToServiceEvent, ListeningStartedEvent, RecognitionStartedEvent, RecognitionTriggeredEvent, } from \"./RecognitionEvents\";\r\nimport { ServiceTelemetryListener } from \"./ServiceTelemetryListener.Internal\";\r\nexport class RequestSession {\r\n    constructor(audioSourceId) {\r\n        this.privIsDisposed = false;\r\n        this.privDetachables = new Array();\r\n        this.privIsAudioNodeDetached = false;\r\n        this.privIsRecognizing = false;\r\n        this.privIsSpeechEnded = false;\r\n        this.privTurnStartAudioOffset = 0;\r\n        this.privLastRecoOffset = 0;\r\n        this.privHypothesisReceived = false;\r\n        this.privBytesSent = 0;\r\n        this.privRecogNumber = 0;\r\n        this.privInTurn = false;\r\n        this.privConnectionAttempts = 0;\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privRequestId = createNoDashGuid();\r\n        this.privAudioNodeId = createNoDashGuid();\r\n        this.privTurnDeferral = new Deferred();\r\n        // We're not in a turn, so resolve.\r\n        this.privTurnDeferral.resolve();\r\n    }\r\n    get sessionId() {\r\n        return this.privSessionId;\r\n    }\r\n    get requestId() {\r\n        return this.privRequestId;\r\n    }\r\n    get audioNodeId() {\r\n        return this.privAudioNodeId;\r\n    }\r\n    get turnCompletionPromise() {\r\n        return this.privTurnDeferral.promise;\r\n    }\r\n    get isSpeechEnded() {\r\n        return this.privIsSpeechEnded;\r\n    }\r\n    get isRecognizing() {\r\n        return this.privIsRecognizing;\r\n    }\r\n    get currentTurnAudioOffset() {\r\n        return this.privTurnStartAudioOffset;\r\n    }\r\n    get recogNumber() {\r\n        return this.privRecogNumber;\r\n    }\r\n    get numConnectionAttempts() {\r\n        return this.privConnectionAttempts;\r\n    }\r\n    // The number of bytes sent for the current connection.\r\n    // Counter is reset to 0 each time a connection is established.\r\n    get bytesSent() {\r\n        return this.privBytesSent;\r\n    }\r\n    listenForServiceTelemetry(eventSource) {\r\n        if (!!this.privServiceTelemetryListener) {\r\n            this.privDetachables.push(eventSource.attachListener(this.privServiceTelemetryListener));\r\n        }\r\n    }\r\n    startNewRecognition() {\r\n        this.privIsSpeechEnded = false;\r\n        this.privIsRecognizing = true;\r\n        this.privTurnStartAudioOffset = 0;\r\n        this.privLastRecoOffset = 0;\r\n        this.privRecogNumber++;\r\n        this.privServiceTelemetryListener = new ServiceTelemetryListener(this.privRequestId, this.privAudioSourceId, this.privAudioNodeId);\r\n        this.onEvent(new RecognitionTriggeredEvent(this.requestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));\r\n    }\r\n    onAudioSourceAttachCompleted(audioNode, isError) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.privAudioNode = audioNode;\r\n            this.privIsAudioNodeDetached = false;\r\n            if (isError) {\r\n                yield this.onComplete();\r\n            }\r\n            else {\r\n                this.onEvent(new ListeningStartedEvent(this.privRequestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));\r\n            }\r\n        });\r\n    }\r\n    onPreConnectionStart(authFetchEventId, connectionId) {\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n        this.privSessionId = connectionId;\r\n        this.onEvent(new ConnectingToServiceEvent(this.privRequestId, this.privAuthFetchEventId, this.privSessionId));\r\n    }\r\n    onAuthCompleted(isError) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (isError) {\r\n                yield this.onComplete();\r\n            }\r\n        });\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    onConnectionEstablishCompleted(statusCode, reason) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (statusCode === 200) {\r\n                this.onEvent(new RecognitionStartedEvent(this.requestId, this.privAudioSourceId, this.privAudioNodeId, this.privAuthFetchEventId, this.privSessionId));\r\n                if (!!this.privAudioNode) {\r\n                    this.privAudioNode.replay();\r\n                }\r\n                this.privTurnStartAudioOffset = this.privLastRecoOffset;\r\n                this.privBytesSent = 0;\r\n                return;\r\n            }\r\n            else if (statusCode === 403) {\r\n                yield this.onComplete();\r\n            }\r\n        });\r\n    }\r\n    onServiceTurnEndResponse(continuousRecognition) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.privTurnDeferral.resolve();\r\n            if (!continuousRecognition || this.isSpeechEnded) {\r\n                yield this.onComplete();\r\n                this.privInTurn = false;\r\n            }\r\n            else {\r\n                // Start a new request set.\r\n                this.privTurnStartAudioOffset = this.privLastRecoOffset;\r\n                this.privAudioNode.replay();\r\n            }\r\n        });\r\n    }\r\n    onSpeechContext() {\r\n        this.privRequestId = createNoDashGuid();\r\n    }\r\n    onServiceTurnStartResponse() {\r\n        if (!!this.privTurnDeferral && !!this.privInTurn) {\r\n            // What? How are we starting a turn with another not done?\r\n            this.privTurnDeferral.reject(\"Another turn started before current completed.\");\r\n            // Avoid UnhandledPromiseRejection if privTurnDeferral is not being awaited\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            this.privTurnDeferral.promise.then().catch(() => { });\r\n        }\r\n        this.privInTurn = true;\r\n        this.privTurnDeferral = new Deferred();\r\n    }\r\n    onHypothesis(offset) {\r\n        if (!this.privHypothesisReceived) {\r\n            this.privHypothesisReceived = true;\r\n            this.privServiceTelemetryListener.hypothesisReceived(this.privAudioNode.findTimeAtOffset(offset));\r\n        }\r\n    }\r\n    onPhraseRecognized(offset) {\r\n        this.privServiceTelemetryListener.phraseReceived(this.privAudioNode.findTimeAtOffset(offset));\r\n        this.onServiceRecognized(offset);\r\n    }\r\n    onServiceRecognized(offset) {\r\n        this.privLastRecoOffset = offset;\r\n        this.privHypothesisReceived = false;\r\n        this.privAudioNode.shrinkBuffers(offset);\r\n        this.privConnectionAttempts = 0;\r\n    }\r\n    onAudioSent(bytesSent) {\r\n        this.privBytesSent += bytesSent;\r\n    }\r\n    onRetryConnection() {\r\n        this.privConnectionAttempts++;\r\n    }\r\n    dispose() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!this.privIsDisposed) {\r\n                // we should have completed by now. If we did not its an unknown error.\r\n                this.privIsDisposed = true;\r\n                for (const detachable of this.privDetachables) {\r\n                    yield detachable.detach();\r\n                }\r\n                if (!!this.privServiceTelemetryListener) {\r\n                    this.privServiceTelemetryListener.dispose();\r\n                }\r\n                this.privIsRecognizing = false;\r\n            }\r\n        });\r\n    }\r\n    getTelemetry() {\r\n        if (this.privServiceTelemetryListener.hasTelemetry) {\r\n            return this.privServiceTelemetryListener.getTelemetry();\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    onStopRecognizing() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            yield this.onComplete();\r\n        });\r\n    }\r\n    // Should be called with the audioNode for this session has indicated that it is out of speech.\r\n    onSpeechEnded() {\r\n        this.privIsSpeechEnded = true;\r\n    }\r\n    onEvent(event) {\r\n        if (!!this.privServiceTelemetryListener) {\r\n            this.privServiceTelemetryListener.onEvent(event);\r\n        }\r\n        Events.instance.onEvent(event);\r\n    }\r\n    onComplete() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!!this.privIsRecognizing) {\r\n                this.privIsRecognizing = false;\r\n                yield this.detachAudioNode();\r\n            }\r\n        });\r\n    }\r\n    detachAudioNode() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!this.privIsAudioNodeDetached) {\r\n                this.privIsAudioNodeDetached = true;\r\n                if (this.privAudioNode) {\r\n                    yield this.privAudioNode.detach();\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=RequestSession.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/**\r\n * Represents the JSON used in the speech.context message sent to the speech service.\r\n * The dynamic grammar is always refreshed from the encapsulated dynamic grammar object.\r\n */\r\nexport class SpeechContext {\r\n    constructor(dynamicGrammar) {\r\n        this.privContext = {};\r\n        this.privDynamicGrammar = dynamicGrammar;\r\n    }\r\n    /**\r\n     * Gets a section of the speech.context object.\r\n     * @param sectionName Name of the section to get.\r\n     * @return string or Context JSON serializable object that represents the value.\r\n     */\r\n    getSection(sectionName) {\r\n        return (this.privContext[sectionName] || {});\r\n    }\r\n    /**\r\n     * Adds a section to the speech.context object.\r\n     * @param sectionName Name of the section to add.\r\n     * @param value JSON serializable object that represents the value.\r\n     */\r\n    setSection(sectionName, value) {\r\n        this.privContext[sectionName] = value;\r\n    }\r\n    /**\r\n     * @Internal\r\n     * This is only used by pronunciation assessment config.\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    setPronunciationAssessmentParams(params) {\r\n        if (this.privContext.phraseDetection === undefined) {\r\n            this.privContext.phraseDetection = {\r\n                enrichment: {\r\n                    pronunciationAssessment: {}\r\n                }\r\n            };\r\n        }\r\n        this.privContext.phraseDetection.enrichment.pronunciationAssessment = JSON.parse(params);\r\n        this.setWordLevelTimings();\r\n        this.privContext.phraseOutput.detailed.options.push(\"PronunciationAssessment\");\r\n        if (this.privContext.phraseOutput.detailed.options.indexOf(\"SNR\") === -1) {\r\n            this.privContext.phraseOutput.detailed.options.push(\"SNR\");\r\n        }\r\n    }\r\n    setWordLevelTimings() {\r\n        if (this.privContext.phraseOutput === undefined) {\r\n            this.privContext.phraseOutput = {\r\n                detailed: {\r\n                    options: []\r\n                },\r\n                format: {}\r\n            };\r\n        }\r\n        if (this.privContext.phraseOutput.detailed === undefined) {\r\n            this.privContext.phraseOutput.detailed = {\r\n                options: []\r\n            };\r\n        }\r\n        this.privContext.phraseOutput.format = \"Detailed\";\r\n        if (this.privContext.phraseOutput.detailed.options.indexOf(\"WordTimings\") === -1) {\r\n            this.privContext.phraseOutput.detailed.options.push(\"WordTimings\");\r\n        }\r\n    }\r\n    toJSON() {\r\n        const dgi = this.privDynamicGrammar.generateGrammarObject();\r\n        this.setSection(\"dgi\", dgi);\r\n        const ret = JSON.stringify(this.privContext);\r\n        return ret;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=SpeechContext.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/**\r\n * Responsible for building the object to be sent to the speech service to support dynamic grammars.\r\n * @class DynamicGrammarBuilder\r\n */\r\nexport class DynamicGrammarBuilder {\r\n    // Adds one more reference phrases to the dynamic grammar to send.\r\n    // All added phrases are generic phrases.\r\n    addPhrase(phrase) {\r\n        if (!this.privPhrases) {\r\n            this.privPhrases = [];\r\n        }\r\n        if (phrase instanceof Array) {\r\n            this.privPhrases = this.privPhrases.concat(phrase);\r\n        }\r\n        else {\r\n            this.privPhrases.push(phrase);\r\n        }\r\n    }\r\n    // Clears all phrases stored in the current object.\r\n    clearPhrases() {\r\n        this.privPhrases = undefined;\r\n    }\r\n    // Adds one or more reference grammars to the current grammar.\r\n    addReferenceGrammar(grammar) {\r\n        if (!this.privGrammars) {\r\n            this.privGrammars = [];\r\n        }\r\n        if (grammar instanceof Array) {\r\n            this.privGrammars = this.privGrammars.concat(grammar);\r\n        }\r\n        else {\r\n            this.privGrammars.push(grammar);\r\n        }\r\n    }\r\n    // clears all grammars stored on the recognizer.\r\n    clearGrammars() {\r\n        this.privGrammars = undefined;\r\n    }\r\n    // Generates an object that represents the dynamic grammar used by the Speech Service.\r\n    // This is done by building an object with the correct layout based on the phrases and reference grammars added to this instance\r\n    // of a DynamicGrammarBuilder\r\n    generateGrammarObject() {\r\n        if (this.privGrammars === undefined && this.privPhrases === undefined) {\r\n            return undefined;\r\n        }\r\n        const retObj = {};\r\n        retObj.ReferenceGrammars = this.privGrammars;\r\n        if (undefined !== this.privPhrases && 0 !== this.privPhrases.length) {\r\n            const retPhrases = [];\r\n            this.privPhrases.forEach((value) => {\r\n                retPhrases.push({\r\n                    Text: value,\r\n                });\r\n            });\r\n            retObj.Groups = [{ Type: \"Generic\", Items: retPhrases }];\r\n        }\r\n        return retObj;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=DynamicGrammarBuilder.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/**\r\n * Represents the JSON used in the agent.config message sent to the speech service.\r\n */\r\nexport class AgentConfig {\r\n    toJsonString() {\r\n        return JSON.stringify(this.iPrivConfig);\r\n    }\r\n    get() {\r\n        return this.iPrivConfig;\r\n    }\r\n    /**\r\n     * Setter for the agent.config object.\r\n     * @param value a JSON serializable object.\r\n     */\r\n    set(value) {\r\n        this.iPrivConfig = value;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=AgentConfig.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nexport class RestConfigBase {\r\n    static get requestOptions() {\r\n        return RestConfigBase.privDefaultRequestOptions;\r\n    }\r\n    static get configParams() {\r\n        return RestConfigBase.privDefaultParams;\r\n    }\r\n    static get restErrors() {\r\n        return RestConfigBase.privRestErrors;\r\n    }\r\n}\r\nRestConfigBase.privDefaultRequestOptions = {\r\n    headers: {\r\n        Accept: \"application/json\",\r\n    },\r\n    ignoreCache: false,\r\n    timeout: 10000,\r\n};\r\nRestConfigBase.privRestErrors = {\r\n    authInvalidSubscriptionKey: \"You must specify either an authentication token to use, or a Cognitive Speech subscription key.\",\r\n    authInvalidSubscriptionRegion: \"You must specify the Cognitive Speech region to use.\",\r\n    invalidArgs: \"Required input not found: {arg}.\",\r\n    invalidCreateJoinConversationResponse: \"Creating/Joining conversation failed with HTTP {status}.\",\r\n    invalidParticipantRequest: \"The requested participant was not found.\",\r\n    permissionDeniedConnect: \"Required credentials not found.\",\r\n    permissionDeniedConversation: \"Invalid operation: only the host can {command} the conversation.\",\r\n    permissionDeniedParticipant: \"Invalid operation: only the host can {command} a participant.\",\r\n    permissionDeniedSend: \"Invalid operation: the conversation is not in a connected state.\",\r\n    permissionDeniedStart: \"Invalid operation: there is already an active conversation.\",\r\n};\r\nRestConfigBase.privDefaultParams = {\r\n    apiVersion: \"api-version\",\r\n    authorization: \"Authorization\",\r\n    clientAppId: \"X-ClientAppId\",\r\n    contentTypeKey: \"Content-Type\",\r\n    correlationId: \"X-CorrelationId\",\r\n    languageCode: \"language\",\r\n    nickname: \"nickname\",\r\n    profanity: \"profanity\",\r\n    requestId: \"X-RequestId\",\r\n    roomId: \"roomid\",\r\n    sessionToken: \"token\",\r\n    subscriptionKey: \"Ocp-Apim-Subscription-Key\",\r\n    subscriptionRegion: \"Ocp-Apim-Subscription-Region\",\r\n    token: \"X-CapitoToken\",\r\n};\r\n\r\n//# sourceMappingURL=RestConfigBase.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nexport var MetadataType;\r\n(function (MetadataType) {\r\n    MetadataType[\"WordBoundary\"] = \"WordBoundary\";\r\n    MetadataType[\"Bookmark\"] = \"Bookmark\";\r\n    MetadataType[\"Viseme\"] = \"Viseme\";\r\n    MetadataType[\"SentenceBoundary\"] = \"SentenceBoundary\";\r\n    MetadataType[\"SessionEnd\"] = \"SessionEnd\";\r\n})(MetadataType || (MetadataType = {}));\r\nexport class SynthesisAudioMetadata {\r\n    constructor(json) {\r\n        this.privSynthesisAudioMetadata = JSON.parse(json);\r\n    }\r\n    static fromJSON(json) {\r\n        return new SynthesisAudioMetadata(json);\r\n    }\r\n    get Metadata() {\r\n        return this.privSynthesisAudioMetadata.Metadata;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=SynthesisAudioMetadata.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { ArgumentNullError, ConnectionState, createNoDashGuid, EventSource, MessageType, ServiceEvent, } from \"../common/Exports\";\r\nimport { CancellationErrorCode, CancellationReason, PropertyCollection, PropertyId, ResultReason, SpeechSynthesisBookmarkEventArgs, SpeechSynthesisEventArgs, SpeechSynthesisResult, SpeechSynthesisVisemeEventArgs, SpeechSynthesisWordBoundaryEventArgs, } from \"../sdk/Exports\";\r\nimport { AgentConfig, CancellationErrorCodePropertyName, MetadataType, SynthesisAudioMetadata, SynthesisContext, SynthesisTurn } from \"./Exports\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\nexport class SynthesisAdapterBase {\r\n    constructor(authentication, connectionFactory, synthesizerConfig, speechSynthesizer, audioDestination) {\r\n        this.speakOverride = undefined;\r\n        this.receiveMessageOverride = undefined;\r\n        this.connectImplOverride = undefined;\r\n        this.configConnectionOverride = undefined;\r\n        // A promise for a configured connection.\r\n        // Do not consume directly, call fetchConnection instead.\r\n        this.privConnectionConfigurationPromise = undefined;\r\n        if (!authentication) {\r\n            throw new ArgumentNullError(\"authentication\");\r\n        }\r\n        if (!connectionFactory) {\r\n            throw new ArgumentNullError(\"connectionFactory\");\r\n        }\r\n        if (!synthesizerConfig) {\r\n            throw new ArgumentNullError(\"synthesizerConfig\");\r\n        }\r\n        this.privAuthentication = authentication;\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.privSynthesizerConfig = synthesizerConfig;\r\n        this.privIsDisposed = false;\r\n        this.privSpeechSynthesizer = speechSynthesizer;\r\n        this.privSessionAudioDestination = audioDestination;\r\n        this.privSynthesisTurn = new SynthesisTurn();\r\n        this.privConnectionEvents = new EventSource();\r\n        this.privServiceEvents = new EventSource();\r\n        this.privSynthesisContext = new SynthesisContext(this.privSpeechSynthesizer);\r\n        this.privAgentConfig = new AgentConfig();\r\n        this.connectionEvents.attach((connectionEvent) => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                const connectionClosedEvent = connectionEvent;\r\n                if (connectionClosedEvent.statusCode !== 1000) {\r\n                    this.cancelSynthesisLocal(CancellationReason.Error, connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure, `${connectionClosedEvent.reason} websocket error code: ${connectionClosedEvent.statusCode}`);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    get synthesisContext() {\r\n        return this.privSynthesisContext;\r\n    }\r\n    get agentConfig() {\r\n        return this.privAgentConfig;\r\n    }\r\n    get connectionEvents() {\r\n        return this.privConnectionEvents;\r\n    }\r\n    get serviceEvents() {\r\n        return this.privServiceEvents;\r\n    }\r\n    set activityTemplate(messagePayload) {\r\n        this.privActivityTemplate = messagePayload;\r\n    }\r\n    get activityTemplate() {\r\n        return this.privActivityTemplate;\r\n    }\r\n    set audioOutputFormat(format) {\r\n        this.privAudioOutputFormat = format;\r\n        this.privSynthesisTurn.audioOutputFormat = format;\r\n        if (this.privSessionAudioDestination !== undefined) {\r\n            this.privSessionAudioDestination.format = format;\r\n        }\r\n        if (this.synthesisContext !== undefined) {\r\n            this.synthesisContext.audioOutputFormat = format;\r\n        }\r\n    }\r\n    static addHeader(audio, format) {\r\n        if (!format.hasHeader) {\r\n            return audio;\r\n        }\r\n        format.updateHeader(audio.byteLength);\r\n        const tmp = new Uint8Array(audio.byteLength + format.header.byteLength);\r\n        tmp.set(new Uint8Array(format.header), 0);\r\n        tmp.set(new Uint8Array(audio), format.header.byteLength);\r\n        return tmp.buffer;\r\n    }\r\n    isDisposed() {\r\n        return this.privIsDisposed;\r\n    }\r\n    dispose(reason) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.privIsDisposed = true;\r\n            if (this.privSessionAudioDestination !== undefined) {\r\n                this.privSessionAudioDestination.close();\r\n            }\r\n            if (this.privConnectionConfigurationPromise !== undefined) {\r\n                const connection = yield this.privConnectionConfigurationPromise;\r\n                yield connection.dispose(reason);\r\n            }\r\n        });\r\n    }\r\n    connect() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            yield this.connectImpl();\r\n        });\r\n    }\r\n    sendNetworkMessage(path, payload) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const type = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\r\n            const contentType = typeof payload === \"string\" ? \"application/json\" : \"\";\r\n            const connection = yield this.fetchConnection();\r\n            return connection.send(new SpeechConnectionMessage(type, path, this.privSynthesisTurn.requestId, contentType, payload));\r\n        });\r\n    }\r\n    Speak(text, isSSML, requestId, successCallback, errorCallBack, audioDestination) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let ssml;\r\n            if (isSSML) {\r\n                ssml = text;\r\n            }\r\n            else {\r\n                ssml = this.privSpeechSynthesizer.buildSsml(text);\r\n            }\r\n            if (this.speakOverride !== undefined) {\r\n                return this.speakOverride(ssml, requestId, successCallback, errorCallBack);\r\n            }\r\n            this.privSuccessCallback = successCallback;\r\n            this.privErrorCallback = errorCallBack;\r\n            this.privSynthesisTurn.startNewSynthesis(requestId, text, isSSML, audioDestination);\r\n            try {\r\n                yield this.connectImpl();\r\n                const connection = yield this.fetchConnection();\r\n                yield this.sendSynthesisContext(connection);\r\n                yield this.sendSsmlMessage(connection, ssml, requestId);\r\n                const synthesisStartEventArgs = new SpeechSynthesisEventArgs(new SpeechSynthesisResult(requestId, ResultReason.SynthesizingAudioStarted));\r\n                if (!!this.privSpeechSynthesizer.synthesisStarted) {\r\n                    this.privSpeechSynthesizer.synthesisStarted(this.privSpeechSynthesizer, synthesisStartEventArgs);\r\n                }\r\n                void this.receiveMessage();\r\n            }\r\n            catch (e) {\r\n                this.cancelSynthesisLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, e);\r\n                return Promise.reject(e);\r\n            }\r\n        });\r\n    }\r\n    // Cancels synthesis.\r\n    cancelSynthesis(requestId, cancellationReason, errorCode, error) {\r\n        const properties = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n        const result = new SpeechSynthesisResult(requestId, ResultReason.Canceled, undefined, error, properties);\r\n        if (!!this.privSpeechSynthesizer.SynthesisCanceled) {\r\n            const cancelEvent = new SpeechSynthesisEventArgs(result);\r\n            try {\r\n                this.privSpeechSynthesizer.SynthesisCanceled(this.privSpeechSynthesizer, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            }\r\n            catch (_a) { }\r\n        }\r\n        if (!!this.privSuccessCallback) {\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                /* eslint-disable no-empty */\r\n            }\r\n            catch (_b) { }\r\n        }\r\n    }\r\n    // Cancels synthesis.\r\n    cancelSynthesisLocal(cancellationReason, errorCode, error) {\r\n        if (!!this.privSynthesisTurn.isSynthesizing) {\r\n            this.privSynthesisTurn.onStopSynthesizing();\r\n            this.cancelSynthesis(this.privSynthesisTurn.requestId, cancellationReason, errorCode, error);\r\n        }\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    processTypeSpecificMessages(connectionMessage) {\r\n        return true;\r\n    }\r\n    receiveMessage() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const connection = yield this.fetchConnection();\r\n                const message = yield connection.read();\r\n                if (this.receiveMessageOverride !== undefined) {\r\n                    return this.receiveMessageOverride();\r\n                }\r\n                if (this.privIsDisposed) {\r\n                    // We're done.\r\n                    return;\r\n                }\r\n                // indicates we are draining the queue and it came with no message;\r\n                if (!message) {\r\n                    if (!this.privSynthesisTurn.isSynthesizing) {\r\n                        return;\r\n                    }\r\n                    else {\r\n                        return this.receiveMessage();\r\n                    }\r\n                }\r\n                const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n                if (connectionMessage.requestId.toLowerCase() === this.privSynthesisTurn.requestId.toLowerCase()) {\r\n                    switch (connectionMessage.path.toLowerCase()) {\r\n                        case \"turn.start\":\r\n                            this.privSynthesisTurn.onServiceTurnStartResponse();\r\n                            break;\r\n                        case \"response\":\r\n                            this.privSynthesisTurn.onServiceResponseMessage(connectionMessage.textBody);\r\n                            break;\r\n                        case \"audio\":\r\n                            if (this.privSynthesisTurn.streamId.toLowerCase() === connectionMessage.streamId.toLowerCase()\r\n                                && !!connectionMessage.binaryBody) {\r\n                                this.privSynthesisTurn.onAudioChunkReceived(connectionMessage.binaryBody);\r\n                                if (!!this.privSpeechSynthesizer.synthesizing) {\r\n                                    try {\r\n                                        const audioWithHeader = SynthesisAdapterBase.addHeader(connectionMessage.binaryBody, this.privSynthesisTurn.audioOutputFormat);\r\n                                        const ev = new SpeechSynthesisEventArgs(new SpeechSynthesisResult(this.privSynthesisTurn.requestId, ResultReason.SynthesizingAudio, audioWithHeader));\r\n                                        this.privSpeechSynthesizer.synthesizing(this.privSpeechSynthesizer, ev);\r\n                                    }\r\n                                    catch (error) {\r\n                                        // Not going to let errors in the event handler\r\n                                        // trip things up.\r\n                                    }\r\n                                }\r\n                                if (this.privSessionAudioDestination !== undefined) {\r\n                                    this.privSessionAudioDestination.write(connectionMessage.binaryBody);\r\n                                }\r\n                            }\r\n                            break;\r\n                        case \"audio.metadata\":\r\n                            const metadataList = SynthesisAudioMetadata.fromJSON(connectionMessage.textBody).Metadata;\r\n                            for (const metadata of metadataList) {\r\n                                switch (metadata.Type) {\r\n                                    case MetadataType.WordBoundary:\r\n                                    case MetadataType.SentenceBoundary:\r\n                                        this.privSynthesisTurn.onTextBoundaryEvent(metadata);\r\n                                        const wordBoundaryEventArgs = new SpeechSynthesisWordBoundaryEventArgs(metadata.Data.Offset, metadata.Data.Duration, metadata.Data.text.Text, metadata.Data.text.Length, metadata.Type === MetadataType.WordBoundary\r\n                                            ? this.privSynthesisTurn.currentTextOffset : this.privSynthesisTurn.currentSentenceOffset, metadata.Data.text.BoundaryType);\r\n                                        if (!!this.privSpeechSynthesizer.wordBoundary) {\r\n                                            try {\r\n                                                this.privSpeechSynthesizer.wordBoundary(this.privSpeechSynthesizer, wordBoundaryEventArgs);\r\n                                            }\r\n                                            catch (error) {\r\n                                                // Not going to let errors in the event handler\r\n                                                // trip things up.\r\n                                            }\r\n                                        }\r\n                                        break;\r\n                                    case MetadataType.Bookmark:\r\n                                        const bookmarkEventArgs = new SpeechSynthesisBookmarkEventArgs(metadata.Data.Offset, metadata.Data.Bookmark);\r\n                                        if (!!this.privSpeechSynthesizer.bookmarkReached) {\r\n                                            try {\r\n                                                this.privSpeechSynthesizer.bookmarkReached(this.privSpeechSynthesizer, bookmarkEventArgs);\r\n                                            }\r\n                                            catch (error) {\r\n                                                // Not going to let errors in the event handler\r\n                                                // trip things up.\r\n                                            }\r\n                                        }\r\n                                        break;\r\n                                    case MetadataType.Viseme:\r\n                                        this.privSynthesisTurn.onVisemeMetadataReceived(metadata);\r\n                                        if (metadata.Data.IsLastAnimation) {\r\n                                            const visemeEventArgs = new SpeechSynthesisVisemeEventArgs(metadata.Data.Offset, metadata.Data.VisemeId, this.privSynthesisTurn.getAndClearVisemeAnimation());\r\n                                            if (!!this.privSpeechSynthesizer.visemeReceived) {\r\n                                                try {\r\n                                                    this.privSpeechSynthesizer.visemeReceived(this.privSpeechSynthesizer, visemeEventArgs);\r\n                                                }\r\n                                                catch (error) {\r\n                                                    // Not going to let errors in the event handler\r\n                                                    // trip things up.\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                        break;\r\n                                    case MetadataType.SessionEnd:\r\n                                        this.privSynthesisTurn.onSessionEnd(metadata);\r\n                                        break;\r\n                                }\r\n                            }\r\n                            break;\r\n                        case \"turn.end\":\r\n                            this.privSynthesisTurn.onServiceTurnEndResponse();\r\n                            let result;\r\n                            try {\r\n                                const audioBuffer = yield this.privSynthesisTurn.getAllReceivedAudioWithHeader();\r\n                                result = new SpeechSynthesisResult(this.privSynthesisTurn.requestId, ResultReason.SynthesizingAudioCompleted, audioBuffer, undefined, undefined, this.privSynthesisTurn.audioDuration);\r\n                                if (!!this.privSuccessCallback) {\r\n                                    this.privSuccessCallback(result);\r\n                                }\r\n                            }\r\n                            catch (error) {\r\n                                if (!!this.privErrorCallback) {\r\n                                    this.privErrorCallback(error);\r\n                                }\r\n                            }\r\n                            if (this.privSpeechSynthesizer.synthesisCompleted) {\r\n                                try {\r\n                                    this.privSpeechSynthesizer.synthesisCompleted(this.privSpeechSynthesizer, new SpeechSynthesisEventArgs(result));\r\n                                }\r\n                                catch (e) {\r\n                                    // Not going to let errors in the event handler\r\n                                    // trip things up.\r\n                                }\r\n                            }\r\n                            break;\r\n                        default:\r\n                            if (!this.processTypeSpecificMessages(connectionMessage)) {\r\n                                // here are some messages that the derived class has not processed, dispatch them to connect class\r\n                                if (!!this.privServiceEvents) {\r\n                                    this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                                }\r\n                            }\r\n                    }\r\n                }\r\n                return this.receiveMessage();\r\n            }\r\n            catch (e) {\r\n                // TODO: What goes here?\r\n            }\r\n        });\r\n    }\r\n    sendSynthesisContext(connection) {\r\n        const synthesisContextJson = this.synthesisContext.toJSON();\r\n        if (synthesisContextJson) {\r\n            return connection.send(new SpeechConnectionMessage(MessageType.Text, \"synthesis.context\", this.privSynthesisTurn.requestId, \"application/json\", synthesisContextJson));\r\n        }\r\n        return;\r\n    }\r\n    connectImpl(isUnAuthorized = false) {\r\n        if (this.privConnectionPromise != null) {\r\n            return this.privConnectionPromise.then((connection) => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionPromise = null;\r\n                    return this.connectImpl();\r\n                }\r\n                return this.privConnectionPromise;\r\n            }, () => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionPromise = null;\r\n                return this.connectImpl();\r\n            });\r\n        }\r\n        this.privAuthFetchEventId = createNoDashGuid();\r\n        this.privConnectionId = createNoDashGuid();\r\n        this.privSynthesisTurn.onPreConnectionStart(this.privAuthFetchEventId);\r\n        const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\r\n        this.privConnectionPromise = authPromise.then((result) => __awaiter(this, void 0, void 0, function* () {\r\n            this.privSynthesisTurn.onAuthCompleted(false);\r\n            const connection = this.privConnectionFactory.create(this.privSynthesizerConfig, result, this.privConnectionId);\r\n            // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\r\n            // it'll stop sending events.\r\n            connection.events.attach((event) => {\r\n                this.connectionEvents.onEvent(event);\r\n            });\r\n            const response = yield connection.open();\r\n            if (response.statusCode === 200) {\r\n                this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode);\r\n                return Promise.resolve(connection);\r\n            }\r\n            else if (response.statusCode === 403 && !isUnAuthorized) {\r\n                return this.connectImpl(true);\r\n            }\r\n            else {\r\n                this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode);\r\n                return Promise.reject(`Unable to contact server. StatusCode: ${response.statusCode}, ${this.privSynthesizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${response.reason}`);\r\n            }\r\n        }), (error) => {\r\n            this.privSynthesisTurn.onAuthCompleted(true);\r\n            throw new Error(error);\r\n        });\r\n        // Attach an empty handler to allow the promise to run in the background while\r\n        // other startup events happen. It'll eventually be awaited on.\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        this.privConnectionPromise.catch(() => { });\r\n        return this.privConnectionPromise;\r\n    }\r\n    sendSpeechServiceConfig(connection, SpeechServiceConfigJson) {\r\n        if (SpeechServiceConfigJson) {\r\n            return connection.send(new SpeechConnectionMessage(MessageType.Text, \"speech.config\", this.privSynthesisTurn.requestId, \"application/json\", SpeechServiceConfigJson));\r\n        }\r\n    }\r\n    sendSsmlMessage(connection, ssml, requestId) {\r\n        return connection.send(new SpeechConnectionMessage(MessageType.Text, \"ssml\", requestId, \"application/ssml+xml\", ssml));\r\n    }\r\n    fetchConnection() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (this.privConnectionConfigurationPromise !== undefined) {\r\n                return this.privConnectionConfigurationPromise.then((connection) => {\r\n                    if (connection.state() === ConnectionState.Disconnected) {\r\n                        this.privConnectionId = null;\r\n                        this.privConnectionConfigurationPromise = undefined;\r\n                        return this.fetchConnection();\r\n                    }\r\n                    return this.privConnectionConfigurationPromise;\r\n                }, () => {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionConfigurationPromise = undefined;\r\n                    return this.fetchConnection();\r\n                });\r\n            }\r\n            this.privConnectionConfigurationPromise = this.configureConnection();\r\n            return yield this.privConnectionConfigurationPromise;\r\n        });\r\n    }\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    configureConnection() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const connection = yield this.connectImpl();\r\n            if (this.configConnectionOverride !== undefined) {\r\n                return this.configConnectionOverride(connection);\r\n            }\r\n            yield this.sendSpeechServiceConfig(connection, this.privSynthesizerConfig.SpeechServiceConfig.serialize());\r\n            return connection;\r\n        });\r\n    }\r\n}\r\nSynthesisAdapterBase.telemetryDataEnabled = true;\r\n\r\n//# sourceMappingURL=SynthesisAdapterBase.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/* eslint-disable max-classes-per-file */\r\nimport { EventType, PlatformEvent } from \"../common/Exports\";\r\nexport class SpeechSynthesisEvent extends PlatformEvent {\r\n    constructor(eventName, requestId, eventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n        this.privRequestId = requestId;\r\n    }\r\n    get requestId() {\r\n        return this.privRequestId;\r\n    }\r\n}\r\nexport class SynthesisTriggeredEvent extends SpeechSynthesisEvent {\r\n    constructor(requestId, sessionAudioDestinationId, turnAudioDestinationId) {\r\n        super(\"SynthesisTriggeredEvent\", requestId);\r\n        this.privSessionAudioDestinationId = sessionAudioDestinationId;\r\n        this.privTurnAudioDestinationId = turnAudioDestinationId;\r\n    }\r\n    get audioSessionDestinationId() {\r\n        return this.privSessionAudioDestinationId;\r\n    }\r\n    get audioTurnDestinationId() {\r\n        return this.privTurnAudioDestinationId;\r\n    }\r\n}\r\nexport class ConnectingToSynthesisServiceEvent extends SpeechSynthesisEvent {\r\n    constructor(requestId, authFetchEventId) {\r\n        super(\"ConnectingToSynthesisServiceEvent\", requestId);\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n    }\r\n    get authFetchEventId() {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n}\r\nexport class SynthesisStartedEvent extends SpeechSynthesisEvent {\r\n    constructor(requestId, authFetchEventId) {\r\n        super(\"SynthesisStartedEvent\", requestId);\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n    }\r\n    get authFetchEventId() {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=SynthesisEvents.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { createNoDashGuid, Deferred, Events } from \"../common/Exports\";\r\nimport { PullAudioOutputStreamImpl } from \"../sdk/Audio/AudioOutputStream\";\r\nimport { MetadataType } from \"./ServiceMessages/SynthesisAudioMetadata\";\r\nimport { SynthesisAdapterBase } from \"./SynthesisAdapterBase\";\r\nimport { ConnectingToSynthesisServiceEvent, SynthesisStartedEvent, SynthesisTriggeredEvent, } from \"./SynthesisEvents\";\r\nexport class SynthesisTurn {\r\n    constructor() {\r\n        this.privIsDisposed = false;\r\n        this.privIsSynthesizing = false;\r\n        this.privIsSynthesisEnded = false;\r\n        this.privBytesReceived = 0;\r\n        this.privInTurn = false;\r\n        this.privTextOffset = 0;\r\n        this.privNextSearchTextIndex = 0;\r\n        this.privSentenceOffset = 0;\r\n        this.privNextSearchSentenceIndex = 0;\r\n        this.privRequestId = createNoDashGuid();\r\n        this.privTurnDeferral = new Deferred();\r\n        // We're not in a turn, so resolve.\r\n        this.privTurnDeferral.resolve();\r\n    }\r\n    get requestId() {\r\n        return this.privRequestId;\r\n    }\r\n    get streamId() {\r\n        return this.privStreamId;\r\n    }\r\n    set streamId(value) {\r\n        this.privStreamId = value;\r\n    }\r\n    get audioOutputFormat() {\r\n        return this.privAudioOutputFormat;\r\n    }\r\n    set audioOutputFormat(format) {\r\n        this.privAudioOutputFormat = format;\r\n    }\r\n    get turnCompletionPromise() {\r\n        return this.privTurnDeferral.promise;\r\n    }\r\n    get isSynthesisEnded() {\r\n        return this.privIsSynthesisEnded;\r\n    }\r\n    get isSynthesizing() {\r\n        return this.privIsSynthesizing;\r\n    }\r\n    get currentTextOffset() {\r\n        return this.privTextOffset;\r\n    }\r\n    get currentSentenceOffset() {\r\n        return this.privSentenceOffset;\r\n    }\r\n    // The number of bytes received for current turn\r\n    get bytesReceived() {\r\n        return this.privBytesReceived;\r\n    }\r\n    get audioDuration() {\r\n        return this.privAudioDuration;\r\n    }\r\n    getAllReceivedAudio() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!!this.privReceivedAudio) {\r\n                return Promise.resolve(this.privReceivedAudio);\r\n            }\r\n            if (!this.privIsSynthesisEnded) {\r\n                return null;\r\n            }\r\n            yield this.readAllAudioFromStream();\r\n            return Promise.resolve(this.privReceivedAudio);\r\n        });\r\n    }\r\n    getAllReceivedAudioWithHeader() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!!this.privReceivedAudioWithHeader) {\r\n                return this.privReceivedAudioWithHeader;\r\n            }\r\n            if (!this.privIsSynthesisEnded) {\r\n                return null;\r\n            }\r\n            if (this.audioOutputFormat.hasHeader) {\r\n                const audio = yield this.getAllReceivedAudio();\r\n                this.privReceivedAudioWithHeader = SynthesisAdapterBase.addHeader(audio, this.audioOutputFormat);\r\n                return this.privReceivedAudioWithHeader;\r\n            }\r\n            else {\r\n                return this.getAllReceivedAudio();\r\n            }\r\n        });\r\n    }\r\n    startNewSynthesis(requestId, rawText, isSSML, audioDestination) {\r\n        this.privIsSynthesisEnded = false;\r\n        this.privIsSynthesizing = true;\r\n        this.privRequestId = requestId;\r\n        this.privRawText = rawText;\r\n        this.privIsSSML = isSSML;\r\n        this.privAudioOutputStream = new PullAudioOutputStreamImpl();\r\n        this.privAudioOutputStream.format = this.privAudioOutputFormat;\r\n        this.privReceivedAudio = null;\r\n        this.privReceivedAudioWithHeader = null;\r\n        this.privBytesReceived = 0;\r\n        this.privTextOffset = 0;\r\n        this.privNextSearchTextIndex = 0;\r\n        this.privSentenceOffset = 0;\r\n        this.privNextSearchSentenceIndex = 0;\r\n        this.privPartialVisemeAnimation = \"\";\r\n        if (audioDestination !== undefined) {\r\n            this.privTurnAudioDestination = audioDestination;\r\n            this.privTurnAudioDestination.format = this.privAudioOutputFormat;\r\n        }\r\n        this.onEvent(new SynthesisTriggeredEvent(this.requestId, undefined, audioDestination === undefined ? undefined : audioDestination.id()));\r\n    }\r\n    onPreConnectionStart(authFetchEventId) {\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n        this.onEvent(new ConnectingToSynthesisServiceEvent(this.privRequestId, this.privAuthFetchEventId));\r\n    }\r\n    onAuthCompleted(isError) {\r\n        if (isError) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n    onConnectionEstablishCompleted(statusCode) {\r\n        if (statusCode === 200) {\r\n            this.onEvent(new SynthesisStartedEvent(this.requestId, this.privAuthFetchEventId));\r\n            this.privBytesReceived = 0;\r\n            return;\r\n        }\r\n        else if (statusCode === 403) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n    onServiceResponseMessage(responseJson) {\r\n        const response = JSON.parse(responseJson);\r\n        this.streamId = response.audio.streamId;\r\n    }\r\n    onServiceTurnEndResponse() {\r\n        this.privInTurn = false;\r\n        this.privTurnDeferral.resolve();\r\n        this.onComplete();\r\n    }\r\n    onServiceTurnStartResponse() {\r\n        if (!!this.privTurnDeferral && !!this.privInTurn) {\r\n            // What? How are we starting a turn with another not done?\r\n            this.privTurnDeferral.reject(\"Another turn started before current completed.\");\r\n            // Avoid UnhandledPromiseRejection if privTurnDeferral is not being awaited\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            this.privTurnDeferral.promise.then().catch(() => { });\r\n        }\r\n        this.privInTurn = true;\r\n        this.privTurnDeferral = new Deferred();\r\n    }\r\n    onAudioChunkReceived(data) {\r\n        if (this.isSynthesizing) {\r\n            this.privAudioOutputStream.write(data);\r\n            this.privBytesReceived += data.byteLength;\r\n            if (this.privTurnAudioDestination !== undefined) {\r\n                this.privTurnAudioDestination.write(data);\r\n            }\r\n        }\r\n    }\r\n    onTextBoundaryEvent(metadata) {\r\n        this.updateTextOffset(metadata.Data.text.Text, metadata.Type);\r\n    }\r\n    onVisemeMetadataReceived(metadata) {\r\n        if (metadata.Data.AnimationChunk !== undefined) {\r\n            this.privPartialVisemeAnimation += metadata.Data.AnimationChunk;\r\n        }\r\n    }\r\n    onSessionEnd(metadata) {\r\n        this.privAudioDuration = metadata.Data.Offset;\r\n    }\r\n    dispose() {\r\n        if (!this.privIsDisposed) {\r\n            // we should have completed by now. If we did not its an unknown error.\r\n            this.privIsDisposed = true;\r\n        }\r\n    }\r\n    onStopSynthesizing() {\r\n        this.onComplete();\r\n    }\r\n    /**\r\n     * Gets the viseme animation string (merged from animation chunk), and clears the internal\r\n     * partial animation.\r\n     */\r\n    getAndClearVisemeAnimation() {\r\n        const animation = this.privPartialVisemeAnimation;\r\n        this.privPartialVisemeAnimation = \"\";\r\n        return animation;\r\n    }\r\n    onEvent(event) {\r\n        Events.instance.onEvent(event);\r\n    }\r\n    /**\r\n     * Check if the text is an XML(SSML) tag\r\n     * @param text\r\n     * @private\r\n     */\r\n    static isXmlTag(text) {\r\n        return text.length >= 2 && text[0] === \"<\" && text[text.length - 1] === \">\";\r\n    }\r\n    updateTextOffset(text, type) {\r\n        if (type === MetadataType.WordBoundary) {\r\n            this.privTextOffset = this.privRawText.indexOf(text, this.privNextSearchTextIndex);\r\n            if (this.privTextOffset >= 0) {\r\n                this.privNextSearchTextIndex = this.privTextOffset + text.length;\r\n                if (this.privIsSSML) {\r\n                    if (this.withinXmlTag(this.privTextOffset) && !SynthesisTurn.isXmlTag(text)) {\r\n                        this.updateTextOffset(text, type);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.privSentenceOffset = this.privRawText.indexOf(text, this.privNextSearchSentenceIndex);\r\n            if (this.privSentenceOffset >= 0) {\r\n                this.privNextSearchSentenceIndex = this.privSentenceOffset + text.length;\r\n                if (this.privIsSSML) {\r\n                    if (this.withinXmlTag(this.privSentenceOffset) && !SynthesisTurn.isXmlTag(text)) {\r\n                        this.updateTextOffset(text, type);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    onComplete() {\r\n        if (this.privIsSynthesizing) {\r\n            this.privIsSynthesizing = false;\r\n            this.privIsSynthesisEnded = true;\r\n            this.privAudioOutputStream.close();\r\n            this.privInTurn = false;\r\n            if (this.privTurnAudioDestination !== undefined) {\r\n                this.privTurnAudioDestination.close();\r\n                this.privTurnAudioDestination = undefined;\r\n            }\r\n        }\r\n    }\r\n    readAllAudioFromStream() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (this.privIsSynthesisEnded) {\r\n                this.privReceivedAudio = new ArrayBuffer(this.bytesReceived);\r\n                try {\r\n                    yield this.privAudioOutputStream.read(this.privReceivedAudio);\r\n                }\r\n                catch (e) {\r\n                    this.privReceivedAudio = new ArrayBuffer(0);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Check if current idx is in XML(SSML) tag\r\n     * @param idx\r\n     * @private\r\n     */\r\n    withinXmlTag(idx) {\r\n        return this.privRawText.indexOf(\"<\", idx + 1) > this.privRawText.indexOf(\">\", idx + 1);\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=SynthesisTurn.js.map\r\n","import { RestConfigBase, RestMessageAdapter, RestRequestType, } from \"../common.browser/Exports\";\r\nimport { PropertyId, } from \"../sdk/Exports\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\n/**\r\n * Implements methods for speaker recognition classes, sending requests to endpoint\r\n * and parsing response into expected format\r\n * @class SynthesisRestAdapter\r\n */\r\nexport class SynthesisRestAdapter {\r\n    constructor(config, authentication) {\r\n        let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        if (!endpoint) {\r\n            const region = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"westus\");\r\n            const hostSuffix = ConnectionFactoryBase.getHostSuffix(region);\r\n            endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `https://${region}.tts.speech${hostSuffix}`);\r\n        }\r\n        this.privUri = `${endpoint}/cognitiveservices/voices/list`;\r\n        const options = RestConfigBase.requestOptions;\r\n        this.privRestAdapter = new RestMessageAdapter(options);\r\n        this.privAuthentication = authentication;\r\n    }\r\n    /**\r\n     * Sends list voices request to endpoint.\r\n     * @function\r\n     * @public\r\n     * @param connectionId - guid for connectionId\r\n     * @returns {Promise<IRestResponse>} rest response to status request\r\n     */\r\n    getVoicesList(connectionId) {\r\n        this.privRestAdapter.setHeaders(HeaderNames.ConnectionId, connectionId);\r\n        return this.privAuthentication.fetch(connectionId).then((authInfo) => {\r\n            this.privRestAdapter.setHeaders(authInfo.headerName, authInfo.token);\r\n            return this.privRestAdapter.request(RestRequestType.Get, this.privUri);\r\n        });\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=SynthesisRestAdapter.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { Context, SpeechServiceConfig } from \"./Exports\";\r\nexport var SynthesisServiceType;\r\n(function (SynthesisServiceType) {\r\n    SynthesisServiceType[SynthesisServiceType[\"Standard\"] = 0] = \"Standard\";\r\n    SynthesisServiceType[SynthesisServiceType[\"Custom\"] = 1] = \"Custom\";\r\n})(SynthesisServiceType || (SynthesisServiceType = {}));\r\nexport class SynthesizerConfig {\r\n    constructor(speechServiceConfig, parameters) {\r\n        this.privSynthesisServiceType = SynthesisServiceType.Standard;\r\n        this.privSpeechServiceConfig = speechServiceConfig ? speechServiceConfig : new SpeechServiceConfig(new Context(null));\r\n        this.privParameters = parameters;\r\n    }\r\n    get parameters() {\r\n        return this.privParameters;\r\n    }\r\n    get synthesisServiceType() {\r\n        return this.privSynthesisServiceType;\r\n    }\r\n    set synthesisServiceType(value) {\r\n        this.privSynthesisServiceType = value;\r\n    }\r\n    get SpeechServiceConfig() {\r\n        return this.privSpeechServiceConfig;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=SynthesizerConfig.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { PropertyId } from \"../sdk/Exports\";\r\n/**\r\n * Represents the JSON used in the synthesis.context message sent to the speech service.\r\n * The dynamic grammar is always refreshed from the encapsulated dynamic grammar object.\r\n */\r\nexport class SynthesisContext {\r\n    constructor(speechSynthesizer) {\r\n        this.privContext = {};\r\n        this.privSpeechSynthesizer = speechSynthesizer;\r\n    }\r\n    /**\r\n     * Adds a section to the synthesis.context object.\r\n     * @param sectionName Name of the section to add.\r\n     * @param value JSON serializable object that represents the value.\r\n     */\r\n    setSection(sectionName, value) {\r\n        this.privContext[sectionName] = value;\r\n    }\r\n    /**\r\n     * Sets the audio output format for synthesis context generation.\r\n     * @param format {AudioOutputFormatImpl} the output format\r\n     */\r\n    set audioOutputFormat(format) {\r\n        this.privAudioOutputFormat = format;\r\n    }\r\n    toJSON() {\r\n        const synthesisSection = this.buildSynthesisContext();\r\n        this.setSection(\"synthesis\", synthesisSection);\r\n        return JSON.stringify(this.privContext);\r\n    }\r\n    buildSynthesisContext() {\r\n        return {\r\n            audio: {\r\n                metadataOptions: {\r\n                    bookmarkEnabled: (!!this.privSpeechSynthesizer.bookmarkReached),\r\n                    punctuationBoundaryEnabled: this.privSpeechSynthesizer.properties.getProperty(PropertyId.SpeechServiceResponse_RequestPunctuationBoundary, (!!this.privSpeechSynthesizer.wordBoundary)),\r\n                    sentenceBoundaryEnabled: this.privSpeechSynthesizer.properties.getProperty(PropertyId.SpeechServiceResponse_RequestSentenceBoundary, false),\r\n                    sessionEndEnabled: true,\r\n                    visemeEnabled: (!!this.privSpeechSynthesizer.visemeReceived),\r\n                    wordBoundaryEnabled: this.privSpeechSynthesizer.properties.getProperty(PropertyId.SpeechServiceResponse_RequestWordBoundary, (!!this.privSpeechSynthesizer.wordBoundary)),\r\n                },\r\n                outputFormat: this.privAudioOutputFormat.requestAudioFormatString,\r\n            },\r\n            language: {\r\n                autoDetection: this.privSpeechSynthesizer.autoDetectSourceLanguage\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=SynthesisContext.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Make sure not to export internal modules.\r\n//\r\nexport * from \"./CognitiveSubscriptionKeyAuthentication\";\r\nexport * from \"./CognitiveTokenAuthentication\";\r\nexport * from \"./IAuthentication\";\r\nexport * from \"./IConnectionFactory\";\r\nexport * from \"./ISynthesisConnectionFactory\";\r\nexport * from \"./IntentConnectionFactory\";\r\nexport * from \"./RecognitionEvents\";\r\nexport * from \"./ServiceRecognizerBase\";\r\nexport * from \"./ConversationServiceRecognizer\";\r\nexport * from \"./RecognizerConfig\";\r\nexport * from \"./SpeechServiceInterfaces\";\r\nexport * from \"./WebsocketMessageFormatter\";\r\nexport * from \"./SpeechConnectionFactory\";\r\nexport * from \"./TranscriberConnectionFactory\";\r\nexport * from \"./TranslationConnectionFactory\";\r\nexport * from \"./SpeechSynthesisConnectionFactory\";\r\nexport * from \"./EnumTranslation\";\r\nexport * from \"./ServiceMessages/Enums\";\r\nexport * from \"./ServiceMessages/TranslationSynthesisEnd\";\r\nexport * from \"./ServiceMessages/TranslationHypothesis\";\r\nexport * from \"./ServiceMessages/TranslationPhrase\";\r\nexport * from \"./TranslationServiceRecognizer\";\r\nexport * from \"./ServiceMessages/SpeechDetected\";\r\nexport * from \"./ServiceMessages/SpeechHypothesis\";\r\nexport * from \"./ServiceMessages/SpeechKeyword\";\r\nexport * from \"./SpeechServiceRecognizer\";\r\nexport * from \"./TranscriptionServiceRecognizer\";\r\nexport * from \"./ServiceMessages/DetailedSpeechPhrase\";\r\nexport * from \"./ServiceMessages/SimpleSpeechPhrase\";\r\nexport * from \"./AddedLmIntent\";\r\nexport * from \"./IntentServiceRecognizer\";\r\nexport * from \"./ServiceMessages/IntentResponse\";\r\nexport * from \"./RequestSession\";\r\nexport * from \"./SpeechContext\";\r\nexport * from \"./DynamicGrammarBuilder\";\r\nexport * from \"./DynamicGrammarInterfaces\";\r\nexport * from \"./DialogServiceAdapter\";\r\nexport * from \"./AgentConfig\";\r\nexport * from \"./Transcription/Exports\";\r\nexport * from \"./ServiceMessages/SynthesisAudioMetadata\";\r\nexport * from \"./SynthesisTurn\";\r\nexport * from \"./SynthesisAdapterBase\";\r\nexport * from \"./SynthesisRestAdapter\";\r\nexport * from \"./SynthesizerConfig\";\r\nexport * from \"./SynthesisContext\";\r\nexport * from \"./SpeakerRecognitionConfig\";\r\nexport * from \"./SpeakerIdMessageAdapter\";\r\nexport const OutputFormatPropertyName = \"OutputFormat\";\r\nexport const CancellationErrorCodePropertyName = \"CancellationErrorCode\";\r\nexport const ServicePropertiesPropertyName = \"ServiceProperties\";\r\nexport const ForceDictationPropertyName = \"ForceDictation\";\r\nexport const AutoDetectSourceLanguagesOpenRangeOptionName = \"OpenRange\";\r\n\r\n//# sourceMappingURL=Exports.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { connectivity, type } from \"../common.speech/Exports\";\r\nimport { AudioSourceErrorEvent, AudioSourceInitializingEvent, AudioSourceOffEvent, AudioSourceReadyEvent, AudioStreamNodeAttachedEvent, AudioStreamNodeAttachingEvent, AudioStreamNodeDetachedEvent, AudioStreamNodeErrorEvent, ChunkedArrayBufferStream, createNoDashGuid, Deferred, Events, EventSource, } from \"../common/Exports\";\r\nimport { AudioStreamFormat, AudioStreamFormatImpl, } from \"../sdk/Audio/AudioStreamFormat\";\r\nexport const AudioWorkletSourceURLPropertyName = \"MICROPHONE-WorkletSourceUrl\";\r\nexport class MicAudioSource {\r\n    constructor(privRecorder, deviceId, audioSourceId, mediaStream) {\r\n        this.privRecorder = privRecorder;\r\n        this.deviceId = deviceId;\r\n        this.privStreams = {};\r\n        this.privOutputChunkSize = MicAudioSource.AUDIOFORMAT.avgBytesPerSec / 10;\r\n        this.privId = audioSourceId ? audioSourceId : createNoDashGuid();\r\n        this.privEvents = new EventSource();\r\n        this.privMediaStream = mediaStream || null;\r\n        this.privIsClosing = false;\r\n    }\r\n    get format() {\r\n        return Promise.resolve(MicAudioSource.AUDIOFORMAT);\r\n    }\r\n    get blob() {\r\n        return Promise.reject(\"Not implemented for Mic input\");\r\n    }\r\n    turnOn() {\r\n        if (this.privInitializeDeferral) {\r\n            return this.privInitializeDeferral.promise;\r\n        }\r\n        this.privInitializeDeferral = new Deferred();\r\n        try {\r\n            this.createAudioContext();\r\n        }\r\n        catch (error) {\r\n            if (error instanceof Error) {\r\n                const typedError = error;\r\n                this.privInitializeDeferral.reject(typedError.name + \": \" + typedError.message);\r\n            }\r\n            else {\r\n                this.privInitializeDeferral.reject(error);\r\n            }\r\n            return this.privInitializeDeferral.promise;\r\n        }\r\n        const nav = window.navigator;\r\n        let getUserMedia = (\r\n        // eslint-disable-next-line\r\n        nav.getUserMedia ||\r\n            nav.webkitGetUserMedia ||\r\n            nav.mozGetUserMedia ||\r\n            nav.msGetUserMedia);\r\n        if (!!nav.mediaDevices) {\r\n            getUserMedia = (constraints, successCallback, errorCallback) => {\r\n                nav.mediaDevices\r\n                    .getUserMedia(constraints)\r\n                    .then(successCallback)\r\n                    .catch(errorCallback);\r\n            };\r\n        }\r\n        if (!getUserMedia) {\r\n            const errorMsg = \"Browser does not support getUserMedia.\";\r\n            this.privInitializeDeferral.reject(errorMsg);\r\n            this.onEvent(new AudioSourceErrorEvent(errorMsg, \"\")); // mic initialized error - no streamid at this point\r\n        }\r\n        else {\r\n            const next = () => {\r\n                this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n                if (this.privMediaStream && this.privMediaStream.active) {\r\n                    this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n                    this.privInitializeDeferral.resolve();\r\n                }\r\n                else {\r\n                    getUserMedia({ audio: this.deviceId ? { deviceId: this.deviceId } : true, video: false }, (mediaStream) => {\r\n                        this.privMediaStream = mediaStream;\r\n                        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n                        this.privInitializeDeferral.resolve();\r\n                    }, (error) => {\r\n                        const errorMsg = `Error occurred during microphone initialization: ${error}`;\r\n                        this.privInitializeDeferral.reject(errorMsg);\r\n                        this.onEvent(new AudioSourceErrorEvent(this.privId, errorMsg));\r\n                    });\r\n                }\r\n            };\r\n            if (this.privContext.state === \"suspended\") {\r\n                // NOTE: On iOS, the Web Audio API requires sounds to be triggered from an explicit user action.\r\n                // https://github.com/WebAudio/web-audio-api/issues/790\r\n                this.privContext.resume()\r\n                    .then(next)\r\n                    .catch((reason) => {\r\n                    this.privInitializeDeferral.reject(`Failed to initialize audio context: ${reason}`);\r\n                });\r\n            }\r\n            else {\r\n                next();\r\n            }\r\n        }\r\n        return this.privInitializeDeferral.promise;\r\n    }\r\n    id() {\r\n        return this.privId;\r\n    }\r\n    attach(audioNodeId) {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n        return this.listen(audioNodeId).then((stream) => {\r\n            this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n            return {\r\n                detach: () => __awaiter(this, void 0, void 0, function* () {\r\n                    stream.readEnded();\r\n                    delete this.privStreams[audioNodeId];\r\n                    this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                    return this.turnOff();\r\n                }),\r\n                id: () => audioNodeId,\r\n                read: () => stream.read(),\r\n            };\r\n        });\r\n    }\r\n    detach(audioNodeId) {\r\n        if (audioNodeId && this.privStreams[audioNodeId]) {\r\n            this.privStreams[audioNodeId].close();\r\n            delete this.privStreams[audioNodeId];\r\n            this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n        }\r\n    }\r\n    turnOff() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            for (const streamId in this.privStreams) {\r\n                if (streamId) {\r\n                    const stream = this.privStreams[streamId];\r\n                    if (stream) {\r\n                        stream.close();\r\n                    }\r\n                }\r\n            }\r\n            this.onEvent(new AudioSourceOffEvent(this.privId)); // no stream now\r\n            if (this.privInitializeDeferral) {\r\n                // Correctly handle when browser forces mic off before turnOn() completes\r\n                // eslint-disable-next-line @typescript-eslint/await-thenable\r\n                yield this.privInitializeDeferral;\r\n                this.privInitializeDeferral = null;\r\n            }\r\n            yield this.destroyAudioContext();\r\n            return;\r\n        });\r\n    }\r\n    get events() {\r\n        return this.privEvents;\r\n    }\r\n    get deviceInfo() {\r\n        return this.getMicrophoneLabel().then((label) => ({\r\n            bitspersample: MicAudioSource.AUDIOFORMAT.bitsPerSample,\r\n            channelcount: MicAudioSource.AUDIOFORMAT.channels,\r\n            connectivity: connectivity.Unknown,\r\n            manufacturer: \"Speech SDK\",\r\n            model: label,\r\n            samplerate: MicAudioSource.AUDIOFORMAT.samplesPerSec,\r\n            type: type.Microphones,\r\n        }));\r\n    }\r\n    setProperty(name, value) {\r\n        if (name === AudioWorkletSourceURLPropertyName) {\r\n            this.privRecorder.setWorkletUrl(value);\r\n        }\r\n        else {\r\n            throw new Error(\"Property '\" + name + \"' is not supported on Microphone.\");\r\n        }\r\n    }\r\n    getMicrophoneLabel() {\r\n        const defaultMicrophoneName = \"microphone\";\r\n        // If we did this already, return the value.\r\n        if (this.privMicrophoneLabel !== undefined) {\r\n            return Promise.resolve(this.privMicrophoneLabel);\r\n        }\r\n        // If the stream isn't currently running, we can't query devices because security.\r\n        if (this.privMediaStream === undefined || !this.privMediaStream.active) {\r\n            return Promise.resolve(defaultMicrophoneName);\r\n        }\r\n        // Setup a default\r\n        this.privMicrophoneLabel = defaultMicrophoneName;\r\n        // Get the id of the device running the audio track.\r\n        const microphoneDeviceId = this.privMediaStream.getTracks()[0].getSettings().deviceId;\r\n        // If the browser doesn't support getting the device ID, set a default and return.\r\n        if (undefined === microphoneDeviceId) {\r\n            return Promise.resolve(this.privMicrophoneLabel);\r\n        }\r\n        const deferred = new Deferred();\r\n        // Enumerate the media devices.\r\n        navigator.mediaDevices.enumerateDevices().then((devices) => {\r\n            for (const device of devices) {\r\n                if (device.deviceId === microphoneDeviceId) {\r\n                    // Found the device\r\n                    this.privMicrophoneLabel = device.label;\r\n                    break;\r\n                }\r\n            }\r\n            deferred.resolve(this.privMicrophoneLabel);\r\n        }, () => deferred.resolve(this.privMicrophoneLabel));\r\n        return deferred.promise;\r\n    }\r\n    listen(audioNodeId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            yield this.turnOn();\r\n            const stream = new ChunkedArrayBufferStream(this.privOutputChunkSize, audioNodeId);\r\n            this.privStreams[audioNodeId] = stream;\r\n            try {\r\n                this.privRecorder.record(this.privContext, this.privMediaStream, stream);\r\n            }\r\n            catch (error) {\r\n                this.onEvent(new AudioStreamNodeErrorEvent(this.privId, audioNodeId, error));\r\n                throw error;\r\n            }\r\n            const result = stream;\r\n            return result;\r\n        });\r\n    }\r\n    onEvent(event) {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n    createAudioContext() {\r\n        if (!!this.privContext) {\r\n            return;\r\n        }\r\n        this.privContext = AudioStreamFormatImpl.getAudioContext(MicAudioSource.AUDIOFORMAT.samplesPerSec);\r\n    }\r\n    destroyAudioContext() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!this.privContext) {\r\n                return;\r\n            }\r\n            this.privRecorder.releaseMediaResources(this.privContext);\r\n            // This pattern brought to you by a bug in the TypeScript compiler where it\r\n            // confuses the (\"close\" in this.privContext) with this.privContext always being null as the alternate.\r\n            // https://github.com/Microsoft/TypeScript/issues/11498\r\n            let hasClose = false;\r\n            if (\"close\" in this.privContext) {\r\n                hasClose = true;\r\n            }\r\n            if (hasClose) {\r\n                if (!this.privIsClosing) {\r\n                    // The audio context close may take enough time that the close is called twice\r\n                    this.privIsClosing = true;\r\n                    yield this.privContext.close();\r\n                    this.privContext = null;\r\n                    this.privIsClosing = false;\r\n                }\r\n            }\r\n            else if (null !== this.privContext && this.privContext.state === \"running\") {\r\n                // Suspend actually takes a callback, but analogous to the\r\n                // resume method, it'll be only fired if suspend is called\r\n                // in a direct response to a user action. The later is not always\r\n                // the case, as TurnOff is also called, when we receive an\r\n                // end-of-speech message from the service. So, doing a best effort\r\n                // fire-and-forget here.\r\n                yield this.privContext.suspend();\r\n            }\r\n        });\r\n    }\r\n}\r\nMicAudioSource.AUDIOFORMAT = AudioStreamFormat.getDefaultInputFormat();\r\n\r\n//# sourceMappingURL=MicAudioSource.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { connectivity, type, } from \"../common.speech/Exports\";\r\nimport { AudioSourceErrorEvent, AudioSourceInitializingEvent, AudioSourceOffEvent, AudioSourceReadyEvent, AudioStreamNodeAttachedEvent, AudioStreamNodeAttachingEvent, AudioStreamNodeDetachedEvent, AudioStreamNodeErrorEvent, ChunkedArrayBufferStream, createNoDashGuid, Deferred, Events, EventSource, } from \"../common/Exports\";\r\nimport { AudioStreamFormat } from \"../sdk/Audio/AudioStreamFormat\";\r\nexport class FileAudioSource {\r\n    constructor(file, filename, audioSourceId) {\r\n        this.privStreams = {};\r\n        this.privHeaderEnd = 44;\r\n        this.privId = audioSourceId ? audioSourceId : createNoDashGuid();\r\n        this.privEvents = new EventSource();\r\n        this.privSource = file;\r\n        if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && this.privSource instanceof Blob) {\r\n            this.privFilename = file.name;\r\n        }\r\n        else {\r\n            this.privFilename = filename || \"unknown.wav\";\r\n        }\r\n        // Read the header.\r\n        this.privAudioFormatPromise = this.readHeader();\r\n    }\r\n    get format() {\r\n        return this.privAudioFormatPromise;\r\n    }\r\n    get blob() {\r\n        return Promise.resolve(this.privSource);\r\n    }\r\n    turnOn() {\r\n        if (this.privFilename.lastIndexOf(\".wav\") !== this.privFilename.length - 4) {\r\n            const errorMsg = this.privFilename + \" is not supported. Only WAVE files are allowed at the moment.\";\r\n            this.onEvent(new AudioSourceErrorEvent(errorMsg, \"\"));\r\n            return Promise.reject(errorMsg);\r\n        }\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return;\r\n    }\r\n    id() {\r\n        return this.privId;\r\n    }\r\n    attach(audioNodeId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n            const stream = yield this.upload(audioNodeId);\r\n            this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n            return Promise.resolve({\r\n                detach: () => __awaiter(this, void 0, void 0, function* () {\r\n                    stream.readEnded();\r\n                    delete this.privStreams[audioNodeId];\r\n                    this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                    yield this.turnOff();\r\n                }),\r\n                id: () => audioNodeId,\r\n                read: () => stream.read(),\r\n            });\r\n        });\r\n    }\r\n    detach(audioNodeId) {\r\n        if (audioNodeId && this.privStreams[audioNodeId]) {\r\n            this.privStreams[audioNodeId].close();\r\n            delete this.privStreams[audioNodeId];\r\n            this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n        }\r\n    }\r\n    turnOff() {\r\n        for (const streamId in this.privStreams) {\r\n            if (streamId) {\r\n                const stream = this.privStreams[streamId];\r\n                if (stream && !stream.isClosed) {\r\n                    stream.close();\r\n                }\r\n            }\r\n        }\r\n        this.onEvent(new AudioSourceOffEvent(this.privId)); // no stream now\r\n        return Promise.resolve();\r\n    }\r\n    get events() {\r\n        return this.privEvents;\r\n    }\r\n    get deviceInfo() {\r\n        return this.privAudioFormatPromise.then((result) => (Promise.resolve({\r\n            bitspersample: result.bitsPerSample,\r\n            channelcount: result.channels,\r\n            connectivity: connectivity.Unknown,\r\n            manufacturer: \"Speech SDK\",\r\n            model: \"File\",\r\n            samplerate: result.samplesPerSec,\r\n            type: type.File,\r\n        })));\r\n    }\r\n    readHeader() {\r\n        // Read the wave header.\r\n        const maxHeaderSize = 4296;\r\n        const header = this.privSource.slice(0, maxHeaderSize);\r\n        const headerResult = new Deferred();\r\n        const processHeader = (header) => {\r\n            const view = new DataView(header);\r\n            const getWord = (index) => String.fromCharCode(view.getUint8(index), view.getUint8(index + 1), view.getUint8(index + 2), view.getUint8(index + 3));\r\n            // RIFF 4 bytes.\r\n            if (\"RIFF\" !== getWord(0)) {\r\n                headerResult.reject(\"Invalid WAV header in file, RIFF was not found\");\r\n                return;\r\n            }\r\n            // length, 4 bytes\r\n            // RIFF Type & fmt 8 bytes\r\n            if (\"WAVE\" !== getWord(8) || \"fmt \" !== getWord(12)) {\r\n                headerResult.reject(\"Invalid WAV header in file, WAVEfmt was not found\");\r\n                return;\r\n            }\r\n            const formatSize = view.getInt32(16, true);\r\n            const channelCount = view.getUint16(22, true);\r\n            const sampleRate = view.getUint32(24, true);\r\n            const bitsPerSample = view.getUint16(34, true);\r\n            // Confirm if header is 44 bytes long.\r\n            let pos = 36 + Math.max(formatSize - 16, 0);\r\n            for (; getWord(pos) !== \"data\"; pos += 2) {\r\n                if (pos > maxHeaderSize - 8) {\r\n                    headerResult.reject(\"Invalid WAV header in file, data block was not found\");\r\n                    return;\r\n                }\r\n            }\r\n            this.privHeaderEnd = pos + 8;\r\n            headerResult.resolve(AudioStreamFormat.getWaveFormatPCM(sampleRate, bitsPerSample, channelCount));\r\n        };\r\n        if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && header instanceof Blob) {\r\n            const reader = new FileReader();\r\n            reader.onload = (event) => {\r\n                const header = event.target.result;\r\n                processHeader(header);\r\n            };\r\n            reader.readAsArrayBuffer(header);\r\n        }\r\n        else {\r\n            const h = header;\r\n            processHeader(h.buffer.slice(h.byteOffset, h.byteOffset + h.byteLength));\r\n        }\r\n        return headerResult.promise;\r\n    }\r\n    upload(audioNodeId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const onerror = (error) => {\r\n                const errorMsg = `Error occurred while processing '${this.privFilename}'. ${error}`;\r\n                this.onEvent(new AudioStreamNodeErrorEvent(this.privId, audioNodeId, errorMsg));\r\n                throw new Error(errorMsg);\r\n            };\r\n            try {\r\n                yield this.turnOn();\r\n                const format = yield this.privAudioFormatPromise;\r\n                const stream = new ChunkedArrayBufferStream(format.avgBytesPerSec / 10, audioNodeId);\r\n                this.privStreams[audioNodeId] = stream;\r\n                const chunk = this.privSource.slice(this.privHeaderEnd);\r\n                const processFile = (buff) => {\r\n                    if (stream.isClosed) {\r\n                        return; // output stream was closed (somebody called TurnOff). We're done here.\r\n                    }\r\n                    stream.writeStreamChunk({\r\n                        buffer: buff,\r\n                        isEnd: false,\r\n                        timeReceived: Date.now(),\r\n                    });\r\n                    stream.close();\r\n                };\r\n                if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && chunk instanceof Blob) {\r\n                    const reader = new FileReader();\r\n                    reader.onerror = (ev) => onerror(ev.toString());\r\n                    reader.onload = (event) => {\r\n                        const fileBuffer = event.target.result;\r\n                        processFile(fileBuffer);\r\n                    };\r\n                    reader.readAsArrayBuffer(chunk);\r\n                }\r\n                else {\r\n                    const c = chunk;\r\n                    processFile(c.buffer.slice(c.byteOffset, c.byteOffset + c.byteLength));\r\n                }\r\n                return stream;\r\n            }\r\n            catch (e) {\r\n                onerror(e);\r\n            }\r\n        });\r\n    }\r\n    onEvent(event) {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=FileAudioSource.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { RiffPcmEncoder } from \"../common/Exports\";\r\nexport class PcmRecorder {\r\n    constructor(stopInputOnRelease) {\r\n        this.privStopInputOnRelease = stopInputOnRelease;\r\n    }\r\n    record(context, mediaStream, outputStream) {\r\n        const desiredSampleRate = 16000;\r\n        const waveStreamEncoder = new RiffPcmEncoder(context.sampleRate, desiredSampleRate);\r\n        const micInput = context.createMediaStreamSource(mediaStream);\r\n        const attachScriptProcessor = () => {\r\n            // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\r\n            const scriptNode = (() => {\r\n                let bufferSize = 0;\r\n                try {\r\n                    return context.createScriptProcessor(bufferSize, 1, 1);\r\n                }\r\n                catch (error) {\r\n                    // Webkit (<= version 31) requires a valid bufferSize.\r\n                    bufferSize = 2048;\r\n                    let audioSampleRate = context.sampleRate;\r\n                    while (bufferSize < 16384 && audioSampleRate >= (2 * desiredSampleRate)) {\r\n                        bufferSize <<= 1;\r\n                        audioSampleRate >>= 1;\r\n                    }\r\n                    return context.createScriptProcessor(bufferSize, 1, 1);\r\n                }\r\n            })();\r\n            scriptNode.onaudioprocess = (event) => {\r\n                const inputFrame = event.inputBuffer.getChannelData(0);\r\n                if (outputStream && !outputStream.isClosed) {\r\n                    const waveFrame = waveStreamEncoder.encode(inputFrame);\r\n                    if (!!waveFrame) {\r\n                        outputStream.writeStreamChunk({\r\n                            buffer: waveFrame,\r\n                            isEnd: false,\r\n                            timeReceived: Date.now(),\r\n                        });\r\n                    }\r\n                }\r\n            };\r\n            micInput.connect(scriptNode);\r\n            scriptNode.connect(context.destination);\r\n            this.privMediaResources = {\r\n                scriptProcessorNode: scriptNode,\r\n                source: micInput,\r\n                stream: mediaStream,\r\n            };\r\n        };\r\n        // https://webaudio.github.io/web-audio-api/#audioworklet\r\n        // Using AudioWorklet to improve audio quality and avoid audio glitches due to blocking the UI thread\r\n        if (!!context.audioWorklet) {\r\n            if (!this.privSpeechProcessorScript) {\r\n                const workletScript = `class SP extends AudioWorkletProcessor {\r\n                    constructor(options) {\r\n                      super(options);\r\n                    }\r\n                    process(inputs, outputs) {\r\n                      const input = inputs[0];\r\n                      const output = [];\r\n                      for (let channel = 0; channel < input.length; channel += 1) {\r\n                        output[channel] = input[channel];\r\n                      }\r\n                      this.port.postMessage(output[0]);\r\n                      return true;\r\n                    }\r\n                  }\r\n                  registerProcessor('speech-processor', SP);`;\r\n                const blob = new Blob([workletScript], { type: \"application/javascript; charset=utf-8\" });\r\n                this.privSpeechProcessorScript = URL.createObjectURL(blob);\r\n            }\r\n            context.audioWorklet\r\n                .addModule(this.privSpeechProcessorScript)\r\n                .then(() => {\r\n                const workletNode = new AudioWorkletNode(context, \"speech-processor\");\r\n                workletNode.port.onmessage = (ev) => {\r\n                    const inputFrame = ev.data;\r\n                    if (outputStream && !outputStream.isClosed) {\r\n                        const waveFrame = waveStreamEncoder.encode(inputFrame);\r\n                        if (!!waveFrame) {\r\n                            outputStream.writeStreamChunk({\r\n                                buffer: waveFrame,\r\n                                isEnd: false,\r\n                                timeReceived: Date.now(),\r\n                            });\r\n                        }\r\n                    }\r\n                };\r\n                micInput.connect(workletNode);\r\n                workletNode.connect(context.destination);\r\n                this.privMediaResources = {\r\n                    scriptProcessorNode: workletNode,\r\n                    source: micInput,\r\n                    stream: mediaStream,\r\n                };\r\n            })\r\n                .catch(() => {\r\n                attachScriptProcessor();\r\n            });\r\n        }\r\n        else {\r\n            try {\r\n                attachScriptProcessor();\r\n            }\r\n            catch (err) {\r\n                throw new Error(`Unable to start audio worklet node for PCMRecorder: ${err}`);\r\n            }\r\n        }\r\n    }\r\n    releaseMediaResources(context) {\r\n        if (this.privMediaResources) {\r\n            if (this.privMediaResources.scriptProcessorNode) {\r\n                this.privMediaResources.scriptProcessorNode.disconnect(context.destination);\r\n                this.privMediaResources.scriptProcessorNode = null;\r\n            }\r\n            if (this.privMediaResources.source) {\r\n                this.privMediaResources.source.disconnect();\r\n                if (this.privStopInputOnRelease) {\r\n                    this.privMediaResources.stream.getTracks().forEach((track) => track.stop());\r\n                }\r\n                this.privMediaResources.source = null;\r\n            }\r\n        }\r\n    }\r\n    setWorkletUrl(url) {\r\n        this.privSpeechProcessorScript = url;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=PCMRecorder.js.map\r\n","/* eslint-disable import/order */\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport * as tls from \"tls\";\r\nimport * as ocsp from \"../../external/ocsp/ocsp\";\r\nimport { Events, OCSPCacheEntryExpiredEvent, OCSPCacheEntryNeedsRefreshEvent, OCSPCacheFetchErrorEvent, OCSPCacheHitEvent, OCSPCacheMissEvent, OCSPCacheUpdateCompleteEvent, OCSPCacheUpdateNeededEvent, OCSPDiskCacheHitEvent, OCSPDiskCacheStoreEvent, OCSPMemoryCacheHitEvent, OCSPMemoryCacheStoreEvent, OCSPResponseRetrievedEvent, OCSPStapleReceivedEvent, OCSPVerificationFailedEvent, } from \"../common/Exports\";\r\nimport Agent from \"agent-base\";\r\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n// @ts-ignore\r\nimport Cache from \"async-disk-cache\";\r\nimport HttpsProxyAgent from \"https-proxy-agent\";\r\nimport * as net from \"net\";\r\nimport { OCSPCacheUpdateErrorEvent } from \"../common/OCSPEvents\";\r\nexport class CertCheckAgent {\r\n    constructor(proxyInfo) {\r\n        if (!!proxyInfo) {\r\n            this.privProxyInfo = proxyInfo;\r\n        }\r\n        // Initialize this here to allow tests to set the env variable before the cache is constructed.\r\n        if (!CertCheckAgent.privDiskCache) {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call\r\n            CertCheckAgent.privDiskCache = new Cache(\"microsoft-cognitiveservices-speech-sdk-cache\", { supportBuffer: true, location: (typeof process !== \"undefined\" && !!process.env.SPEECH_OCSP_CACHE_ROOT) ? process.env.SPEECH_OCSP_CACHE_ROOT : undefined });\r\n        }\r\n    }\r\n    // Test hook to force the disk cache to be recreated.\r\n    static forceReinitDiskCache() {\r\n        CertCheckAgent.privDiskCache = undefined;\r\n        CertCheckAgent.privMemCache = {};\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    GetAgent(disableStapling) {\r\n        // eslint-disable-next-line @typescript-eslint/unbound-method\r\n        const agent = new Agent.Agent(this.CreateConnection);\r\n        if (this.privProxyInfo !== undefined &&\r\n            this.privProxyInfo.HostName !== undefined &&\r\n            this.privProxyInfo.Port > 0) {\r\n            const proxyName = \"privProxyInfo\";\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n            agent[proxyName] = this.privProxyInfo;\r\n        }\r\n        return agent;\r\n    }\r\n    static GetProxyAgent(proxyInfo) {\r\n        const httpProxyOptions = {\r\n            host: proxyInfo.HostName,\r\n            port: proxyInfo.Port,\r\n        };\r\n        if (!!proxyInfo.UserName) {\r\n            httpProxyOptions.headers = {\r\n                \"Proxy-Authentication\": \"Basic \" + new Buffer(`${proxyInfo.UserName}:${(proxyInfo.Password === undefined) ? \"\" : proxyInfo.Password}`).toString(\"base64\"),\r\n            };\r\n        }\r\n        else {\r\n            httpProxyOptions.headers = {};\r\n        }\r\n        httpProxyOptions.headers.requestOCSP = \"true\";\r\n        const httpProxyAgent = new HttpsProxyAgent(httpProxyOptions);\r\n        return httpProxyAgent;\r\n    }\r\n    static OCSPCheck(socketPromise, proxyInfo) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let ocspRequest;\r\n            let stapling;\r\n            let resolved = false;\r\n            const socket = yield socketPromise;\r\n            socket.cork();\r\n            const tlsSocket = socket;\r\n            return new Promise((resolve, reject) => {\r\n                socket.on(\"OCSPResponse\", (data) => {\r\n                    if (!!data) {\r\n                        this.onEvent(new OCSPStapleReceivedEvent());\r\n                        stapling = data;\r\n                    }\r\n                });\r\n                socket.on(\"error\", (error) => {\r\n                    if (!resolved) {\r\n                        resolved = true;\r\n                        socket.destroy();\r\n                        reject(error);\r\n                    }\r\n                });\r\n                // eslint-disable-next-line @typescript-eslint/no-misused-promises, @typescript-eslint/explicit-function-return-type\r\n                tlsSocket.on(\"secure\", () => __awaiter(this, void 0, void 0, function* () {\r\n                    const peer = tlsSocket.getPeerCertificate(true);\r\n                    try {\r\n                        const issuer = yield this.GetIssuer(peer);\r\n                        // We always need a request to verify the response.\r\n                        ocspRequest = ocsp.request.generate(peer.raw, issuer.raw);\r\n                        // Do we have a result for this certificate in our memory cache?\r\n                        const sig = ocspRequest.id.toString(\"hex\");\r\n                        // Stapled response trumps cached response.\r\n                        if (!stapling) {\r\n                            const cacheEntry = yield CertCheckAgent.GetResponseFromCache(sig, ocspRequest, proxyInfo);\r\n                            stapling = cacheEntry;\r\n                        }\r\n                        yield this.VerifyOCSPResponse(stapling, ocspRequest, proxyInfo);\r\n                        socket.uncork();\r\n                        resolved = true;\r\n                        resolve(socket);\r\n                    }\r\n                    catch (e) {\r\n                        socket.destroy();\r\n                        resolved = true;\r\n                        reject(e);\r\n                    }\r\n                }));\r\n            });\r\n        });\r\n    }\r\n    static GetIssuer(peer) {\r\n        if (peer.issuerCertificate) {\r\n            return Promise.resolve(peer.issuerCertificate);\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            const ocspAgent = new ocsp.Agent({});\r\n            ocspAgent.fetchIssuer(peer, null, (error, value) => {\r\n                if (!!error) {\r\n                    reject(error);\r\n                    return;\r\n                }\r\n                resolve(value);\r\n            });\r\n        });\r\n    }\r\n    static GetResponseFromCache(signature, ocspRequest, proxyInfo) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let cachedResponse = CertCheckAgent.privMemCache[signature];\r\n            if (!!cachedResponse) {\r\n                this.onEvent(new OCSPMemoryCacheHitEvent(signature));\r\n            }\r\n            // Do we have a result for this certificate on disk in %TMP%?\r\n            if (!cachedResponse) {\r\n                try {\r\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\r\n                    const diskCacheResponse = yield CertCheckAgent.privDiskCache.get(signature);\r\n                    if (!!diskCacheResponse.isCached) {\r\n                        CertCheckAgent.onEvent(new OCSPDiskCacheHitEvent(signature));\r\n                        CertCheckAgent.StoreMemoryCacheEntry(signature, diskCacheResponse.value);\r\n                        cachedResponse = diskCacheResponse.value;\r\n                    }\r\n                }\r\n                catch (error) {\r\n                    cachedResponse = null;\r\n                }\r\n            }\r\n            if (!cachedResponse) {\r\n                return cachedResponse;\r\n            }\r\n            try {\r\n                const cachedOcspResponse = ocsp.utils.parseResponse(cachedResponse);\r\n                const responseValue = cachedOcspResponse.value;\r\n                const tbsData = responseValue.tbsResponseData;\r\n                if (tbsData.responses.length < 1) {\r\n                    this.onEvent(new OCSPCacheFetchErrorEvent(signature, \"Not enough data in cached response\"));\r\n                    return;\r\n                }\r\n                const cachedStartTime = tbsData.responses[0].thisUpdate;\r\n                const cachedNextTime = tbsData.responses[0].nextUpdate;\r\n                if (cachedNextTime < (Date.now() + this.testTimeOffset - 60000)) {\r\n                    // Cached entry has expired.\r\n                    this.onEvent(new OCSPCacheEntryExpiredEvent(signature, cachedNextTime));\r\n                    cachedResponse = null;\r\n                }\r\n                else {\r\n                    // If we're within one day of the next update, or 50% of the way through the validity period,\r\n                    // background an update to the cache.\r\n                    const minUpdate = Math.min(24 * 60 * 60 * 1000, (cachedNextTime - cachedStartTime) / 2);\r\n                    if ((cachedNextTime - (Date.now() + this.testTimeOffset)) < minUpdate) {\r\n                        this.onEvent(new OCSPCacheEntryNeedsRefreshEvent(signature, cachedStartTime, cachedNextTime));\r\n                        this.UpdateCache(ocspRequest, proxyInfo).catch((error) => {\r\n                            // Well, not much we can do here.\r\n                            this.onEvent(new OCSPCacheUpdateErrorEvent(signature, error.toString()));\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.onEvent(new OCSPCacheHitEvent(signature, cachedStartTime, cachedNextTime));\r\n                    }\r\n                }\r\n            }\r\n            catch (error) {\r\n                this.onEvent(new OCSPCacheFetchErrorEvent(signature, error));\r\n                cachedResponse = null;\r\n            }\r\n            if (!cachedResponse) {\r\n                this.onEvent(new OCSPCacheMissEvent(signature));\r\n            }\r\n            return cachedResponse;\r\n        });\r\n    }\r\n    static VerifyOCSPResponse(cacheValue, ocspRequest, proxyInfo) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let ocspResponse = cacheValue;\r\n            // Do we have a valid response?\r\n            if (!ocspResponse) {\r\n                ocspResponse = yield CertCheckAgent.GetOCSPResponse(ocspRequest, proxyInfo);\r\n            }\r\n            return new Promise((resolve, reject) => {\r\n                ocsp.verify({ request: ocspRequest, response: ocspResponse }, (error) => {\r\n                    if (!!error) {\r\n                        CertCheckAgent.onEvent(new OCSPVerificationFailedEvent(ocspRequest.id.toString(\"hex\"), error));\r\n                        // Bad Cached Value? One more try without the cache.\r\n                        if (!!cacheValue) {\r\n                            this.VerifyOCSPResponse(null, ocspRequest, proxyInfo).then(() => {\r\n                                resolve();\r\n                            }, (error) => {\r\n                                reject(error);\r\n                            });\r\n                        }\r\n                        else {\r\n                            reject(error);\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (!cacheValue) {\r\n                            CertCheckAgent.StoreCacheEntry(ocspRequest.id.toString(\"hex\"), ocspResponse);\r\n                        }\r\n                        resolve();\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n    static UpdateCache(req, proxyInfo) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const signature = req.id.toString(\"hex\");\r\n            this.onEvent(new OCSPCacheUpdateNeededEvent(signature));\r\n            const rawResponse = yield this.GetOCSPResponse(req, proxyInfo);\r\n            this.StoreCacheEntry(signature, rawResponse);\r\n            this.onEvent(new OCSPCacheUpdateCompleteEvent(req.id.toString(\"hex\")));\r\n        });\r\n    }\r\n    static StoreCacheEntry(sig, rawResponse) {\r\n        this.StoreMemoryCacheEntry(sig, rawResponse);\r\n        this.StoreDiskCacheEntry(sig, rawResponse);\r\n    }\r\n    static StoreMemoryCacheEntry(sig, rawResponse) {\r\n        this.privMemCache[sig] = rawResponse;\r\n        this.onEvent(new OCSPMemoryCacheStoreEvent(sig));\r\n    }\r\n    static StoreDiskCacheEntry(sig, rawResponse) {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\r\n        this.privDiskCache.set(sig, rawResponse).then(() => {\r\n            this.onEvent(new OCSPDiskCacheStoreEvent(sig));\r\n        });\r\n    }\r\n    static GetOCSPResponse(req, proxyInfo) {\r\n        const ocspMethod = \"1.3.6.1.5.5.7.48.1\";\r\n        let options = {};\r\n        if (!!proxyInfo) {\r\n            const agent = CertCheckAgent.GetProxyAgent(proxyInfo);\r\n            options.agent = agent;\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            ocsp.utils.getAuthorityInfo(req.cert, ocspMethod, (error, uri) => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                }\r\n                const url = new URL(uri);\r\n                options = Object.assign(Object.assign({}, options), { host: url.host, protocol: url.protocol, port: url.port, path: url.pathname, hostname: url.host });\r\n                ocsp.utils.getResponse(options, req.data, (error, raw) => {\r\n                    if (error) {\r\n                        reject(error);\r\n                        return;\r\n                    }\r\n                    const certID = req.certID;\r\n                    this.onEvent(new OCSPResponseRetrievedEvent(certID.toString(\"hex\")));\r\n                    resolve(raw);\r\n                });\r\n            });\r\n        });\r\n    }\r\n    static onEvent(event) {\r\n        Events.instance.onEvent(event);\r\n    }\r\n    CreateConnection(request, options) {\r\n        const enableOCSP = (typeof process !== \"undefined\" && process.env.NODE_TLS_REJECT_UNAUTHORIZED !== \"0\" && process.env.SPEECH_CONDUCT_OCSP_CHECK !== \"0\") && options.secureEndpoint;\r\n        let socketPromise;\r\n        options = Object.assign(Object.assign({}, options), {\r\n            requestOCSP: !CertCheckAgent.forceDisableOCSPStapling,\r\n            servername: options.host\r\n        });\r\n        if (!!this.privProxyInfo) {\r\n            const httpProxyAgent = CertCheckAgent.GetProxyAgent(this.privProxyInfo);\r\n            const baseAgent = httpProxyAgent;\r\n            socketPromise = new Promise((resolve, reject) => {\r\n                baseAgent.callback(request, options, (error, socket) => {\r\n                    if (!!error) {\r\n                        reject(error);\r\n                    }\r\n                    else {\r\n                        resolve(socket);\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        else {\r\n            if (!!options.secureEndpoint) {\r\n                socketPromise = Promise.resolve(tls.connect(options));\r\n            }\r\n            else {\r\n                socketPromise = Promise.resolve(net.connect(options));\r\n            }\r\n        }\r\n        if (!!enableOCSP) {\r\n            return CertCheckAgent.OCSPCheck(socketPromise, this.privProxyInfo);\r\n        }\r\n        else {\r\n            return socketPromise;\r\n        }\r\n    }\r\n}\r\n// Test hook to enable forcing expiration / refresh to happen.\r\nCertCheckAgent.testTimeOffset = 0;\r\n// Test hook to disable stapling for cache testing.\r\nCertCheckAgent.forceDisableOCSPStapling = false;\r\n// An in memory cache for recived responses.\r\nCertCheckAgent.privMemCache = {};\r\n\r\n//# sourceMappingURL=CertChecks.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n// Node.JS specific web socket / browser support.\r\nimport ws from \"ws\";\r\nimport { HeaderNames } from \"../common.speech/HeaderNames\";\r\nimport { ArgumentNullError, BackgroundEvent, ConnectionClosedEvent, ConnectionErrorEvent, ConnectionEstablishedEvent, ConnectionMessageReceivedEvent, ConnectionMessageSentEvent, ConnectionOpenResponse, ConnectionStartEvent, ConnectionState, Deferred, Events, EventSource, MessageType, Queue, RawWebsocketMessage, } from \"../common/Exports\";\r\nimport { CertCheckAgent } from \"./CertChecks\";\r\nexport class WebsocketMessageAdapter {\r\n    constructor(uri, connectionId, messageFormatter, proxyInfo, headers, enableCompression) {\r\n        if (!uri) {\r\n            throw new ArgumentNullError(\"uri\");\r\n        }\r\n        if (!messageFormatter) {\r\n            throw new ArgumentNullError(\"messageFormatter\");\r\n        }\r\n        this.proxyInfo = proxyInfo;\r\n        this.privConnectionEvents = new EventSource();\r\n        this.privConnectionId = connectionId;\r\n        this.privMessageFormatter = messageFormatter;\r\n        this.privConnectionState = ConnectionState.None;\r\n        this.privUri = uri;\r\n        this.privHeaders = headers;\r\n        this.privEnableCompression = enableCompression;\r\n        // Add the connection ID to the headers\r\n        this.privHeaders[HeaderNames.ConnectionId] = this.privConnectionId;\r\n        this.privLastErrorReceived = \"\";\r\n    }\r\n    get state() {\r\n        return this.privConnectionState;\r\n    }\r\n    open() {\r\n        if (this.privConnectionState === ConnectionState.Disconnected) {\r\n            return Promise.reject(`Cannot open a connection that is in ${this.privConnectionState} state`);\r\n        }\r\n        if (this.privConnectionEstablishDeferral) {\r\n            return this.privConnectionEstablishDeferral.promise;\r\n        }\r\n        this.privConnectionEstablishDeferral = new Deferred();\r\n        this.privCertificateValidatedDeferral = new Deferred();\r\n        this.privConnectionState = ConnectionState.Connecting;\r\n        try {\r\n            if (typeof WebSocket !== \"undefined\" && !WebsocketMessageAdapter.forceNpmWebSocket) {\r\n                // Browser handles cert checks.\r\n                this.privCertificateValidatedDeferral.resolve();\r\n                this.privWebsocketClient = new WebSocket(this.privUri);\r\n            }\r\n            else {\r\n                const options = { headers: this.privHeaders, perMessageDeflate: this.privEnableCompression };\r\n                // The ocsp library will handle validation for us and fail the connection if needed.\r\n                this.privCertificateValidatedDeferral.resolve();\r\n                const checkAgent = new CertCheckAgent(this.proxyInfo);\r\n                options.agent = checkAgent.GetAgent();\r\n                // Workaround for https://github.com/microsoft/cognitive-services-speech-sdk-js/issues/465\r\n                // Which is root caused by https://github.com/TooTallNate/node-agent-base/issues/61\r\n                const uri = new URL(this.privUri);\r\n                let protocol = uri.protocol;\r\n                if ((protocol === null || protocol === void 0 ? void 0 : protocol.toLocaleLowerCase()) === \"wss:\") {\r\n                    protocol = \"https:\";\r\n                }\r\n                else if ((protocol === null || protocol === void 0 ? void 0 : protocol.toLocaleLowerCase()) === \"ws:\") {\r\n                    protocol = \"http:\";\r\n                }\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n                options.agent.protocol = protocol;\r\n                this.privWebsocketClient = new ws(this.privUri, options);\r\n            }\r\n            this.privWebsocketClient.binaryType = \"arraybuffer\";\r\n            this.privReceivingMessageQueue = new Queue();\r\n            this.privDisconnectDeferral = new Deferred();\r\n            this.privSendMessageQueue = new Queue();\r\n            this.processSendQueue().catch((reason) => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n        }\r\n        catch (error) {\r\n            this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(500, error));\r\n            return this.privConnectionEstablishDeferral.promise;\r\n        }\r\n        this.onEvent(new ConnectionStartEvent(this.privConnectionId, this.privUri));\r\n        this.privWebsocketClient.onopen = () => {\r\n            this.privCertificateValidatedDeferral.promise.then(() => {\r\n                this.privConnectionState = ConnectionState.Connected;\r\n                this.onEvent(new ConnectionEstablishedEvent(this.privConnectionId));\r\n                this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(200, \"\"));\r\n            }, (error) => {\r\n                this.privConnectionEstablishDeferral.reject(error);\r\n            });\r\n        };\r\n        this.privWebsocketClient.onerror = (e) => {\r\n            this.onEvent(new ConnectionErrorEvent(this.privConnectionId, e.message, e.type));\r\n            this.privLastErrorReceived = e.message;\r\n        };\r\n        this.privWebsocketClient.onclose = (e) => {\r\n            if (this.privConnectionState === ConnectionState.Connecting) {\r\n                this.privConnectionState = ConnectionState.Disconnected;\r\n                // this.onEvent(new ConnectionEstablishErrorEvent(this.connectionId, e.code, e.reason));\r\n                this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(e.code, e.reason + \" \" + this.privLastErrorReceived));\r\n            }\r\n            else {\r\n                this.privConnectionState = ConnectionState.Disconnected;\r\n                this.privWebsocketClient = null;\r\n                this.onEvent(new ConnectionClosedEvent(this.privConnectionId, e.code, e.reason));\r\n            }\r\n            this.onClose(e.code, e.reason).catch((reason) => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n        };\r\n        this.privWebsocketClient.onmessage = (e) => {\r\n            const networkReceivedTime = new Date().toISOString();\r\n            if (this.privConnectionState === ConnectionState.Connected) {\r\n                const deferred = new Deferred();\r\n                // let id = ++this.idCounter;\r\n                this.privReceivingMessageQueue.enqueueFromPromise(deferred.promise);\r\n                if (e.data instanceof ArrayBuffer) {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Binary, e.data);\r\n                    this.privMessageFormatter\r\n                        .toConnectionMessage(rawMessage)\r\n                        .then((connectionMessage) => {\r\n                        this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\r\n                        deferred.resolve(connectionMessage);\r\n                    }, (error) => {\r\n                        // TODO: Events for these ?\r\n                        deferred.reject(`Invalid binary message format. Error: ${error}`);\r\n                    });\r\n                }\r\n                else {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Text, e.data);\r\n                    this.privMessageFormatter\r\n                        .toConnectionMessage(rawMessage)\r\n                        .then((connectionMessage) => {\r\n                        this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\r\n                        deferred.resolve(connectionMessage);\r\n                    }, (error) => {\r\n                        // TODO: Events for these ?\r\n                        deferred.reject(`Invalid text message format. Error: ${error}`);\r\n                    });\r\n                }\r\n            }\r\n        };\r\n        return this.privConnectionEstablishDeferral.promise;\r\n    }\r\n    send(message) {\r\n        if (this.privConnectionState !== ConnectionState.Connected) {\r\n            return Promise.reject(`Cannot send on connection that is in ${ConnectionState[this.privConnectionState]} state`);\r\n        }\r\n        const messageSendStatusDeferral = new Deferred();\r\n        const messageSendDeferral = new Deferred();\r\n        this.privSendMessageQueue.enqueueFromPromise(messageSendDeferral.promise);\r\n        this.privMessageFormatter\r\n            .fromConnectionMessage(message)\r\n            .then((rawMessage) => {\r\n            messageSendDeferral.resolve({\r\n                Message: message,\r\n                RawWebsocketMessage: rawMessage,\r\n                sendStatusDeferral: messageSendStatusDeferral,\r\n            });\r\n        }, (error) => {\r\n            messageSendDeferral.reject(`Error formatting the message. ${error}`);\r\n        });\r\n        return messageSendStatusDeferral.promise;\r\n    }\r\n    read() {\r\n        if (this.privConnectionState !== ConnectionState.Connected) {\r\n            return Promise.reject(`Cannot read on connection that is in ${this.privConnectionState} state`);\r\n        }\r\n        return this.privReceivingMessageQueue.dequeue();\r\n    }\r\n    close(reason) {\r\n        if (this.privWebsocketClient) {\r\n            if (this.privConnectionState !== ConnectionState.Disconnected) {\r\n                this.privWebsocketClient.close(1000, reason ? reason : \"Normal closure by client\");\r\n            }\r\n        }\r\n        else {\r\n            return Promise.resolve();\r\n        }\r\n        return this.privDisconnectDeferral.promise;\r\n    }\r\n    get events() {\r\n        return this.privConnectionEvents;\r\n    }\r\n    sendRawMessage(sendItem) {\r\n        try {\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!sendItem) {\r\n                return Promise.resolve();\r\n            }\r\n            this.onEvent(new ConnectionMessageSentEvent(this.privConnectionId, new Date().toISOString(), sendItem.Message));\r\n            // add a check for the ws readystate in order to stop the red console error 'WebSocket is already in CLOSING or CLOSED state' appearing\r\n            if (this.isWebsocketOpen) {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n                this.privWebsocketClient.send(sendItem.RawWebsocketMessage.payload);\r\n            }\r\n            else {\r\n                return Promise.reject(\"websocket send error: Websocket not ready \" + this.privConnectionId + \" \" + sendItem.Message.id + \" \" + new Error().stack);\r\n            }\r\n            return Promise.resolve();\r\n        }\r\n        catch (e) {\r\n            return Promise.reject(`websocket send error: ${e}`);\r\n        }\r\n    }\r\n    onClose(code, reason) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const closeReason = `Connection closed. ${code}: ${reason}`;\r\n            this.privConnectionState = ConnectionState.Disconnected;\r\n            this.privDisconnectDeferral.resolve();\r\n            yield this.privReceivingMessageQueue.drainAndDispose(() => {\r\n                // TODO: Events for these ?\r\n                // Logger.instance.onEvent(new LoggingEvent(LogType.Warning, null, `Failed to process received message. Reason: ${closeReason}, Message: ${JSON.stringify(pendingReceiveItem)}`));\r\n            }, closeReason);\r\n            yield this.privSendMessageQueue.drainAndDispose((pendingSendItem) => {\r\n                pendingSendItem.sendStatusDeferral.reject(closeReason);\r\n            }, closeReason);\r\n        });\r\n    }\r\n    processSendQueue() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            while (true) {\r\n                const itemToSend = this.privSendMessageQueue.dequeue();\r\n                const sendItem = yield itemToSend;\r\n                // indicates we are draining the queue and it came with no message;\r\n                if (!sendItem) {\r\n                    return;\r\n                }\r\n                try {\r\n                    yield this.sendRawMessage(sendItem);\r\n                    sendItem.sendStatusDeferral.resolve();\r\n                }\r\n                catch (sendError) {\r\n                    sendItem.sendStatusDeferral.reject(sendError);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    onEvent(event) {\r\n        this.privConnectionEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n    get isWebsocketOpen() {\r\n        return this.privWebsocketClient && this.privWebsocketClient.readyState === this.privWebsocketClient.OPEN;\r\n    }\r\n}\r\nWebsocketMessageAdapter.forceNpmWebSocket = false;\r\n\r\n//# sourceMappingURL=WebsocketMessageAdapter.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { ArgumentNullError, createNoDashGuid, } from \"../common/Exports\";\r\nimport { WebsocketMessageAdapter } from \"./WebsocketMessageAdapter\";\r\nexport class WebsocketConnection {\r\n    constructor(uri, queryParameters, headers, messageFormatter, proxyInfo, enableCompression = false, connectionId) {\r\n        this.privIsDisposed = false;\r\n        if (!uri) {\r\n            throw new ArgumentNullError(\"uri\");\r\n        }\r\n        if (!messageFormatter) {\r\n            throw new ArgumentNullError(\"messageFormatter\");\r\n        }\r\n        this.privMessageFormatter = messageFormatter;\r\n        let queryParams = \"\";\r\n        let i = 0;\r\n        if (queryParameters) {\r\n            for (const paramName in queryParameters) {\r\n                if (paramName) {\r\n                    queryParams += ((i === 0) && (uri.indexOf(\"?\") === -1)) ? \"?\" : \"&\";\r\n                    const key = encodeURIComponent(paramName);\r\n                    queryParams += key;\r\n                    let val = queryParameters[paramName];\r\n                    if (val) {\r\n                        val = encodeURIComponent(val);\r\n                        queryParams += `=${val}`;\r\n                    }\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n        if (headers) {\r\n            for (const headerName in headers) {\r\n                if (headerName) {\r\n                    queryParams += ((i === 0) && (uri.indexOf(\"?\") === -1)) ? \"?\" : \"&\";\r\n                    const val = encodeURIComponent(headers[headerName]);\r\n                    queryParams += `${headerName}=${val}`;\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n        this.privUri = uri + queryParams;\r\n        this.privId = connectionId ? connectionId : createNoDashGuid();\r\n        this.privConnectionMessageAdapter = new WebsocketMessageAdapter(this.privUri, this.id, this.privMessageFormatter, proxyInfo, headers, enableCompression);\r\n    }\r\n    dispose() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.privIsDisposed = true;\r\n            if (this.privConnectionMessageAdapter) {\r\n                yield this.privConnectionMessageAdapter.close();\r\n            }\r\n        });\r\n    }\r\n    isDisposed() {\r\n        return this.privIsDisposed;\r\n    }\r\n    get id() {\r\n        return this.privId;\r\n    }\r\n    get uri() {\r\n        return this.privUri;\r\n    }\r\n    state() {\r\n        return this.privConnectionMessageAdapter.state;\r\n    }\r\n    open() {\r\n        return this.privConnectionMessageAdapter.open();\r\n    }\r\n    send(message) {\r\n        return this.privConnectionMessageAdapter.send(message);\r\n    }\r\n    read() {\r\n        return this.privConnectionMessageAdapter.read();\r\n    }\r\n    get events() {\r\n        return this.privConnectionMessageAdapter.events;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=WebsocketConnection.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nexport class ReplayableAudioNode {\r\n    constructor(audioSource, bytesPerSecond) {\r\n        this.privBuffers = [];\r\n        this.privReplayOffset = 0;\r\n        this.privLastShrinkOffset = 0;\r\n        this.privBufferStartOffset = 0;\r\n        this.privBufferSerial = 0;\r\n        this.privBufferedBytes = 0;\r\n        this.privReplay = false;\r\n        this.privLastChunkAcquiredTime = 0;\r\n        this.privAudioNode = audioSource;\r\n        this.privBytesPerSecond = bytesPerSecond;\r\n    }\r\n    id() {\r\n        return this.privAudioNode.id();\r\n    }\r\n    // Reads and returns the next chunk of audio buffer.\r\n    // If replay of existing buffers are needed, read() will first seek and replay\r\n    // existing content, and upoin completion it will read new content from the underlying\r\n    // audio node, saving that content into the replayable buffers.\r\n    read() {\r\n        // if there is a replay request to honor.\r\n        if (!!this.privReplay && this.privBuffers.length !== 0) {\r\n            // Find the start point in the buffers.\r\n            // Offsets are in 100ns increments.\r\n            // So how many bytes do we need to seek to get the right offset?\r\n            const offsetToSeek = this.privReplayOffset - this.privBufferStartOffset;\r\n            let bytesToSeek = Math.round(offsetToSeek * this.privBytesPerSecond * 1e-7);\r\n            if (0 !== (bytesToSeek % 2)) {\r\n                bytesToSeek++;\r\n            }\r\n            let i = 0;\r\n            while (i < this.privBuffers.length && bytesToSeek >= this.privBuffers[i].chunk.buffer.byteLength) {\r\n                bytesToSeek -= this.privBuffers[i++].chunk.buffer.byteLength;\r\n            }\r\n            if (i < this.privBuffers.length) {\r\n                const retVal = this.privBuffers[i].chunk.buffer.slice(bytesToSeek);\r\n                this.privReplayOffset += (retVal.byteLength / this.privBytesPerSecond) * 1e+7;\r\n                // If we've reached the end of the buffers, stop replaying.\r\n                if (i === this.privBuffers.length - 1) {\r\n                    this.privReplay = false;\r\n                }\r\n                return Promise.resolve({\r\n                    buffer: retVal,\r\n                    isEnd: false,\r\n                    timeReceived: this.privBuffers[i].chunk.timeReceived,\r\n                });\r\n            }\r\n        }\r\n        return this.privAudioNode.read()\r\n            .then((result) => {\r\n            if (result && result.buffer) {\r\n                this.privBuffers.push(new BufferEntry(result, this.privBufferSerial++, this.privBufferedBytes));\r\n                this.privBufferedBytes += result.buffer.byteLength;\r\n            }\r\n            return result;\r\n        });\r\n    }\r\n    detach() {\r\n        this.privBuffers = undefined;\r\n        return this.privAudioNode.detach();\r\n    }\r\n    replay() {\r\n        if (this.privBuffers && 0 !== this.privBuffers.length) {\r\n            this.privReplay = true;\r\n            this.privReplayOffset = this.privLastShrinkOffset;\r\n        }\r\n    }\r\n    // Shrinks the existing audio buffers to start at the new offset, or at the\r\n    // beginning of the buffer closest to the requested offset.\r\n    // A replay request will start from the last shrink point.\r\n    shrinkBuffers(offset) {\r\n        if (this.privBuffers === undefined || this.privBuffers.length === 0) {\r\n            return;\r\n        }\r\n        this.privLastShrinkOffset = offset;\r\n        // Find the start point in the buffers.\r\n        // Offsets are in 100ns increments.\r\n        // So how many bytes do we need to seek to get the right offset?\r\n        const offsetToSeek = offset - this.privBufferStartOffset;\r\n        let bytesToSeek = Math.round(offsetToSeek * this.privBytesPerSecond * 1e-7);\r\n        let i = 0;\r\n        while (i < this.privBuffers.length && bytesToSeek >= this.privBuffers[i].chunk.buffer.byteLength) {\r\n            bytesToSeek -= this.privBuffers[i++].chunk.buffer.byteLength;\r\n        }\r\n        this.privBufferStartOffset = Math.round(offset - ((bytesToSeek / this.privBytesPerSecond) * 1e+7));\r\n        this.privBuffers = this.privBuffers.slice(i);\r\n    }\r\n    // Finds the time a buffer of audio was first seen by offset.\r\n    findTimeAtOffset(offset) {\r\n        if (offset < this.privBufferStartOffset || this.privBuffers === undefined) {\r\n            return 0;\r\n        }\r\n        for (const value of this.privBuffers) {\r\n            const startOffset = (value.byteOffset / this.privBytesPerSecond) * 1e7;\r\n            const endOffset = startOffset + ((value.chunk.buffer.byteLength / this.privBytesPerSecond) * 1e7);\r\n            if (offset >= startOffset && offset <= endOffset) {\r\n                return value.chunk.timeReceived;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n}\r\n// Primary use of this class is to help debugging problems with the replay\r\n// code. If the memory cost of alloc / dealloc gets too much, drop it and just use\r\n// the ArrayBuffer directly.\r\nclass BufferEntry {\r\n    constructor(chunk, serial, byteOffset) {\r\n        this.chunk = chunk;\r\n        this.serial = serial;\r\n        this.byteOffset = byteOffset;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=ReplayableAudioNode.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { PropertyId } from \"../sdk/Exports\";\r\nexport class ProxyInfo {\r\n    constructor(proxyHostName, proxyPort, proxyUserName, proxyPassword) {\r\n        this.privProxyHostName = proxyHostName;\r\n        this.privProxyPort = proxyPort;\r\n        this.privProxyUserName = proxyUserName;\r\n        this.privProxyPassword = proxyPassword;\r\n    }\r\n    static fromParameters(parameters) {\r\n        return new ProxyInfo(parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyHostName), parseInt(parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyPort), 10), parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyUserName), parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyPassword));\r\n    }\r\n    static fromRecognizerConfig(config) {\r\n        return this.fromParameters(config.parameters);\r\n    }\r\n    get HostName() {\r\n        return this.privProxyHostName;\r\n    }\r\n    get Port() {\r\n        return this.privProxyPort;\r\n    }\r\n    get UserName() {\r\n        return this.privProxyUserName;\r\n    }\r\n    get Password() {\r\n        return this.privProxyPassword;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=ProxyInfo.js.map\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport bent from \"bent\";\r\nimport { ArgumentNullError, Deferred } from \"../common/Exports\";\r\nexport var RestRequestType;\r\n(function (RestRequestType) {\r\n    RestRequestType[\"Get\"] = \"GET\";\r\n    RestRequestType[\"Post\"] = \"POST\";\r\n    RestRequestType[\"Delete\"] = \"DELETE\";\r\n    RestRequestType[\"File\"] = \"file\";\r\n})(RestRequestType || (RestRequestType = {}));\r\n// accept rest operations via request method and return abstracted objects from server response\r\nexport class RestMessageAdapter {\r\n    constructor(configParams) {\r\n        if (!configParams) {\r\n            throw new ArgumentNullError(\"configParams\");\r\n        }\r\n        this.privHeaders = configParams.headers;\r\n        this.privIgnoreCache = configParams.ignoreCache;\r\n    }\r\n    static extractHeaderValue(headerKey, headers) {\r\n        let headerValue = \"\";\r\n        try {\r\n            const arr = headers.trim().split(/[\\r\\n]+/);\r\n            const headerMap = {};\r\n            arr.forEach((line) => {\r\n                const parts = line.split(\": \");\r\n                const header = parts.shift().toLowerCase();\r\n                const value = parts.join(\": \");\r\n                headerMap[header] = value;\r\n            });\r\n            headerValue = headerMap[headerKey.toLowerCase()];\r\n        }\r\n        catch (e) {\r\n            // ignore the error\r\n        }\r\n        return headerValue;\r\n    }\r\n    set options(configParams) {\r\n        this.privHeaders = configParams.headers;\r\n        this.privIgnoreCache = configParams.ignoreCache;\r\n    }\r\n    setHeaders(key, value) {\r\n        this.privHeaders[key] = value;\r\n    }\r\n    request(method, uri, queryParams = {}, body = null, binaryBody = null) {\r\n        const responseReceivedDeferral = new Deferred();\r\n        const requestCommand = method === RestRequestType.File ? \"POST\" : method;\r\n        const handleRestResponse = (data, j = {}) => {\r\n            const d = data;\r\n            return {\r\n                data: JSON.stringify(j),\r\n                headers: JSON.stringify(data.headers),\r\n                json: j,\r\n                ok: data.statusCode >= 200 && data.statusCode < 300,\r\n                status: data.statusCode,\r\n                statusText: j.error ? j.error.message : d.statusText ? d.statusText : d.statusMessage\r\n            };\r\n        };\r\n        const blobToArrayBuffer = (blob) => {\r\n            const reader = new FileReader();\r\n            reader.readAsArrayBuffer(blob);\r\n            return new Promise((resolve) => {\r\n                reader.onloadend = () => {\r\n                    resolve(reader.result);\r\n                };\r\n            });\r\n        };\r\n        const send = (postData) => {\r\n            const sendRequest = bent(uri, requestCommand, this.privHeaders, 200, 201, 202, 204, 400, 401, 402, 403, 404);\r\n            const params = this.queryParams(queryParams) === \"\" ? \"\" : `?${this.queryParams(queryParams)}`;\r\n            sendRequest(params, postData).then((data) => __awaiter(this, void 0, void 0, function* () {\r\n                if (method === RestRequestType.Delete || data.statusCode === 204) {\r\n                    // No JSON from Delete and reset (204) operations\r\n                    responseReceivedDeferral.resolve(handleRestResponse(data));\r\n                }\r\n                else {\r\n                    try {\r\n                        const j = yield data.json();\r\n                        responseReceivedDeferral.resolve(handleRestResponse(data, j));\r\n                    }\r\n                    catch (_a) {\r\n                        responseReceivedDeferral.resolve(handleRestResponse(data));\r\n                    }\r\n                }\r\n            })).catch((error) => {\r\n                responseReceivedDeferral.reject(error);\r\n            });\r\n        };\r\n        if (this.privIgnoreCache) {\r\n            this.privHeaders[\"Cache-Control\"] = \"no-cache\";\r\n        }\r\n        if (method === RestRequestType.File && binaryBody) {\r\n            const contentType = \"multipart/form-data\";\r\n            this.privHeaders[\"content-type\"] = contentType;\r\n            this.privHeaders[\"Content-Type\"] = contentType;\r\n            if (typeof (Blob) !== \"undefined\" && binaryBody instanceof Blob) {\r\n                blobToArrayBuffer(binaryBody).then((res) => {\r\n                    send(res);\r\n                }).catch((error) => {\r\n                    responseReceivedDeferral.reject(error);\r\n                });\r\n            }\r\n            else {\r\n                send(binaryBody);\r\n            }\r\n        }\r\n        else {\r\n            if (method === RestRequestType.Post && body) {\r\n                this.privHeaders[\"content-type\"] = \"application/json\";\r\n                this.privHeaders[\"Content-Type\"] = \"application/json\";\r\n            }\r\n            send(body);\r\n        }\r\n        return responseReceivedDeferral.promise;\r\n    }\r\n    withQuery(url, params = {}) {\r\n        const queryString = this.queryParams(params);\r\n        return queryString ? url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + queryString : url;\r\n    }\r\n    queryParams(params = {}) {\r\n        return Object.keys(params)\r\n            .map((k) => encodeURIComponent(k) + \"=\" + encodeURIComponent(params[k]))\r\n            .join(\"&\");\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=RestMessageAdapter.js.map\r\n"],"names":["ws","createGuid","uuid","createNoDashGuid","EventType","PlatformEvent","eventName","eventType","AudioSourceEvent","audioSourceId","AudioSourceInitializingEvent","AudioSourceReadyEvent","AudioSourceOffEvent","AudioSourceErrorEvent","error","AudioStreamNodeEvent","audioNodeId","AudioStreamNodeAttachingEvent","AudioStreamNodeAttachedEvent","AudioStreamNodeDetachedEvent","AudioStreamNodeErrorEvent","ServiceEvent","jsonstring","ConnectionEvent","connectionId","ConnectionStartEvent","uri","headers","ConnectionEstablishedEvent","ConnectionClosedEvent","statusCode","reason","ConnectionErrorEvent","message","type","ConnectionEstablishErrorEvent","statuscode","ConnectionMessageReceivedEvent","networkReceivedTimeISO","ConnectionMessageSentEvent","networkSentTimeISO","ArgumentNullError","argumentName","InvalidOperationError","ObjectDisposedError","objectName","MessageType","ConnectionMessage","messageType","body","id","ConnectionOpenResponse","EventSource","metadata","event","paramName","eventId","onEventCallback","listener","e","Events","eventSource","ConnectionState","List","list","item","itemIndex","index","count","removedElements","addedCallback","subscriptionId","removedCallback","disposedCallback","seperator","cloneCopy","val","callback","i","selectList","filteredList","compareFn","orderedArray","a","b","array","subscriptions","PromiseState","Deferred","result","resolve","reject","marshalPromiseToCallbacks","promise","cb","err","typedError","__awaiter","this","thisArg","_arguments","P","generator","adopt","value","fulfilled","step","rejected","SubscriberType","Queue","deferredSubscriber","pendingItemProcessor","subs","detachable","promiseArray","wrapper","lists","subscriber","dequeuedItem","RawWebsocketMessage","payload","RiffPcmEncoder","actualSampleRate","desiredSampleRate","actualAudioFrame","audioFrame","audioLength","buffer","view","offset","str","input","srcFrame","srcRate","dstRate","ratio","dstLength","dstFrame","srcOffset","dstOffset","nextSrcOffset","accum","Stream","streamId","streamChunk","ChunkedArrayBufferStream","targetChunkSize","chunk","bytesCopiedFromBuffer","bytesToCopy","targetView","sourceView","Timeout","scheduledTimeoutFunctions","unhandledRequests","workerUrl","worker","data","timerId","idOrFunc","unhandledTimerId","func","delay","OCSPEvent","signature","OCSPMemoryCacheHitEvent","OCSPCacheMissEvent","OCSPDiskCacheHitEvent","OCSPCacheUpdateNeededEvent","OCSPMemoryCacheStoreEvent","OCSPDiskCacheStoreEvent","OCSPCacheUpdateCompleteEvent","OCSPStapleReceivedEvent","OCSPCacheEntryExpiredEvent","serialNumber","expireTime","OCSPCacheEntryNeedsRefreshEvent","startTime","OCSPCacheHitEvent","OCSPVerificationFailedEvent","OCSPCacheFetchErrorEvent","OCSPResponseRetrievedEvent","OCSPCacheUpdateErrorEvent","BackgroundEvent","Contracts","param","name","maxLength","minLength","isDisposed","HeaderNames","AuthInfo","headerName","token","CognitiveSubscriptionKeyAuthentication","subscriptionKey","authFetchEventId","CognitiveTokenAuthentication","fetchCallback","fetchOnExpiryCallback","AudioFileWriter","filename","fs.openSync","format","headerOffset","fs.createWriteStream","fs.writeSync","fs.closeSync","AudioFormatTag","AudioStreamFormat","AudioStreamFormatImpl","samplesPerSecond","bitsPerSample","channels","samplesPerSec","isWavFormat","sampleRate","AudioContext","AudioInputStream","PushAudioInputStream","PullAudioInputStream","PushAudioInputStreamImpl","dataBuffer","audioNode","bufferData","readCycle","audioStreamChunk","stream","connectivity","arrayBuffer","buf","PullAudioInputStreamImpl","totalBytes","transmitBuff","readBuff","pulledBytes","SpeechSynthesisOutputFormat","AudioOutputFormatImpl","formatTag","avgBytesPerSec","blockAlign","audioFormatString","requestAudioFormatString","hasHeader","speechSynthesisOutputFormat","speechSynthesisOutputFormatString","AudioOutputStream","PullAudioOutputStream","PullAudioOutputStreamImpl","intView","tmpBuffer","PushAudioOutputStream","PushAudioOutputStreamImpl","AudioConfig","pcmRecorder","PcmRecorder","AudioConfigImpl","MicAudioSource","deviceId","file","FileAudioSource","audioStream","PullAudioInputStreamCallback","AudioOutputConfigImpl","SpeakerAudioDestination","player","PushAudioOutputStreamCallback","source","def","destination","CancellationReason","SessionEventArgs","sessionId","RecognitionEventArgs","OutputFormat","RecognitionResult","resultId","text","duration","language","languageDetectionConfidence","errorDetails","json","properties","SpeechRecognitionResult","speakerId","SpeechRecognitionEventArgs","CancellationEventArgsBase","errorCode","SpeechRecognitionCanceledEventArgs","ResultReason","SpeechConfig","region","speechImpl","SpeechConfigImpl","PropertyId","endpoint","hostName","authorizationToken","PropertyCollection","OutputFormatPropertyName","proxyHostName","proxyPort","proxyUserName","proxyPassword","currentProperties","ServicePropertiesPropertyName","profanity","ProfanityOption","ForceDictationPropertyName","ret","voice","key","keyToUse","clonedMap","n","destinationCollection","Recognizer","audioConfig","connectionFactory","errorCb","disposing","ServiceRecognizerBase","enabled","osPlatform","osName","osVersion","recognizerConfig","SpeechServiceConfig","Context","OS","recognitionMode","SpeechRecognizer","speechConfig","speechConfigImpl","SpeechConnectionFactory","autoDetectSourceLanguageConfig","RecognitionMode","model","_super","RecognizerConfig","authentication","configImpl","SpeechServiceRecognizer","CancellationDetailsBase","CancellationDetails","CancellationErrorCode","simpleSpeech","SimpleSpeechPhrase","EnumTranslation","CancellationErrorCodePropertyName","QueryParameterNames","ConnectionFactoryBase","config","queryParams","parameterName","propertyId","serviceProperties","propId","SpeechSynthesizer","SpeechSynthesisConnectionFactory","AutoDetectSourceLanguagesOpenRangeOptionName","languageToDefaultVoice","ssml","locale","SynthesizerConfig","synthesizerConfig","SynthesisAdapterBase","SynthesisRestAdapter","IsSsml","dataStream","requestId","audioDestination","SynthesisRequest","response","SynthesisVoicesResult","request","isSSML","SynthesisResult","SpeechSynthesisResult","audioData","audioDuration","SpeechSynthesisEventArgs","SpeechSynthesisWordBoundaryEventArgs","audioOffset","wordLength","textOffset","boundaryType","SpeechSynthesisBookmarkEventArgs","SpeechSynthesisVisemeEventArgs","visemeId","animation","VoiceInfo","SynthesisVoiceGender","SynthesisVoiceType","style","MediaDurationPlaceholderSeconds","AudioFormatToMimeType","audioDestinationId","receivedAudio","audioBlob","mimeType","_a","_b","volume","binary","SpeechRecognitionEvent","RecognitionTriggeredEvent","ListeningStartedEvent","ConnectingToServiceEvent","authFetchEventid","RecognitionStartedEvent","RecognitionCompletionStatus","SpeechConnectionMessage","path","contentType","additionalHeaders","audioSource","recognizer","RequestSession","DynamicGrammarBuilder","SpeechContext","AgentConfig","connectionEvent","connectionClosedEvent","auth","recoMode","successCallback","errorCallBack","conPromise","audioStreamNode","deviceInfo","ReplayableAudioNode","sessionStartEventArgs","messagePayload","telemetryData","cancellationReason","connection","connectionMessage","speechStartDetected","SpeechDetected","speechStartEventArgs","speechStopDetected","speechStopEventArgs","sessionStopEventArgs","generateNewRequestId","speechContextJson","requestSession","SpeechServiceConfigJson","replacement","audioFormat","nextSendTime","fastLaneSizeMs","maxSendUnthrottledBytes","startRecogNumber","readAndUploadCycle","sendDelay","isUnAuthorized","lastStatusCode","lastReason","delayMs","out","readView","SpeechResultFormat","speechServiceConfig","parameters","models","modelsExist","customProperty","modelId","context","k","os","System","SPEECHSDK_CLIENTSDK_VERSION","platform","version","CRLF","WebsocketMessageFormatter","deferral","textMessage","headerBodySplit","binaryMessage","dataView","headerLength","headersString","content","headerBuffer","headerInt8Array","payloadInt8Array","bodyInt8Array","header","headerMatches","separatorIndex","headerValue","authInfo","hostSuffix","host","endpointId","enableCompression","webSocketConnection","WebsocketConnection","ProxyInfo","hostPrefix","recognitionStatus","RecognitionStatus","cancellationErrorCode","SynthesisStatus","SpeechHypothesis","speechRecognizer","phraseDetection","sourceLanguages","speechContextLidMode","customModels","obj","x","speechSegmentationTimeout","mode","segmentationSilenceTimeoutMs","resultProps","processed","hypothesis","ev","simple","resultReason","cancelReason","detailed","DetailedSpeechPhrase","totalOffset","offsetCorrectedJson","cancelEvent","baseOffset","firstWordOffset","phrase","details","word","ServiceTelemetryListener","audioReceivedTime","maxMessagesToSend","metrics","telemetry","isError","continuousRecognition","bytesSent","dynamicGrammar","sectionName","params","dgi","grammar","retObj","retPhrases","RestConfigBase","MetadataType","SynthesisAudioMetadata","speechSynthesizer","SynthesisTurn","SynthesisContext","audio","tmp","synthesisStartEventArgs","audioWithHeader","metadataList","wordBoundaryEventArgs","bookmarkEventArgs","visemeEventArgs","audioBuffer","synthesisContextJson","authPromise","SpeechSynthesisEvent","SynthesisTriggeredEvent","sessionAudioDestinationId","turnAudioDestinationId","ConnectingToSynthesisServiceEvent","SynthesisStartedEvent","rawText","responseJson","idx","options","RestMessageAdapter","RestRequestType","SynthesisServiceType","synthesisSection","AudioWorkletSourceURLPropertyName","privRecorder","mediaStream","nav","getUserMedia","constraints","errorCallback","next","errorMsg","label","defaultMicrophoneName","microphoneDeviceId","deferred","devices","device","hasClose","headerResult","processHeader","getWord","formatSize","channelCount","pos","reader","h","onerror","processFile","buff","fileBuffer","c","stopInputOnRelease","outputStream","waveStreamEncoder","micInput","attachScriptProcessor","scriptNode","bufferSize","audioSampleRate","inputFrame","waveFrame","workletScript","blob","workletNode","track","url","CertCheckAgent","proxyInfo","Cache","disableStapling","agent","Agent","proxyName","httpProxyOptions","HttpsProxyAgent","socketPromise","ocspRequest","stapling","resolved","socket","tlsSocket","peer","issuer","ocsp.request","sig","ocsp.Agent","cachedResponse","diskCacheResponse","tbsData","ocsp.utils","cachedStartTime","cachedNextTime","minUpdate","cacheValue","ocspResponse","ocsp.verify","req","rawResponse","ocspMethod","raw","certID","enableOCSP","baseAgent","tls.connect","WebsocketMessageAdapter","messageFormatter","checkAgent","protocol","networkReceivedTime","rawMessage","messageSendStatusDeferral","messageSendDeferral","sendItem","code","closeReason","pendingSendItem","sendError","queryParameters","bytesPerSecond","offsetToSeek","bytesToSeek","retVal","BufferEntry","startOffset","endOffset","serial","byteOffset","configParams","headerKey","arr","headerMap","line","parts","method","binaryBody","responseReceivedDeferral","requestCommand","handleRestResponse","j","d","blobToArrayBuffer","send","postData","sendRequest","bent","res","queryString"],"mappings":"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"}