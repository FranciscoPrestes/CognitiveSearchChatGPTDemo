const p=new Set(["json","buffer","string"]);var u=c=>(...r)=>{const n=new Set;let e,a,i,o="";return r.forEach(t=>{if(typeof t=="string")if(t.toUpperCase()===t)if(e){const s=`Can't set method to ${t}, already set to ${e}.`;throw new Error(s)}else e=t;else if(t.startsWith("http:")||t.startsWith("https:"))o=t;else if(p.has(t))a=t;else throw new Error(`Unknown encoding, ${t}`);else if(typeof t=="number")n.add(t);else if(typeof t=="object")if(Array.isArray(t)||t instanceof Set)t.forEach(s=>n.add(s));else{if(i)throw new Error("Cannot set headers twice.");i=t}else throw new Error(`Unknown type: ${typeof t}`)}),e||(e="GET"),n.size===0&&n.add(200),c(n,e,a,i,o)};const w=u;class h extends Error{constructor(r,...n){super(...n),Error.captureStackTrace&&Error.captureStackTrace(this,h),this.name="StatusError",this.message=r.statusMessage,this.statusCode=r.status,this.res=r,this.json=r.json.bind(r),this.text=r.text.bind(r),this.arrayBuffer=r.arrayBuffer.bind(r);let e;Object.defineProperty(this,"responseBody",{get:()=>(e||(e=this.arrayBuffer()),e)}),this.headers={};for(const[i,o]of r.headers.entries())this.headers[i.toLowerCase()]=o}}const l=(c,r,n,e,a)=>async(i,o,t={})=>{i=a+(i||"");let s=new URL(i);if(e||(e={}),s.username&&(e.Authorization="Basic "+btoa(s.username+":"+s.password),s=new URL(s.protocol+"//"+s.host+s.pathname+s.search)),s.protocol!=="https:"&&s.protocol!=="http:")throw new Error(`Unknown protocol, ${s.protocol}`);if(o&&!(o instanceof ArrayBuffer||ArrayBuffer.isView(o)||typeof o=="string"))if(typeof o=="object")o=JSON.stringify(o),e["Content-Type"]="application/json";else throw new Error("Unknown body type.");t=new Headers({...e||{},...t});const f=await fetch(s,{method:r,headers:t,body:o});if(f.statusCode=f.status,!c.has(f.status))throw new h(f);return n==="json"?f.json():n==="buffer"?f.arrayBuffer():n==="string"?f.text():f};var y=w(l);export{y as b};
//# sourceMappingURL=bent-0bd6329b.js.map
